/**********************************
 *****    /javascript/TM/GlobalVariables.js
 **********************************/


var traceTMObjects  =   true;
var isUndefined     =   function (object) { return  object   === undefined; };
var isDefined       =   function (object) { return  object   !== undefined; };

/** typedef */ window.TM              = { trace : traceTMObjects };
/** typedef */ window.TM.Gui          = { trace : traceTMObjects };
/** typedef */ window.TM.QUnit        = { trace : traceTMObjects };
/** typedef */ window.TM.Const        = { trace : traceTMObjects };
/** typedef */ window.TM.Debug        = { trace : traceTMObjects };    // this fails in IE (see below)
/** typedef */ window.TM.Events       = { trace : traceTMObjects };
/** typedef */ window.TM.WebServices  = { trace : traceTMObjects };
/** typedef */ window.TM.ControlPanel = { trace : traceTMObjects };

/** typedef */ window.TM.WebServices.Data         = { trace : traceTMObjects };
/** typedef */ window.TM.WebServices.Config       = { trace : traceTMObjects };
/** typedef */ window.TM.WebServices.Helper       = { trace : traceTMObjects };
/** typedef */ window.TM.WebServices.WS_Utils     = { trace : traceTMObjects };
/** typedef */ window.TM.WebServices.WS_Data      = { trace : traceTMObjects };
/** typedef */ window.TM.WebServices.WS_Users     = { trace : traceTMObjects };
/** typedef */ window.TM.WebServices.WS_Libraries = { trace : traceTMObjects };

/** typedef */ window.TM.Events.Gui               = { trace : traceTMObjects };

/** typedef */ window.TM.Gui.GuidanceItemViewer   = { trace : traceTMObjects };
/** typedef */ window.TM.Gui.GuidanceItemEditor   = { trace : traceTMObjects };
/** typedef */ window.TM.Gui.AppliedFiltersList   = { trace : traceTMObjects };
/** typedef */ window.TM.Gui.DataTableViewer      = { trace : traceTMObjects };
/** typedef */ window.TM.Gui.AppliedFilters       = { trace : traceTMObjects };
/** typedef */ window.TM.Gui.TopRigthLinks        = { trace : traceTMObjects };
/** typedef */ window.TM.Gui.CurrentUser          = { trace : traceTMObjects };
/** typedef */ window.TM.Gui.TextSearch           = { trace : traceTMObjects };
/** typedef */ window.TM.Gui.DataTable            = { trace : traceTMObjects };
/** typedef */ window.TM.Gui.Dialog               = { trace : traceTMObjects };
/** typedef */ window.TM.Gui.Main                 = { trace : traceTMObjects };



//Extra IE mappings
if (window.TM.Debug === undefined)
    {
        window.TM.Debug = {};
    }


//Global vars & Constants

window.TM.Const.emptyGuid = "00000000-0000-0000-0000-000000000000";
window.TM.Const.EmptyFunction = function() {};
window.TM.WebServices.Data.lastDataTableData = { aoColumns : [] , aaData: [] };
window.TM.WebServices.Data.filteredDataTable = { aoColumns : [] , aaData: [] };

//Global methods:
window.htmlEscape = function(str)
    {
        return String(str)
                .replace(/&/g, '&amp;')
                .replace(/"/g, '&quot;')
                .replace(/'/g, '&#39;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;');
    };

var htmlUnEscape = function(str)
    {
        return String(str).replace(/&amp;/g , '&')
                          .replace(/&quot;/g, '"')
                          .replace(/&#39;/g , '\'')
                          .replace(/&lt;/g  , '<')
                          .replace(/&gt;/g  , '>');
    };

if (window.console === undefined)
{
    window.console =
        {
            log         : function() {},
            error       : function() {}
        };
}


//ClickJacking protection (breaks embeded editor, we are going to live with the X-Frame-Options protection)
/*
if (self != top)
{
    top.location = self.location;
}*/


/**********************************
 *****    /javascript/TM/GuiObjects.js
 **********************************/


 //Client Side data processing

window.TM.WebServices.Data.extractGuiObjects = function(callback)
    {
        var startTime1 = new Date();
        window.TM.WebServices.Data.GuidanceItemsIDs = [];

        function extractMapping(rawMapping)
        {
            var uniqueStrings = window.TM.WebServices.Data.GuiObjects.UniqueStrings,
                indexes = rawMapping.split(','),
                mapping = {
                                guidanceItemId: uniqueStrings[indexes[0]],
                                libraryId: uniqueStrings[indexes[1]],
                                title: uniqueStrings[indexes[2]],
                                technology: uniqueStrings[indexes[3]],
                                phase: uniqueStrings[indexes[4]],
                                type: uniqueStrings[indexes[5]],
                                category: uniqueStrings[indexes[6]]
                          };
            $.data[mapping.guidanceItemId] = mapping;
            TM.WebServices.Data.GuidanceItemsIDs.push(mapping.guidanceItemId);
            return mapping;
        }

        function extractAllMappings()
        {
            var startTime2 = new Date(),
                guidanceItemsMappings = window.TM.WebServices.Data.GuiObjects.GuidanceItemsMappings;
            $.each(guidanceItemsMappings, function() {	extractMapping(this); });

            window.TM.WebServices.Data.ExtractedAllMappings = true;
            window.TM.Debug.TimeSpan_ExtractAllMappings  = new Date(new Date() - startTime1);
            window.TM.Debug.TimeSpan_CalculateAllMappings = new Date(new Date() - startTime2);
            if(callback !== undefined)
                {
                    callback();
                }
        }
        TM.WebServices.WS_Data.getGUIObjects(extractAllMappings);

    }

TM.WebServices.Data.extractFolderStructure = function(callback)
    {
        var startTime1 = new Date();
        var mapFolderStructure = function()
        {
            //console.log("in mapFolderStructure");
            TM.Events.raiseProcessBarNextValue("Mapping Library Structure");

            var mapView = function(view)
                {
                   allViews.push(view)
                }

            var mapViews = function(views, parentFolder)
                {
                   if(typeof(views) != "undefined")
                   {
                        $.each(views, function() {
                                                      this.id 	 = this.viewId;
                                                      this.type  = "View";
                                                      this.name  = this.caption;
                                                      mapView(this);

                                                      var guidanceItems = (this.guidanceItems.length  === 0)
                                                                            ? []
                                                                            : this.guidanceItems.toString().split(",");
                                                      $.data[this.viewId] = this;//guidanceItems;

                                                      parentFolder.guidanceItems = parentFolder.guidanceItems.concat(guidanceItems)

                                                      //get unique list
                                                      parentFolder.guidanceItems = jlinq.from(parentFolder.guidanceItems).distinct();

                                                  } )
                   }
                }

            var mapFolder = function(folder)
                {
                   allFolders.push(folder);
                   folder.guidanceItems = [];
                   mapViews(folder.views, folder);
                   mapFolders(folder.subFolders, folder);
                }

            var mapFolders = function(folders, parentFolder)
                {
                     if(typeof(folders) != "undefined")
                        $.each(folders, function() {
                                                       this.id 	 = this.folderId;
                                                       this.type = "Folder";
                                                       mapFolder(this, parentFolder);
                                                       var guidanceItems = (this.guidanceItems.length  === 0)
                                                                            ? []
                                                                            : this.guidanceItems.toString().split(",");
                                                       $.data[this.folderId] = this;//guidanceItems
                                                       parentFolder.guidanceItems = parentFolder.guidanceItems.concat(guidanceItems)
                                                       //get unique list
                                                       parentFolder.guidanceItems = jlinq.from(parentFolder.guidanceItems).distinct();

                                                       this.parentId = parentFolder.id;
                                                   } );
                }

            var startTime2 	 = new Date();
            var allViews 	 = []
            var allFolders 	 = []
            var allLibraries = [];


            var setGlobalVariablesAndContinue = function()
                {
                    TM.WebServices.Data.AllViews 	 = allViews;
                    TM.WebServices.Data.AllFolders 	 = allFolders
                    TM.WebServices.Data.AllLibraries = allLibraries

                    TM.WebServices.Data.FolderStructure = true;
                    TM.Debug.TimeSpan_ExtractFolderStructure = new Date(new Date()   - startTime1);
                    TM.Debug.TimeSpan_CalculateFolderStructure = new Date(new Date() - startTime2);

                    if(typeof(callback) !="undefined")
                        callback();
                }


            var mapLibrary = function(libraryStructure)
            {
                //console.log("Mapping library: " + libraryStructure.name);
                TM.Events.raiseProcessBarNextValue("Mapping Library:" + libraryStructure.name);
                var rootNode 	= libraryStructure;
                rootNode.id 	= libraryStructure.libraryId;
                rootNode.type 	= "Library";

                allLibraries.push(rootNode)
                mapFolders (rootNode.subFolders,rootNode );
                mapViews(rootNode.views,rootNode);
                $.data[libraryStructure.libraryId]= libraryStructure;

                if(TM.WebServices.Data.folderStructure.length  === allLibraries.length)
                {
                    setGlobalVariablesAndContinue();
                }
            }

            if (TM.WebServices.Data.folderStructure.length===0)
                setGlobalVariablesAndContinue();
            else
                $.each(TM.WebServices.Data.folderStructure, function()
                    {
                        var that = this;
                        setTimeout(function() { mapLibrary(that) } , 1);
                    })




        }

        /*TM.WebServices.Data.extractGuiObjects(
            TM.WebServices.WS_Data.getFolderStructure(
                mapFolderStructure));*/
        //timing bug

        //console.log("Before extractGuiObjects");

        TM.WebServices.Data.extractGuiObjects(
            function() {
                            //console.log("before getFolderStructure");
                            TM.Events.raiseProcessBarNextValue("Downloading Library Structure");
                            TM.WebServices.WS_Data.getFolderStructure(mapFolderStructure)
                        } );

    }

//Extra Methods to access TM.WebServices.Data objects
TM.WebServices.Data.id_ByName = function(name)
{
    var item = TM.WebServices.Data.item_ByName(name)
    if (isDefined(item))
        return item.id;
}

TM.WebServices.Data.item_ByName = function(name)
    {
        var library = TM.WebServices.Data.library(name);
        if (isDefined(library))
            return library;
        var folder = TM.WebServices.Data.folder(name);
        if (isDefined(folder))
            return folder;
        var view = TM.WebServices.Data.view(name);
        if (isDefined(view))
            return view;
    }

TM.WebServices.Data.library = function(nameOrId)
    {
        return jLinq.from(TM.WebServices.Data.AllLibraries)
                    .equals("name", nameOrId)
                    .orEquals("libraryId",nameOrId)
                    .first();
    }

TM.WebServices.Data.folder = function(nameOrId)
    {
        return jLinq.from(TM.WebServices.Data.AllFolders)
                    .equals("name", nameOrId)
                    .orEquals("folderId",nameOrId)
                    .first();
    }

TM.WebServices.Data.view = function(nameOrId)
    {
        return jLinq.from(TM.WebServices.Data.AllViews)
                    .equals("caption", nameOrId)
                    .orEquals("viewId",nameOrId)
                    .first();
    }

//Get Data previously processed

TM.WebServices.Data.getGuidanceItemsForGuids = function(guids)
    {
        if (typeof(guids) == "undefined")
            guids = TM.WebServices.Data.GuidanceItemsIDs;
        var guidanceItems = [];
        $.each(guids, function(index,guid)
                        {
                            var guidanceItem = $.data[guid];
                            if (typeof(guidanceItem)!="undefined")
                                guidanceItems.push(guidanceItem);
                        });
        return 	guidanceItems;
    }

TM.WebServices.Data.getGuidanceItems_For_DataTable = function(guidanceItemsIds)
   {
        var columns = ["Index","Title", "Technology", "Phase", "Type","Category", "Guid"];//, "LibraryId"];

        var getTableColumns = function()
        {
            var tableColumns = [];
            var add_Columns = function(titles)
                {
                    $.each(titles,function() { tableColumns.push({sTitle:this}) })
                }

            add_Columns(columns);

            tableColumns[0].sWidth="5%";
            //tableColumns[1].sWidth=400;
            tableColumns[1].sWidth="50%";
            tableColumns[3].sWidth="15%";
            tableColumns[4].sWidth="15%";
            tableColumns[5].sWidth="15%";
            return tableColumns;
        }

        var getTableData = function(guids)
        {
            var data = [];
            if (guids === null || isUndefined(guids))
                return data;
            $.each(guids, function(index,value)
                {
                    var guidandeItem = $.data[value];
                    if (typeof(guidandeItem) == "undefined")
                    {
                        //console.log("ERROR FOR: " + value);
                    }
                    else
                    {
                        var technology = (guidandeItem.technology    === null) ? "" : guidandeItem.technology;
                        var phase      = (guidandeItem.phase         === null) ? "" : guidandeItem.phase;
                        var type       = (guidandeItem.type          === null) ? "" : guidandeItem.type;
                        var category   = (guidandeItem.category      === null) ? "" : guidandeItem.category;

                        //for now hard-code this (need to find a better algorithm
                        if (technology.split(",").length > 1)
                        {
                            $.each(technology.split(","), function()
                                {
                                    data.push([
                                        index, guidandeItem.title,
                                        this.trim(),
                                        phase, type, category,
                                        guidandeItem.guidanceItemId ]) ;
                                });
                        }
                        else if (phase.split(",").length > 1)
                        {
                            $.each(phase.split(","), function()
                                {
                                    data.push([
                                        index, guidandeItem.title,
                                        technology,
                                        this.trim(),
                                        type, category,
                                        guidandeItem.guidanceItemId ]) ;
                                });
                        }
                        else
                        {
                            data.push([
                                        index, guidandeItem.title,
                                        technology, phase, type, category,
                                        guidandeItem.guidanceItemId ]) ;
                        }
                    }
                });
            return data;
        }

        var dataTableData = {
                                bPaginate : false,
                                bInfo : false,
                                bSort : true,
                                bDeferRender: true,
                                bProcessing: true,
                                aoColumns  : getTableColumns()
                             };
        dataTableData.aaData  = getTableData(guidanceItemsIds);
        return dataTableData;
    }

TM.WebServices.Data.getGuidanceItemsInGuid_For_DataTable = function(guid_for_LibraryFolderOrView)
    {
        //_guid_for_LibraryFolderOrView = guid_for_LibraryFolderOrView;
        TM.WebServices.Data.LastSelectedGuid_LibraryFolderOrView = guid_for_LibraryFolderOrView;
        var dataTableData = {};
        if (typeof(guid_for_LibraryFolderOrView) != "undefined")
        {
            var targetObject = $.data[guid_for_LibraryFolderOrView];
            if (typeof(targetObject)!= "undefined")
            {
                TM.WebServices.Data.targetObjectGuidanceItemsIds = targetObject.guidanceItems;
                dataTableData = TM.WebServices.Data.getGuidanceItems_For_DataTable(targetObject.guidanceItems);
                dataTableData.targetObject = targetObject;
            }
            else
                //dataTableData = TM.WebServices.Data.getGuidanceItems_For_DataTable([])
                dataTableData = TM.WebServices.Data.getGuidanceItems_For_DataTable(null)

            /*dataTableData.targetObject = $.data[guid_for_LibraryFolderOrView];
            if (typeof(dataTableData.targetObject)!= "undefined")
                dataTableData.aaData = getTableData(dataTableData.targetObject.guidanceItems);
            */
        }
        else
        {
            //dataTableData = TM.WebServices.Data.getGuidanceItems_For_DataTable(TM.WebServices.Data.GuidanceItemsIDs)
            dataTableData = TM.WebServices.Data.getGuidanceItems_For_DataTable([])
        }

        TM.WebServices.Data.lastDataTableData            = dataTableData;
        TM.WebServices.Data.dataTableDataForSelectedGuid = dataTableData;
        return dataTableData;
   }





//Extension methods:

 Array.prototype.unique = function()
    {
        var arrVal = this;
        var uniqueArr = [];
        for (var i = arrVal.length; i--; )
        {
            var val = arrVal[i];
            if ($.inArray(val, uniqueArr) === -1)
            {
                uniqueArr.unshift(val);
            }
        }
        return uniqueArr;
    };

Date.prototype.secondsAndMiliSeconds = function	()
    {
        return this.getSeconds() + "s " + this.getMilliseconds() + "ms" ;
    };

Date.prototype.toNow_SecondsAndMiliSeconds = function	()
    {
        return new Date(new Date() - this).secondsAndMiliSeconds();
    };

Date.prototype.toNow = function	()
    {
        return new Date(new Date() - this);
    }


/**********************************
 *****    /javascript/TM/Settings.js
 **********************************/


//TM Settings
window.TM.tmVersion            = "TM 3.3";
window.TM.ArticleTitle         = "TeamMentor 3.3";

window.TM.tmWebServices        = '/Aspx_Pages/TM_WebServices.asmx/';
window.TM.NotAuthorizedPage    = '/Html_Pages/Gui/Panels/AD_Non_Authorized_User.html';

window.TM.Tracking_Google_Analytics_ID                 = null;    // configure this in  TM_Custom_Settings.js
window.TM.Gui.showLibraryStructureToAnonymous          = true;
window.TM.Gui.LoadLibraryData                          = true;
window.TM.Gui.editMode                                 = false;

window.TM.Debug.addTimeStampToLoadedPages              = true;     // set true true during dev
window.TM.Debug.reuseLibraryMappingsObject             = true;
window.TM.Debug.load_HomePage                          = true;

window.TM.Debug.showExperimentalFeatures               = false;
window.TM.Debug.allow_start_checkUserLoop              = true;    // use to prevent the auto check of user settings


window.TM.Debug.show_DebugDiv                          = false;  // show small box with links to open trace view
window.TM.Debug.show_TraceView                         = false;  // show call trace popup window
window.TM.Debug.callTrace_LoadEnvironment              = false;  // open traceview popup and setup call trace hooks
window.TM.Debug.callTrace_LoadEnvironment_Before_Gui   = false;
window.TM.Debug.callTrace_ShowExecutionTime            = false;
window.TM.Debug.callTrace_LogToConsole                 = false;
window.TM.Debug.callTrace_ShowParamsInConsoleLog       = false;

window.TM.Debug.logEventsRaised                        = false;    // set to view the events fired in the console
window.TM.Debug.logEventsRaised_CallTrace              = false;    // will also show the CallTrace of the logged calls
window.TM.Debug.logLoadedPages                         = false;

//only put real passwords here in QA environments
window.TM.QUnit.defaultUser_Admin                      = "qa_admin";
window.TM.QUnit.defaultUser_Editor                     = "qa_editor";
window.TM.QUnit.defaultUser_Reader                     = "qa_reader";
window.TM.QUnit.defaultPassord_Admin                   = "!!tmbeta";
window.TM.QUnit.defaultPassord_Editor                  = "!!tmbeta";
window.TM.QUnit.defaultPassord_Reader                  = "!!TMbeta";

//Individual trace options
window.TM.WebServices.Helper.trace                     = false;
window.TM.Gui.AppliedFilters.trace                     = false;
window.TM.WebServices.trace                            = false;


/**********************************
 *****    /javascript/TM/Events.js
 **********************************/


//Global events
TM.Events =
    {
            trace				: true
        ,	aSyncMode			: true
        ,	_target				: 'body'
        , 	_eventCount			: 0
        ,	_registerEvents		: function(eventNames)
                                    {
                                        $.each(eventNames, function(index, value) { TM.Events._register(value) })
                                    }
        ,	_register			: function(name, callback)
                                    {
                                        if(isUndefined(callback))
                                        {
                                            $(TM.Events._target).bind(name, function() { } );		// add an empty function
                                            TM.Events._events(name).pop();							// add remove it so that we get the entry with no function
                                        }
                                        else
                                            $(TM.Events._target).bind(name, callback);

                                        TM.Events[name] 	= function()
                                                                {
                                                                     TM.Events._raise(name)
                                                                } ;
                                        TM.Events[name].enabled		= true;
                                        TM.Events[name].aSyncMode	= true;
                                        TM.Events[name].invokeOnce_OnlyExecuteFirst = false;
                                        TM.Events[name].invokeOnce_Events	= [];

                                        TM.Events[name].add = function(_callback)
                                                                {
                                                                    $(TM.Events._target).bind(name, _callback);
                                                                }
                                        //TM.Events[name].add_RemoveOnRaise = function(_callback)
                                        TM.Events[name].add_InvokeOnce = function(_callback)
                                                                {
                                                                    if(typeof(_callback) === "function")
                                                                    {
                                                                        TM.Events[name].invokeOnce_Events.push(_callback);
                                                                    }
                                                                    else if (_callback instanceof Array)
                                                                        $.each(_callback , function() { TM.Events[name].add_InvokeOnce(this)});

                                                                    return this;
                                                                    //TM.Events[name]
                                                                    /*TM.Events[name].add(function()
                                                                        {
                                                                            TM.Events[name].remove();
                                                                            _callback();
                                                                        });*/
                                                                }
                                        TM.Events[name].remove = function()
                                                                {
                                                                    TM.Events._remove(name);
                                                                }
                                        TM.Events[name].events = function()
                                                                {
                                                                    return TM.Events._events(name);
                                                                }
                                        TM.Events[name].trace	= false;
                                    }
        , 	_remove				: function(name)
                                    {
                                        $(TM.Events._target).unbind(name);
                                    }
        , 	_raise				: function(name)
                                    {
                                        var currentEvent = TM.Events[name];
                                        if (currentEvent.enabled === false)
                                        {
                                            console.log("Event {0} disabled".format(name));
                                            return;
                                        }
                                        TM.Events._eventCount++;
                                        if (TM.Debug.logEventsRaised)
                                        {
                                            console.log("event #{0} : {1} ({2})".format(TM.Events._eventCount, name , currentEvent.invokeOnce_Events.length));
                                            if (TM.Debug.logEventsRaised_CallTrace)
                                                console.trace()
                                        }
                                        var raiseEvents = function()
                                            {
                                                //start with the invokeOnce callbacks
                                                while (currentEvent.invokeOnce_Events.length > 0)
                                                {
                                                    try
                                                    {
                                                        currentEvent.invokeOnce_Events.shift().call()		//using shift instead of pop so that the events execute in sequence
                                                        if (currentEvent.invokeOnce_OnlyExecuteFirst)
                                                            break;
                                                    }
                                                    catch (e)
                                                    {
                                                        TM.Gui.Dialog.alertUser(e.message,"Error executing (invoke once for) event: " + name);
                                                    }
                                                };

                                                    // then invoke the registed callbacks
                                                if (currentEvent.events() != null)
                                                {
                                                    $.each(currentEvent.events(),  function()
                                                        {
                                                            if (isDefined(this.handler) === false)
                                                            {
                                                                TM.Gui.Dialog.alertUser("Event handler not set for: " + name, "Event invocation");
                                                                return;
                                                            }
                                                            try
                                                            {
                                                                this.handler();
                                                            }
                                                            catch (e)
                                                            {
                                                                TM.Gui.Dialog.alertUser(e.message,"Error executing event: " + name);
                                                            }
                                                        });
                                                }
                                            };
                                        if (TM.Events.aSyncMode && TM.Events[name].aSyncMode)
                                            setTimeout(raiseEvents, 20);
                                        else
                                            raiseEvents();
                                    }
        , 	_allEvents			: function()
                                    {
                                        return $("body").data("events");
                                    }
        , 	_allEvents_List		: function(onlyShowEventsWithHandlers)
                                    {
                                        var eventsList = [];
                                        $.each(TM.Events._allEvents(), function(name, handler)
                                                {
                                                    if(onlyShowEventsWithHandlers != false || handler.length > 0)
                                                        eventsList.push("{0} \t\t [{1} event(s)]".format(name, handler.length))
                                                });
                                        return eventsList.join('\n');
                                    }
        , 	_events 			: function(eventName)
                                    {
                                        var allEvents = TM.Events._allEvents();
                                        if (isUndefined(name))
                                            return allEvents;
                                        var match = null;
                                        $.each(allEvents, function (name, handler)
                                            {
                                                if (name ===eventName)
                                                {
                                                    match = handler;
                                                    return false;
                                                }
                                            })
                                        return match;
                                    }
    }

TM.Events._add = TM.Events._register;


TM.Events._eventsFor_Gui =
        [
                'onRefreshGuiData'							// to signal that the GUI data should be refreshed
            ,	'onAppliedFieldsEnd'						// when the AppliedFields table is built and shown
            ,	'onResize'
            ,	'onEditModeChange'
            ,	'onDisplayDataTable'						// to be set by the panel that wants to show this
            ,	'onDataTableDisplayed'						// after the data table is displayed
            , 	'onLibraryTreeSelected'						// where there is a new selected node
            ,	'onLibraryTreeLoaded'						// when the library tree is loaded
            ,	'onBuildFiltersGui'
            ,	'onMainGuiDivAvailable'						// when the main gui div is available
            ,	'onMainGuiLoaded'							// when the main gui is loaded (not when the entire GUI is ready)
            ,	'onHomePageLinksLoaded'						// when the top rigth links are loaded
            ,	'onLoginDialogOpen'							// when the login dialog is openeded
            ,	'onLoginDialogClose'						// when the login dialog is closed
            ,   'onSignupDialogOpen'
            ,   'onSignupDialogClose'
            ,	'onUserDataLoaded'							// called after we refreshed the current user data
            ,	'onUserChange'								// called when the current user changes (login or logout)
            , 	'onShowGuidanceItem'						// when we want to show a guidanceItem
            ,	'raiseProcessBarNextValue'
//			,	'raiseWebServiceReceivedData'
            ,	'onMainGuiScriptsLoaded'
            ,	'onGuiObjectsLoaded'
            ,	'onFolderStructureLoaded'
            ,	'onFolderStructureMapped'
            ,	'onFiltersRemoved'
            ,	'onTextSearch'
            ,	'onTextSearchComplete'
            ,	'onInvalidateSearchText'

        ];

TM.Events._eventsFor_Libraries =
        [

                'onNewLibrary'								// called when there was a new library added to the Database
            ,	'onNewFolder'								// called when there was a new folder added to the Database
            ,	'onNewView'									// called when there was a new view added to the Database
            ,	'onRemovedLibrary'							// called when there was a library was removed from the Database
            ,	'onRemovedFolder'							// called when there was a folder was removed from the Database
            ,	'onRemovedView'								// called when there was a view was removed from the Database
            ,	'onRenamedLibrary'							// called when there was a library was renamed from the Database
            ,	'onRenamedFolder'							// called when there was a folder was renamed from the Database
            ,	'onRenamedView'								// called when there was a view was renamed from the Database
        ]

TM.Events._eventsFor_ControlPanel =
        [
                'onControlPanelScriptsLoaded'
            ,	'onControlPanelGuiLoaded'
            ,	'onControlPanelViewLoaded'
            ,	'onCreateUsers'
            ,	'onUserDeleted'
            ,	'onFileUploaded'
        ]


$(function()
    {
        TM.Events._registerEvents(TM.Events._eventsFor_Gui);
        TM.Events._registerEvents(TM.Events._eventsFor_Libraries);
        TM.Events._registerEvents(TM.Events._eventsFor_ControlPanel);
        TM.Events._register('eventTest');


        //two special cases for data loaded
        TM.Events.onFolderStructureLoaded.add(function()
            {
                TM.WebServices.Data.extractFolderStructure()
            });
        TM.Events.onGuiObjectsLoaded.add(function()
            {
                TM.WebServices.Data.extractGuiObjects();
            });
    });


/*TM.Events.raiseProcessBarNextValue		= function(message)	{ } // to be used to let progress bars know about a new even
TM.Events.raiseWebServiceReceivedData 	= function ()			{ }  // when there is data received from a webservice

TM.Events.onMainGuiScriptsLoaded	= function()			{}
TM.Events.onGuiObjectsLoaded 	  	= function(callback) 	{ $(function() { TM.WebServices.Data.extractGuiObjects(callback); 		}); };
TM.Events.onFolderStructureLoaded 	= function(callback)	{ $(function() { TM.WebServices.Data.extractFolderStructure(callback); 	}); };
*/
/*TM.Events.onDisplayDataTable 	  	= function() 			{} // to be set by the panel that wants to show this
TM.Events.onDataTableDisplayed 	  	= function() 			{} // after the data table is displayed
TM.Events.onLibraryTreeLoaded		= function() 			{} // when the library tree is loaded
TM.Events.onBuildFiltersGui		    = function()			{}
TM.Events.onMainGuiDivAvailable		= function()			{} // when the main gui div is available
TM.Events.onMainGuiLoaded			= function()			{} // when the main gui is loaded (not when the entire GUI is ready)
TM.Events.onHomePageLinksLoaded		= function()			{} // when the top rigth links are loaded
TM.Events.onLoginDialogOpen			= function()			{} // when the login dialog is visible
*/

/*TM.Events.onAppliedFieldsEnd  		= function() 			{} // when the AppliedFields table is built and shown
TM.Events.onNewUser 	  			= function() 			{} // called when there is a new user
TM.Events.onNewLibrary 	  			= function() 			{} // called when there was a new library added to the Database
TM.Events.onNewFolder				= function() 			{} // called when there was a new folder added to the Database
TM.Events.onNewView					= function() 			{} // called when there was a new view added to the Database
TM.Events.onRemovedLibrary 	  		= function() 			{} // called when there was a library was removed from the Database
TM.Events.onRemovedFolder			= function() 			{} // called when there was a folder was removed from the Database
TM.Events.onRemovedView				= function() 			{} // called when there was a view was removed from the Database
TM.Events.onRenamedLibrary			= function() 			{} // called when there was a library was renamed from the Database
TM.Events.onRenamedFolder			= function() 			{} // called when there was a folder was renamed from the Database
TM.Events.onRenamedView				= function() 			{} // called when there was a view was renamed from the Database
*/

//Control Panel events and Variables
//TM.Events.onControlPanelScriptsLoaded	= function()		{}
//TM.Events.onControlPanelGuiLoaded		= function()		{}
//TM.Events.onControlPanelViewLoaded  	= function()		{}
//TM.Events.onCreateUsers					= function()		{}
//TM.Events.onFileUploaded				= function()		{};

//TM.Gui.DataTable.reDraw				= function()			{}		// on resize events


//Other globally called functions

// to be overriten by a GUI class

TM.Gui.Dialog.showUserMessage		= function(message) 		{ console.log("TM USER MESSAGE: " + message); }
TM.Gui.Dialog.alertUser				= function(message, title)	{ console.log("TM USER MESSAGE: " + title + " : " + message); }
TM.Gui.showUserMode					= function()				{}					// used to render UserMode
TM.Gui.showEditMode					= function()				{}					// used to render EditMode
TM.Gui.Dialog.isThereAnDialogOpen   = function()				{ return false; }

;


/**********************************
 *****    /javascript/TM/Debug.js
 **********************************/


TM.Debug.TraceView =
    {
            load		: function(setupHooks)
                            {
                                console.log("loading TraceView");
                                $.ajaxSetup({ async:false});
                                $.getScript('/javascript/jsTrace/trace-src.js')
                                $.ajaxSetup({ async:true});
                                if (setupHooks)
                                    TM.Debug.CallTrace.trace_TM_Object();
                            }
    }



TM.Debug.CallTrace 	=
    {
            load		: function()
                            {
                                console.log("loading CallTrace");
                                $.ajaxSetup({ async:false});
                                $.getScript('/javascript/jsTrace/jscalltracer.js')
                                $.ajaxSetup({ async:true});
                                return this;
                            }
        ,   reloadSelf	: function()
                            {
                                $.ajaxSetup({ async:false});
                                $.getScript('/javascript/TM/debug.js')
                                $.ajaxSetup({ async:true});
                                return this;
                            }
        ,	traceObject	: function(name, object)
                            {
                                console.log("Setting up hooks for {0}".format(name));
                                if (typeof(JSCT) == "undefined")
                                    this.load();
                                JSCT._setupObject(name, object);
                                return this;
                            }

        , 	trace_TM_Object	: function()
                            {
                                this.traceObject("TM", TM);
                            }

        , 	trace_Events	: function()
                            {
                                this.traceObject("Events", TM.Events);
                            }

        , 	trace_CurrentUser	: function()
                            {
                                this.traceObject("CurrentUser", TM.Gui.CurrentUser);
                            }
    }

TM.Debug.DebugDiv =
    {
            show			: function()
                            {
                                debugDiv = $("<div>").absolute().top(0).left(600).css({ border: "3px solid",  padding: '2px', background: 'white' })
                                                     .append("<h2>debug div</h2>").zIndex(1000);
                                debugDiv.appendTo("body");
                                debugDiv.add_Link("Open Trace View").click(function() { TM.Debug.TraceView.load(false)} );
                                debugDiv.append("<br>");
                                debugDiv.add_Link("Open Trace View (and hooks)").click(function() { TM.Debug.TraceView.load(true) });
                                debugDiv.append("<br>");
                                debugDiv.add_Link("Setup Trace Hooks").click(function() { TM.Debug.CallTrace.trace_TM_Object() });


                                debugDiv.draggable();
                                //debugDiv.zIndex(1000);

                            }

    }

TM.Debug.FireBugLite =
    {
            htmlPage 		: '/Javascript/Firebug/beta/Firebug.html'
        ,	targetDiv 		: 'FireBugDiv'
        ,	open			: function()
                                {
                                    $("<div>").attr('id',this.targetDiv).appendTo("body").load(this.htmlPage)
                                }
    }

$(function()
    {
        if (TM.Debug.callTrace_LoadEnvironment)
        {
        /*	if ($.browser.msie)
            {
                //setTimeout(TM.Debug.DebugDiv.show, 200);
            }
            else*/
            {
                if (TM.Debug.callTrace_LoadEnvironment_Before_Gui)
                {
                    TM.Events.onMainGuiDivAvailable.add(function()
                        {
                            TM.Debug.TraceView.load(true);
                            TM.Events.onMainGuiDivAvailable.remove()
                        } );
                }
                else
                    TM.Events.onMainGuiLoaded.add(function()
                        {
                            TM.Debug.TraceView.load(true);
                            TM.Events.onMainGuiLoaded.remove();
                        } );
            }
        }

        if (TM.Debug.show_TraceView)
            TM.Debug.TraceView.load(false);
        if (TM.Debug.show_DebugDiv)
            setTimeout(TM.Debug.DebugDiv.show, 200);
})


/**********************************
 *****    /_Customizations/TM_Custom_Settings.js
 **********************************/



//TeamMentor SI version specific settings (to be moved into TM SI Private repo)

TM.Tracking_Google_Analytics_ID	= "UA-37594728-3";		// TM CI
TM.tmVersion					= TM.tmVersion + " Dev.3.11 (SI)";


/**********************************
 *****    /javascript/IE_Fixes.js
 **********************************/


//These are functions that are missing in IE which should be there:

//Array.indexOf
//   see: http://stackoverflow.com/questions/1744310/how-to-fix-array-indexof-in-javascript-for-ie-browsers
//        https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/IndexOf#Compatibility


if ($.browser.msie)
{
    console.group 		= function() {};
    console.groupEnd	= function() {};
}

if (!Array.prototype.indexOf) {
    Array.prototype.indexOf = function (searchElement /*, fromIndex */ ) {
        "use strict";
        if (this === void 0 || this === null) {
            throw new TypeError();
        }
        var t = Object(this);
        var len = t.length >>> 0;
        if (len === 0) {
            return -1;
        }
        var n = 0;
        if (arguments.length > 0) {
            n = Number(arguments[1]);
            if (n !== n) { // shortcut for verifying if it's NaN
                n = 0;
            } else if (n !== 0 && n !== Infinity && n !== -Infinity) {
                n = (n > 0 || -1) * Math.floor(Math.abs(n));
            }
        }
        if (n >= len) {
            return -1;
        }
        var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);
        for (; k < len; k++) {
            if (k in t && t[k] === searchElement) {
                return k;
            }
        }
        return -1;
    }
}


/**********************************
 *****    /javascript/jO2/jO2_String_ExtensionMethods.js
 **********************************/


// String Extension methods

//jQuery(function() 			// add the new functions after page load
//{
	String.prototype.add_Time 		= function() 		 { return "{0}_{1}".format(this, new Date().getTime());  };
	String.prototype.add_TimeToUrl 	= function()		 { return "{0}?time={1}".format(this, new Date().getTime());  };
	String.prototype.add_Random 	= function() 		 { return "{0}_{1}".format(this, Math.random().toString().replace(".",""));  };
	String.prototype.wait 			= function(callback) { setTimeout(function() { callback(); }, this );};
	String.prototype.line	    	= function() 		 { return "{0}\n".format(this);  };
//});

// int Extension methods

//Number.prototype.wait = function() { alert('there'); };  // doesn't seem to work directly (only if a number is assigned to a variable)


/**********************************
 *****    /javascript/jO2/jO2_jQuery_ExtensionMethods.js
 **********************************/


//jQuery(function() 			// add the new functions after page load
//{

    // String based Extension methods
    String.prototype.$id = 	  function() { return $('#' + this); }
    String.prototype.$class = function() { return $(''  + this); }
    String.prototype.$css =   function() { return $('.' + this); }
    String.prototype.format = function() { return jQuery.validator.format( this,[].slice.call(arguments)) };

    String.prototype.$  = function(value)
                                    {
                                        if ($(this.toString()).html() != null)
                                            return $(this.toString());
                                        if (typeof(this.$id().val()) == "string")
                                            return this.$id();
                                        if (typeof(this.$class().val()) == "string")
                                            return this.$class();
                                        if (typeof(this.$css().val()) == "string")
                                            return this.$css();
                                    };

    String.prototype.$html  = function(value)
                                    {
                                        if (typeof(this.$id().val()) == "string")
                                            return this.$id().html(value);
                                        if (typeof(this.$class().val()) == "string")
                                            return this.$class().html(value);
                                        if (typeof(this.$css().val()) == "string")
                                            return this.$css().html(value);
                                    };

    //experiments
    /*String.prototype.$findId =   function() { return $.find('#' + this); }
    String.prototype.$findClass =   function() { return $.find('#' + this); }
    String.prototype.$findCss =   function() { return $.find('#' + this); } */

    //String.prototype.$eval =   function() { return $.find('#' + this); } */
//});

    jQuery.fn.id     = function(left)	{ return this.attr('id'); };
    jQuery.fn.value  = function(left)	{ return this.attr('value'); };

    jQuery.fn.top    = function(top) 	{ this.css('top',top)	; return this; };
    jQuery.fn.left   = function(left)	{ this.css('left',left)	; return this; };
    jQuery.fn.bottom = function(top) 	{ this.css('bottom',top)	; return this; };
    jQuery.fn.right  = function(left)	{ this.css('right',left)	; return this; };

    jQuery.fn.absolute = function() 	{ return this.css('position','absolute'); };
    jQuery.fn.static   = function()		{ return this.css('position','static'); };
    jQuery.fn.relative = function()		{ return this.css('position','relative'); };


    jQuery.fn.add_Link = function(title, url)
                                    {
                                        if (typeof(url)=="undefined")
                                            url = "#";
                                        var linkId = "link".add_Random();
                                        this.append("<a id='{0}' href='{1}'>{2}</a>".format(linkId, url, title));
                                        return linkId.$id();
                                    };

    jQuery.fn.add_TextBox = function(text)
                                    {
                                        var textBoxId = "textBox".add_Random();
                                        this.append("<input id='{0}' type='text'/>".format(textBoxId));
                                        var textBox = textBoxId.$id();
                                        textBox.attr('value',text);
                                        return textBox;
                                    };

    jQuery.fn.add_Div = function(id, text)
                                    {
                                        if(typeof(id) == "undefined")
                                            id = "div".add_Random();
                                        if (typeof(this.children("#" + id).val()) == "undefined")
                                            this.append("<div id='{0}'></div>".format(id));
                                        var div = this.children("#" + id);
                                        if(typeof(text)!="undefined")
                                            div.html(text);
                                        return div;
                                    };

    jQuery.fn.insert_Link = function(title, url)
                                    {
                                        var linkId = "link".add_Random();
                                        this.before("<a id='{0}' href='{1}'>{2}</a> aa ".format(linkId, url, title));
                                        return linkId.$id();
                                    };

    jQuery.fn.load_InDiv = function(link, callback)
                                    {
                                        var div = $("<div></div>");
                                        var linkWithTime = link.add_TimeToUrl();
                                        div.load(linkWithTime, callback);
                                        this.append(div);
                                        return div;
                                    }


    jQuery.fn.center = function ()  {
                                        this.css("position","absolute");
                                        this.css("top", (($(window).height() - this.outerHeight()) / 2) + $(window).scrollTop() + "px");
                                        this.css("left", (($(window).width() - this.outerWidth()) / 2) + $(window).scrollLeft() + "px");
                                        return this;
                                    }


    jQuery.ctrl     = function(key, callback, args)                                       //from http://www.gmarwaha.com/blog/2009/06/16/ctrl-key-combination-simple-jquery-plugin/
                                    {
                                        $(document).keydown(function(e)
                                            {
                                                if(!args) args=[];                              // IE barks when args is null
                                                if(e.keyCode == key.charCodeAt(0) && e.ctrlKey)
                                                {
                                                    callback.apply(this, args);
                                                    return false;
                                                }
                                            });
                                    };


function reloadEx()
{
    jQuery.getScript('/javascript/jO2/jO2_String_ExtensionMethods.js');
    jQuery.getScript('/javascript/jO2/jO2_jQuery_ExtensionMethods.js');
    jQuery.getScript('/javascript/jO2/jO2_MiscGuiControls_ExtensionMethods.js');

}


/**********************************
 *****    /javascript/jQueryUI/TM.jQueryUI.ExtraMethods.js
 **********************************/


/*this is now all on TM.Gui.Dialog , so it should be removable from the main GUI*/

function loadPage(target, page, callback)
{
	if (TM.Debug.logLoadedPages)
		console.log("DebugLog: opening page " + page + " in div " + target);

	if (isDefined(target.$()))
	{
		if (TM.Debug.addTimeStampToLoadedPages)
			page = page + '?time='+ new Date().getTime();
		target.$().load(page, callback);
	}
	else
		console.log("Error: in loadPage, could not find target: " + target);
}

function loadDialog(page, target, callback)
{
	if (typeof(target == "undefined"))
		target = '#JS_Dialog';
	target.$().load(page + '?time='+ new Date().getTime(), callback);
}


var showMessage_NotEnoughPriviledges = function()
{
	TM.Gui.Dialog.alertUser("You don't have enough priviledges to make this action");
}




/**********************************
 *****    /javascript/jQuery.DataTable/DataTable.ExtraMethods.js
 **********************************/




//from http://datatables.net/plug-ins/api#fnGetFilteredData

$.fn.dataTableExt.oApi.fnGetFilteredData = function ( oSettings ) {
	var a = [];
	for ( var i=0, iLen=oSettings.aiDisplay.length ; i<iLen ; i++ ) {
		a.push(oSettings.aoData[ oSettings.aiDisplay[i] ]._aData);
	}
	return a;
}


//extra methods (not in http://datatables.net/plug-ins/api#fnGetFilteredData)


//fnColumnData
$.fn.dataTableExt.oApi.fnColumnData  = function ( oSettings, columnIndex )
{
    var dataInTable = this.fnGetData();
    return getColumnFromArray(dataInTable, columnIndex);
}

//fnColumnDataDistinct
$.fn.dataTableExt.oApi.fnColumnDataDistinct  = function ( oSettings, columnIndex )
{
    return jLinq.from(this.fnColumnData(columnIndex)).distinct()
}

$.fn.dataTableExt.oApi.fnGetFilteredColumnDataDistinct = function ( oSettings, columnIndex )
{
	return getDistinctColumnFromArray(this.fnGetFilteredData(), columnIndex);
}

$.fn.dataTableExt.oApi.fnGetFilteredColumnData = function ( oSettings, columnIndex )
{
	return getColumnFromArray(this.fnGetFilteredData(), columnIndex);
}


//fnFilterEx: allows chaining of fnFilter
/*$.fn.dataTableExt.oApi.fnFilterEx  = function ( oSettings, filter, index )
{
	this.fnFilter(filter, index)
	return this;
}*/
//Helper methods

var getDistinctColumnFromArray = function(arrayData, columnIndex)
{
	return jLinq.from(getColumnFromArray(arrayData, columnIndex)).distinct();
}
var getColumnFromArray = function(arrayData, columnIndex)
{
	return jlinq.from(arrayData).select(function(rec) { return rec[columnIndex ] ;} );
}


//TM Specific
//handles the selection of a row  and the load of the respective GuidanceItem

/*	var checkForUserActivities = function(guidanceId)
	{
		currentUserHasActivityInGuidanceItem(guidanceId,
											 "READ",
											 function(data) {
																if (data.d)
																{
																	"selectedGuidanceItem".$().css('color','darkGray');
																	"selectedGuidanceItem".$().html(' [READ] ' + "selectedGuidanceItem".$().html());
																}

		currentUserHasActivityInGuidanceItem(guidanceId,
											 "COMPLETED",
											 function(data) {
																if (data.d)
																{
																	"selectedGuidanceItem".$().css('color','darkred');
																	"selectedGuidanceItem".$().html(' [COMPLETED] ' + "selectedGuidanceItem".$().html());
																}

		currentUserHasActivityInGuidanceItem(guidanceId,
											 "HELP",
											 function(data) {
																if (data.d)
																{
																	"selectedGuidanceItem".$().css('color','red');
																	"selectedGuidanceItem".$().html(' [HELP] ' + "selectedGuidanceItem".$().html());
																}
															} );
														} );	} );
	}
*/
	var viewGuidanceItemInNewWindow = function(guidanceId)
		{
			if (TM.Gui.CurrentUser.isViewer())
			{
                window.open('/article/' + guidanceId,'_blank');
			}
		};

	// this was not working in chrome
	/*
	var checkForPopupBlocker = function(poppedWindow)
		{
			var hasPopupBlocker = function()
				{
				var result = false;

				try
				{
					if (typeof poppedWindow == 'undefined') {
						// Safari with popup blocker... leaves the popup window handle undefined
						result = true;
					}
					else if (poppedWindow && poppedWindow.closed) {
						// This happens if the user opens and closes the client window...
						// Confusing because the handle is still available, but it's in a "closed" state.
						// We're not saying that the window is not being blocked, we're just saying
						// that the window has been closed before the test could be run.
						result = false;
					}
					else if (poppedWindow && poppedWindow.TM.Gui.GuidanceItemEditor.popupTest) {
						// This is the actual test. The client window should be fine.
						result = false;
					}
					else {
						// Else we'll assume the window is not OK
						result = true;
					}
				}
				catch (err)
				{
					return false;
				}

				return result;
			}

			if (hasPopupBlocker())
				TM.Gui.Dialog.showUserMessage("It looks like you have a Popup Blocker for this website which is blocking the Guidance Items Editor");
		}
	*/
	var editGuidanceItemInNewWindow = function(guidanceId)
		{
			//var url = '/html_pages/GuidanceItemEditor/GuidanceItemEditor.html?#id:' + guidanceId;
			var url = '/editor/' + guidanceId;
			openUrl(url, "GuidanceItem Editor",850 , 600);
			/*
			poppedWindow = window.open('/html_pages/GuidanceItemEditor/GuidanceItemEditor.html?#id:' + guidanceId
										  ,'_blank'
									      ,'location=1,status=1,scrollbars=1,  width=1020,height=700');

			//setTimeout(function() { checkForPopupBlocker(poppedWindow)} , 3000);
		*/
		};

	var fixGuidanceItemLinks = function()
	{
		$("#selectedGuidanceItem a[href]").each(function()
			{
				var href = $(this).attr('href');

                $(this).attr('target', '_blank')

/*				var id =  href.replace("/article/","");
				var giData= $.data[id];


				if (isDefined(giData) === false)
					$(this).removeAttr('href').css("text-decoration" , "underline");
                    */
			})
	};

	var mapSelectedGuidanceItems = function(event)
	{

	}

	var jsTree_Configure_SetRowSelected_forGuidanceItems = function()
	{

		if (isUndefined(TM.Gui.DataTable.currentDataTable))
			return;

		var oTable = TM.Gui.DataTable.currentDataTable;
		var showEditOptions = TM.Gui.DataTable.showEditOptions();
		var currentDataTable = TM.Gui.DataTable.currentDataTable;
		var giRedraw = false;

		selectedGuidanceIds  = [];

		$(document).ready(function()
		{
			currentDataTable.fnSetColumnVis(0, showEditOptions);
			if (showEditOptions)
			{
				$("#guidanceItemsTable tbody").mousedown(function(event)
					{
						lastIdAdded = "";
						var inputElement = $(event.target.parentNode).find("input");
						if (event.target.nodeName != "INPUT")
						{
							//console.log(selectedGuidanceIds);
							if (typeof(inputElement.attr("checked")) == "undefined")
							{
								inputElement.attr("checked", 'yes');
								$(event.target.parentNode).addClass('row_selected');
								var aPos = oTable.fnGetPosition( event.target );
								var selectedGuidanceId = oTable.fnGetData( aPos[0] )[6];
								lastIdAdded = selectedGuidanceId;
							}
							else
								lastIdAdded ="";
								$(oTable.fnSettings().aoData).each(function ()
								{
									var rowDataId = oTable.fnGetData(this.nTr)[6];
									if ( typeof($(this.nTr).find("input").attr("checked")) != "undefined")
									{
										//$(this.nTr).addClass('row_selected');
										if(selectedGuidanceIds.indexOf(rowDataId) == -1)
											selectedGuidanceIds.push(rowDataId);
									}
								});

						}

						if (selectedGuidanceIds.length > 0)
							"guidanceTableEditorHelperText".$().html('Drag {0} to drop into a view'
																		.format(selectedGuidanceIds.length == 1 ? "item"
																											   :  selectedGuidanceIds.length + " items" ));
					});

				$("#guidanceItemsTable tbody").click(function(event)
					{
						selectedGuidanceIds = [];
						//_oTable = oTable;
						var inputElement = $(event.target.parentNode).find("input");
						if (event.target.nodeName != "INPUT")
						{
							if (typeof(inputElement.attr("checked")) == "undefined")
							{
//								inputElement.attr("checked", 'yes');
								$(event.target.parentNode).addClass('row_selected');
							}
							else
							{
								var aPos = oTable.fnGetPosition( event.target );
								var selectedGuidanceId = oTable.fnGetData( aPos[0] )[6];
								if(lastIdAdded=="")
									inputElement.removeAttr("checked");
								//console.log(selectedGuidanceId + "   " + lastIdAdded);

								//$(event.target.parentNode).removeClass('row_selected');
							}
						}

						$(oTable.fnSettings().aoData).each(function ()
							{
								var rowDataId = oTable.fnGetData(this.nTr)[6];
								if ( typeof($(this.nTr).find("input").attr("checked")) != "undefined")
								{
									$(this.nTr).addClass('row_selected');
									selectedGuidanceIds.push(rowDataId);
								}
								else
									if (selectedGuidanceIds.has(rowDataId) == false)
										$(this.nTr).removeClass('row_selected');
							});

						if (selectedGuidanceIds.length > 0)
							"guidanceTableEditorHelperText".$().html('Drag {0} to drop into a view'
																		.format(selectedGuidanceIds.length == 1 ? "selected item"
																											   :  selectedGuidanceIds.length + " items" ));
						else
							"guidanceTableEditorHelperText".$().html('');
//							console.log(selectedGuidanceIds);
					});
			}


			/* Add a click handler to the rows - this could be used as a callback */
			$("#guidanceItemsTable tbody").mousedown(function(event)
				{
                    if ($(event.target).hasClass("dataTables_empty"))  // we can use dataTables_empty to detect if there are no rows in the current table
                    {
                        return;
                    }
					//selectedGuidanceIds = [];
					//_target = event.target;

					if (showEditOptions === false)
					{
						//clear past selections
						$(oTable.fnSettings().aoData).each(function ()
							{ $(this.nTr).removeClass('row_selected');  });
					}

	//			$("#guidanceItemsTable tbody").click(function(event) {

					//$(event.target.parentNode).toggleClass('row_selected');
					var aPos = oTable.fnGetPosition( event.target );

					if (typeof(aPos) != "undefined" && aPos != null)
					{
                        TM.Gui.DataTableViewer.selectedRowTarget = event.target;
                        TM.Gui.DataTableViewer.selectedRowIndex = aPos[0];
					    TM.Gui.DataTableViewer.selectedRowData = oTable.fnGetData( aPos[0] );
						var selectedGuidanceId = oTable.fnGetData( aPos[0] )[6];
						var selectedTitle = oTable.fnGetData( aPos[0] )[1];

						TM.Gui.selectedGuidanceId		= selectedGuidanceId;
						TM.Gui.selectedGuidanceTitle  	= selectedTitle;
						TM.Events.onShowGuidanceItem();
						/*if 	(addGuidanceItemIdToSelectedList)
							selectedGuidanceIds.push(selectedGuidanceId);
						else
							selectedGuidanceIds.pop(selectedGuidanceId);*/
						if (showEditOptions== false)
						{
							$(event.target.parentNode).addClass('row_selected');
						};
					}
				});

			$("#guidanceItemsTable tbody").dblclick(function(event)
				{
					if (TM.Gui.disablePopups === true)
						return;
					var aPos = oTable.fnGetPosition( event.target );
					if (aPos != null)
					{
						var selectedGuidanceId = oTable.fnGetData( aPos[0] )[6];
						if (showEditOptions)
							editGuidanceItemInNewWindow(selectedGuidanceId);
						else
							viewGuidanceItemInNewWindow(selectedGuidanceId);
					}

				});

				/* Add a click handler for the delete row */
	/*			$('#delete').click( function() {
					var anSelected = fnGetSelected( oTable );
					oTable.fnDeleteRow( anSelected[0] );
				} );
		*/
			//TM.Gui.Dialog.alertUser('dataTable - jsTree_Configure_SetRowSelected_forGuidanceItems')
			//oTable = $('#guidanceItemsTable').dataTable( );
		} );
			/* Init the table */




		/* Get the rows which are currently selected */
		function fnGetSelected( oTableLocal )
		{
			var aReturn = new Array();
			var aTrs = oTableLocal.fnGetNodes();

			for ( var i=0 ; i<aTrs.length ; i++ )
			{
				if ( $(aTrs[i]).hasClass('row_selected') )
				{
					aReturn.push( aTrs[i] );
				}
			}
			return aReturn;
		}
	}


//Gui helpers




//TM.Gui.selectedNodeData.viewId

var getDragHelperElement = function(event)
{
	if(selectedGuidanceIds.length == 1)
	{
		var cloneTr = $(event.target).parent().clone()
		//cloneTr.find('td').eq(0).remove();
		var dragText = cloneTr.find('td').eq(1).html();;

		return $( "<div id='dragHelper'>{0}</div>".format(dragText));
		//return cloneTr.find('td').eq(1).html();
	}

	if(selectedGuidanceIds.length == 0)
		return $("<div style='background:black ; color:red'><h2>There are no Guidance Item selected (please select a couple before dragging)<h2></div>");


	//var dragText = "<h2>Drop in a View to add the selected {0} GuidanceItems </h2".format(selectedGuidanceIds.length);
	var dragText = "<img src='/Images/ViewIcon.png'/> {0} items".format(selectedGuidanceIds.length);
	return $( "<div id='dragHelper' style='font-size:14pt'>{0}</div>".format(dragText))[0];
	//return $( "<div id='dragHelper' style='background:black ; color:white'>{0}</div>".format(dragText))[0];
}



TM.Gui.LibraryView = {};

TM.Gui.LibraryView.openFolders = [];
TM.Gui.LibraryView.mapOpenFolders = function()
	{
		TM.Gui.LibraryView.openFolders = [];
		$(".LibraryTree li").each(function()
			{
				if ($(this).hasClass("jstree-open"))
				{
					TM.Gui.LibraryView.openFolders.push( $(this).attr("id") );
				}
			} );
	};

TM.Gui.LibraryView.restoreOpenFolders = function()
{
	if (TM.Gui.LibraryView.openFolders.length == 0)	// don't restore when there are no mappings
		return;
	$(".LibraryTree li").each(function()
		{
			var currentNodeId = $(this).attr("id");
			if (TM.Gui.LibraryView.openFolders.indexOf(currentNodeId)  > -1)
				$(this).removeClass("jstree-closed").addClass("jstree-open");
			else
				$(this).removeClass("jstree-open").addClass("jstree-closed");
		});
};



/**********************************
 *****    /javascript/TM.Gui/TM.GUI.ShowProgressBar.js
 **********************************/


TM.Gui.ShowProgressBar =
    {
        baseDivId 		 : "#__tm_progressBarBaseDiv",
        progressBarDivId : "#__tm_progressBarDiv",
        messageDivId	 : "#__tm_progressBarMessageDiv",
        isOpen			 : false,
        nextAmount		 : 12,
        showStatusMessage: true,
        progressBar		 : undefined,
        currentMessage   : undefined,

        //_original_raiseProcessBarNextValue : undefined,
        //_original_raiseProcessBarNextValue : undefined,

        open : function(message)
                {
                    if ($(TM.Gui.progressBarDiv).length ==0)
                    {
                        $("body").append($("<div>").attr("id", this.baseDivId.substr(1)));

                        this.progressBar = TM.Gui.addProgressBar(this.baseDivId)
                        this.progressBar.width(300)
                                        .center()
                                        .zIndex(2000);
                    }
                    this.message(message);
                    this.isOpen	= true;
                    var that = this;


                    //Global events to hook
                    //this._original_raiseProcessBarNextValue	 	= TM.Events.raiseProcessBarNextValue;
                    //this._original_raiseWebServiceReceivedData 	= TM.Events.raiseWebServiceReceivedData;

                    //TM.Events.raiseWebServiceReceivedData.add(TM.Events.raiseProcessBarNextValue);

                    TM.Events.raiseProcessBarNextValue	 .add(function(statusMessage) { that.progressBarNextValue(statusMessage) });;
                    return this;
                },

        progressBarNextValue: function(statusMessage)
                {
                    if (this.showStatusMessage)
                        this.message(statusMessage);
                    this.inc(this.nextAmount);
                },

        close : function()
                {
                    if (isDefined(this.progressBar))
                        this.progressBar.setValue(100);
                    $(this.baseDivId).remove();
                    this.isOpen	= false;
                    this.progressBar = undefined;

                    //restore hooked Global events
                    /*if(isDefined(this._original_raiseProcessBarNextValue))
                    {
                        TM.Events.raiseProcessBarNextValue = this._original_raiseProcessBarNextValue;
                        TM.Events.raiseWebServiceReceivedData = this._original_raiseWebServiceReceivedData;
                    }*/
                    TM.Events.raiseProcessBarNextValue.remove();
                    //TM.Events.raiseWebServiceReceivedData.remove();
                    return this;
                } ,
        message : function(message)
                {
                    if (isDefined(message))
                    {
                        if ($(this.messageDivId).length ==0)
                        {
                            this.progressBar.append(
                                $("<span>").attr("id", this.messageDivId.substr(1))
                                          .css( {
                                                    position: "absolute" ,
                                                    top: 0,
                                                    width: "100%" ,
                                                    "text-align": "center" ,
                                                    "line-height": "1.9em"
                                                  }));
                        }
                        $(this.messageDivId).html(message);
                    }
                    this.currentMessage = message;
                },
        inc 	: function(value) 	 { this.progressBar.inc(value)				; return this; 	},
        incAfter: function(value) 	 { this.progressBar.inc_after_timeout(value)	; return this; 	},
        next	: function()		 { this.incAfter(this.nextAmount,20)		    ; return this;  },
        dec 	: function(value) 	 { this.progressBar.dec(value)				; return this; 	},
        reset 	: function() 		 { return this.close().open(); 	   			  	},
        value 	: function(newValue) {
                                         if (isDefined(newValue))
                                            this.progressBar.setValue(newValue);
                                         return this.progressBar.getValue()
                                     }
    }


// helper method to create generic ProgressBars

TM.Gui.addProgressBar = function(hostElement, childElement)
    {

        if (typeof(childElement) == "string")
        {
            $(hostElement).html($("<div>").attr("id",childElement.substr(1)));
            hostElement = childElement;
        }

        var options =
            {
                steps			: 20,
                stepDuration	: 20,
                max				: 100,
                showText		: true,
                textFormat		: 'percentage',
                width			: 120,
                height			: 12,
                callback		: null
            };
        var progressBar = $(hostElement).progressbar(options);

        progressBar.getValue = function()
            {
                return $(hostElement).progressbar( "option", "value" );
            };

        progressBar.setValue = function(value)
            {
                $(hostElement).progressbar( "option", "value" , value);
                return this;
            };

        progressBar.inc = function(value)
            {
                if (isUndefined(value))
                    value = 1;
                this.setValue(progressBar.getValue() + value);
                return this;
            }

        progressBar.inc_after_timeout= function(value, timeoutValue)
            {
                var that = this;
                setTimeout(function() { that.inc(value) }, timeoutValue);
            }
        progressBar.dec = function(value)
            {
                if (isUndefined(value))
                    value = 1;
                this.inc(-value);
                return this;
            }

        progressBar.reset = function()
            {
                this.setValue(0);
                return this;
            };

        return progressBar
    };


/**********************************
 *****    /javascript/TM/WebServices.js
 **********************************/


//global objects

window.TM.tmWebServices = '/Aspx_Pages/TM_WebServices.asmx/';
window.TM.WebServices.Data.lastDataReceived = {};
window.TM.WebServices.Config.Version = "v0.3";
window.TM.WebServices.Config.CSRF_Token = "";

//Helpers
window.TM.WebServices.Helper.invokeWebService = function(url, params, handleData, handleError)
{
    if (handleData === undefined)
    {
        handleData = window.TM.WebServices.Helper.defaultCallback;
    }
    if (handleError === undefined)
    {
        handleError = window.TM.WebServices.Helper.defaultErrorHandler;
    }
    $.ajax( {
                    type            : "POST"
                ,   url             : url
                ,   data            : params
                ,   headers         : { "CSRF-Token" : window.TM.WebServices.Config.CSRF_Token}
                ,   contentType: "application/json; charset=utf-8"
                ,   dataType: "json"
                ,   success: function (msg)
                        {
                            window.TM.WebServices.Data.lastDataReceived = msg;
                            if(msg.d === "undefined")
                            {
                                handleError("No data received from call to: " + url);
                            }
                            else
                            {
                                handleData(msg);
                            }
                        }
                ,   failure: function (msg)
                        {
                            handleError(msg);
                        }
                ,   error: function (msg)
                        {
                            handleError(msg);
                        }
            });
};

window.TM.WebServices.Helper.showUserMessage = function(msg)
    {
        window.console.log("Error: in showUserMessage (this function shouldn't be used here)");
    };


window.TM.WebServices.Helper.defaultErrorHandler = function(msg)		// this method should be overriden by a better GUI handler
    {
        try
        {
            if (isDefined(msg) && isDefined(msg.responseText))
            {
                msg = msg.responseText;
                var parsedMsg = JSON.parse(msg);
                if(isDefined(parsedMsg) && isDefined(parsedMsg.Message))
                {
                    window.TM.Gui.Dialog.alertUser(parsedMsg.Message, "WebServices Error")
                }
            }
            window.console.log("TM.WebServices.Helper.defaultErrorHandler: " + msg);
        }
        catch(error)
        {
            window.console.log("TM.WebServices.Helper.defaultErrorHandler: error in defaultErrorHandler: " + error.message);
        }
    }

window.TM.WebServices.Helper.defaultCallback = function(msg)		// this method should be overriden by a better GUI handler
    {
        console.log("Error: WebServices result: " + msg.d);
    }

window.TM.WebServices.Helper.invoke_TM_WebService = function(method, params, callback, handleError)
    {
        var url = TM.tmWebServices + method;
        if(typeof(params) === "object")
            params = JSON.stringify( params );
        TM.WebServices.Helper.invokeWebService(
                url,
                params,
                function(data)  {
                                    if (typeof(callback) != "undefined")
                                        callback(data.d);
                                },
                handleError);
    }

//extension method that does the same as the previous method (via a simpler invocation)
String.prototype.invokeWebService = function( params, callback, onError)
    {
        TM.WebServices.Helper.invoke_TM_WebService(this, params, callback, onError);
    };
//*********** WebServices ****************


//***********************
//TM.WebServices.WS_Utils
//***********************

TM.WebServices.WS_Utils.getTime = function (callback)
    {
        TM.WebServices.Helper.invoke_TM_WebService('GetTime', {}, callback);
    }


//**********************
//TM.WebServices.WS_Data
//**********************

TM.WebServices.WS_Data.getGUIObjects = function (callback)
    {
        var startTime = new Date();
        TM.WebServices.Helper.invoke_TM_WebService(
            'GetGUIObjects',
            {},
            function(data)  {
                                TM.Debug.TimeSpan_WebService_getGUIObjects = new Date(new Date() - startTime);
                                TM.WebServices.Data.GuiObjects = data;
                                if (typeof(callback) != "undefined")
                                    callback(TM.WebServices.Data.GuiObjects);
                            });
    }

TM.WebServices.WS_Data.getFolderStructure = function (callback)
    {
        var startTime = new Date();
        TM.WebServices.Helper.invoke_TM_WebService(
            'GetFolderStructure_Libraries',
            {},
            function(data)  {
                                TM.Debug.TimeSpan_WebService_getFolderStructure = new Date(new Date() - startTime);
                                TM.WebServices.Data.folderStructure = data;
                                if (typeof(callback) != "undefined")
                                    callback(TM.WebServices.Data.folderStructure);
                                TM.Events.onFolderStructureMapped();
                            });
    }

TM.WebServices.WS_Data.getJsTreeWithFolders = function(callback)
{
    if (TM.Debug.reuseLibraryMappingsObject &&
        isDefined(TM.WebServices.Data.jsTreeWithFolders))
    {
        callback(TM.WebServices.Data.jsTreeWithFolders);
        return;
    }
    TM.WebServices.Helper.invoke_TM_WebService(
            'JsTreeWithFolders',
            {},
        function(data)  {
                            TM.WebServices.Data.jsTreeWithFolders = data;
                            if (typeof(callback) != "undefined")
                                callback(TM.WebServices.Data.jsTreeWithFolders);
                        });
}


//***********************
//TM.WebServices.WS_Users
//***********************
TM.WebServices.WS_Users.createUser = function(username , password,  email, firstname, lastname, note, callback)
    {
        var params =  { newUser: { 		username    : username,
                                        password    : password,
                                        email       : email,
                                        firstname   : firstname,
                                        lastname    : lastname,
                                        note        : note	} };
        TM.WebServices.Helper.invoke_TM_WebService(
            'CreateUser',
            params,
            function(data)  {
                                if (typeof(callback) != "undefined")
                                    callback(data);
                            });
    }

TM.WebServices.WS_Users.setUserGroupID = function(userId , groupId, callback)
    {
        var params =  { userId: userId , roleId : groupId };
        TM.WebServices.Helper.invoke_TM_WebService(
            'SetUserGroupId',
            params,
            function(data)  {
                                if (typeof(callback) != "undefined")
                                    callback(data);
                            });
    }


TM.WebServices.WS_Users.login = function(username, password, callback)
    {
        if(isUndefined(callback))
            callback = function() {};
        var params =  { username : username  , password : password } ;

        TM.WebServices.Helper.invoke_TM_WebService(
            'Login',
            params,
            function(result)
                {
                    //TM.Events.onUserChange();
                    callback(result)
                });
    };

TM.WebServices.WS_Users.logout = function(username, password, callback)
    {
        if(isUndefined(callback))
        {
            callback = function() {}
        }

        TM.WebServices.Helper.invoke_TM_WebService(
            'Logout',
            {},
            function()
            {
                TM.Events.onUserChange();
                callback();
            });
    };



TM.WebServices.WS_Users.currentUser = function(callback)
    {
        TM.WebServices.Helper.invoke_TM_WebService('Current_User', {} , callback);
    }

TM.WebServices.WS_Users.currentUserRoles = function(callback)
    {
        TM.WebServices.Helper.invoke_TM_WebService('RBAC_CurrentPrincipal_Roles', {} , callback);
    }

TM.WebServices.WS_Users.user_by_Id = function(userId, callback)
    {
        var params =  { userId : userId };
        TM.WebServices.Helper.invoke_TM_WebService('GetUser_byID', params, callback);
    };

TM.WebServices.WS_Users.user_by_Name = function(userName, callback)
    {
        var params =  { name : userName } ;
        TM.WebServices.Helper.invoke_TM_WebService('GetUser_byName', params, callback);
    };

TM.WebServices.WS_Users.deleteUser = function(userId, callback)
    {
        var params =  { userId : userId };
        TM.WebServices.Helper.invoke_TM_WebService('DeleteUser', params, callback);
    }

TM.WebServices.WS_Users.getUsers = function(callback, errorHandler)
    {
        TM.WebServices.Helper.invoke_TM_WebService(
            'GetUsers',
            {},
            function(data)  {
                                if (typeof(callback) != "undefined")
                                    callback(data);
                            } ,
            errorHandler);
    }


//SSO
TM.WebServices.WS_Users.login_usingSSOToken = function(ssoToken)
    {
        var callback = function(guid)
            {
                if(guid===TM.Const.emptyGuid)
                    TM.Gui.Dialog.alertUser("SSO (Single-Sign-On) failed");
                else
                {
                    //TM.Gui.Dialog.alertUser("SSO (Single-Sign-On) succeeded");
                    TM.Gui.CurrentUser.loadUserData();
                }

            }
        TM.WebServices.Helper.invoke_TM_WebService("SSO_AuthenticateUser",{ssoToken:ssoToken},callback)
    }

TM.WebServices.WS_Users.login_asUser = function(userName)
    {
        var callback = function(ssoToken)
            {
                if(ssoToken != null)
                    TM.WebServices.WS_Users.login_usingSSOToken(ssoToken);
            }
        TM.WebServices.Helper.invoke_TM_WebService("SSO_GetSSOTokenForUser",{userName:userName},callback)
    }



//***********************
//TM.WebServices.WS_Libraries
//***********************


//GET

TM.WebServices.WS_Libraries.get_Libraries = function(callback, errorHandler)
{
    TM.WebServices.Helper.invoke_TM_WebService("GetLibraries", "{}",callback, errorHandler);
}


//ADD

TM.WebServices.WS_Libraries.add_Library = function(libraryName, callback, errorHandler)
{
    var params = { library : {
                                id: "00000000-0000-0000-0000-000000000000",
                                caption : libraryName
                             } };
    TM.WebServices.Helper.invoke_TM_WebService(
            'CreateLibrary',
            params,
            function(data)  {
                                if (typeof(callback) != "undefined")
                                    callback(data);
                            } ,
            errorHandler);
}

TM.WebServices.WS_Libraries.add_Folder = function(libraryId, parentFolderId, newFolderName, callback , errorHandler)
{
    if (typeof(parentFolderId) == "undefined")
        parentFolderId = "00000000-0000-0000-0000-000000000000";
    var params = {
                    libraryId : libraryId   ,
                    parentFolderId: parentFolderId ,
                    newFolderName : newFolderName
                 };
    TM.WebServices.Helper.invoke_TM_WebService(
            'CreateFolder',
            params,
            function(data)  {
                                if (typeof(callback) != "undefined")
                                    callback(data);
                            } ,
            errorHandler);
}

TM.WebServices.WS_Libraries.add_Folder = function(libraryId, parentFolderId, newFolderName, callback , errorHandler)
{
    if (typeof(parentFolderId) == "undefined")
        parentFolderId = "00000000-0000-0000-0000-000000000000";
    var params = {
                    libraryId : libraryId   ,
                    parentFolderId: parentFolderId ,
                    newFolderName : newFolderName
                 };
    TM.WebServices.Helper.invoke_TM_WebService(
            'CreateFolder',
            params,
            function(data)  {
                                if (typeof(callback) != "undefined")
                                    callback(data);
                            } ,
            errorHandler);
}

TM.WebServices.WS_Libraries.add_View = function(libraryId, folderId, viewName, callback , errorHandler)
{
    if (typeof(folderId) == "undefined")
        folderId = "00000000-0000-0000-0000-000000000000";

    var params = {
                    folderId : folderId,
                    view : {
                                id: "00000000-0000-0000-0000-000000000000",
                                parentFolder : "" ,
                                caption : viewName ,
                                creatorCaption : "guidanceLibrary" ,
                                criteria : "",
                                library: libraryId
                            }
                 };

    TM.WebServices.Helper.invoke_TM_WebService(
            'CreateView',
            params,
            function(data)  {
                                if (typeof(callback) != "undefined")
                                    callback(data);
                            } ,
            errorHandler);
}

TM.WebServices.WS_Libraries.add_Article_Simple = function(libraryId, title, dataType, htmlCode, callback , errorHandler)
{
    var params = {
                    libraryId   : libraryId ,
                    title       : title ,
                    dataType    : dataType,
                    htmlCode    : htmlCode
                 };
    TM.WebServices.Helper.invoke_TM_WebService('CreateArticle_Simple', params, 	callback, 	errorHandler);
}


// SET

TM.WebServices.WS_Libraries.set_Article_Html = function (articleId, htmlCode, callback,errorHandler)
{
    var params = { articleId : articleId , htmlCode: htmlCode } ;
    TM.WebServices.Helper.invoke_TM_WebService("SetArticleHtml",params, callback,errorHandler);
}

TM.WebServices.WS_Libraries.set_Article_Content = function (articleId, dataType, content, callback,errorHandler)
{
    var params = { articleId : articleId , dataType:dataType , content: content } ;
    TM.WebServices.Helper.invoke_TM_WebService("SetArticleContent",params, callback,errorHandler);
}

//RENAME

TM.WebServices.WS_Libraries.rename_Library = function(libraryId, newName, callback , errorHandler)
{
    var params = { library : {
                        id : libraryId ,
                        caption  : newName } };
    TM.WebServices.Helper.invoke_TM_WebService('UpdateLibrary', params, callback, errorHandler);
}

TM.WebServices.WS_Libraries.rename_Folder = function(libraryId, folderId, newFolderName, callback , errorHandler)
{
    var params = { 	libraryId 	   : libraryId ,
                    folderId  	   : folderId  ,
                    newFolderName  : newFolderName };
    TM.WebServices.Helper.invoke_TM_WebService('RenameFolder', params, callback, errorHandler);
}

TM.WebServices.WS_Libraries.rename_View = function(libraryId, folderId, viewId,viewName, callback , errorHandler)
{
    var params = { view : {   id			 : viewId ,
                              parentFolder 	 : folderId ,
                              caption 		 : viewName,
                              creatorCaption : "guidanceLibrary" ,
                              criteria 		 : "",
                              library		 : libraryId } };
    TM.WebServices.Helper.invoke_TM_WebService('UpdateView', params, callback, errorHandler);
}

function renameView(libraryId, viewId, parentFolder, viewName, callback)
{
    var url = TM.tmWebServices + 'UpdateView';
    var params =
    invokeWebService( url, params, callback, defaultErrorHandler);
}


//REMOVE
TM.WebServices.WS_Libraries.remove_Library = function(libraryId, callback, errorHandler)
{
    var params = { libraryId : libraryId };
    TM.WebServices.Helper.invoke_TM_WebService('DeleteLibrary', params, callback,errorHandler);
}

TM.WebServices.WS_Libraries.remove_Folder = function(libraryId, folderId, callback, errorHandler)
{
    var params = { libraryId : libraryId , folderId :folderId };
    TM.WebServices.Helper.invoke_TM_WebService('DeleteFolder', params, callback,errorHandler);
}

TM.WebServices.WS_Libraries.remove_View = function(libraryId, viewId, callback, errorHandler)
{
    var params = { libraryId : libraryId , viewId : viewId};
    TM.WebServices.Helper.invoke_TM_WebService('RemoveViewFromFolder', params, callback,errorHandler);
}

TM.WebServices.WS_Libraries.remove_GuidanceItem = function(guidanceItemId, callback, errorHandler)
{
    var params = { guidanceItemId : guidanceItemId };
    TM.WebServices.Helper.invoke_TM_WebService('DeleteGuidanceItem', params, callback,errorHandler);
}

TM.WebServices.WS_Libraries.remove_GuidanceItems = function(guidanceItemIds, callback, errorHandler)
    {
        var params = { guidanceItemIds : guidanceItemIds };
        TM.WebServices.Helper.invoke_TM_WebService('DeleteGuidanceItems', params, callback,errorHandler);
    }


//ARTICLES
TM.WebServices.WS_Libraries.getGuidForMapping = function(mappingText, callback, errorHandler)
    {
        var mapping = { mapping : mappingText };
        TM.WebServices.Helper.invoke_TM_WebService("getGuidForMapping",mapping, callback, errorHandler);
    }



/**********************************
 *****    /javascript/TM_WS_Methods.js
 **********************************/


//var lastDataReceived = {};
function invokeWebService(url, params, handleData, handleError)
{
    TM.WebServices.Helper.invokeWebService(url, params, handleData, handleError);
}


function defaultErrorHandler(msg)
{
    //showMessage_NotEnoughPriviledges
    try
    {
        //_msg = msg;
        if (typeof(msg)=="object" && typeof(msg.d)!="undefined")
        {
            TM.Gui.Dialog.alertUser(JSON.stringify(msg.d));
        }
        else
        {
            var errorMessage = JSON.parse(msg.responseText).Message;
            if ( $.browser.msie )			//no idea why the concat below doesn't work in IE (so for now let's show the error message without the extra explanation
                TM.Gui.Dialog.alertUser(errorMessage);
            else
                TM.Gui.Dialog.alertUser(errorMessage + "<br/><br/>Most likely because the current user doesn't have enough priviledges to execute this operation");
        }
    }
    catch(error)
    {
        console.error("error in defaultErrorHandler: " + error.message);
    }
}

//users

function getUser(userName, callback)
{
    var url = TM.tmWebServices + 'GetUser_byName';
    var params =  JSON.stringify( { name : userName } );
    invokeWebService( url, params, callback, defaultErrorHandler);
}

function getUsers(callback)
{
    var url = TM.tmWebServices + 'GetUsers';
    var params = "{}";
    invokeWebService( url, params, callback, defaultErrorHandler);
}

function deleteUser(userId, callback)
{
    var url = TM.tmWebServices + 'DeleteUser';
    var params = "{userId: '"+ userId + "'}";
    invokeWebService( url, params, callback, defaultErrorHandler);
}

function createUser(username , password,  email, firstname, lastname, note, callback)
{
    var url = TM.tmWebServices + 'CreateUser';
    var params = "{ newUser: { 	username: '"+  username+ "', password: '"+  password + "',email:  '"+ email+ "', firstname:  '"+ firstname+ "',lastname:  '"+ lastname+ "',note: '"+  note+ "' } }";
    invokeWebService( url, params, callback, defaultErrorHandler);
}

function batchUserCreation(batchUserData, callback)
{
    var url = TM.tmWebServices + 'BatchUserCreation';
    var params =  JSON.stringify( { batchUserData : batchUserData } );
    invokeWebService( url, params, callback, defaultErrorHandler);
}

function updateUser(userId, userName, firstname, lastname, title, company, email, groupId, callback)
{
    var url = TM.tmWebServices + 'UpdateUser';
    var params =  JSON.stringify( { userId : userId  ,userName: userName , firstname : firstname, lastname : lastname, title : title, company : company, email : email, groupId : groupId } );
    //alert("updating user with: {0}".format(JSON.stringify(params)));
    invokeWebService( url, params, callback, defaultErrorHandler);
}


function updateCurrentUserPassword(userName, newPassword, callback)
{
    var url = TM.tmWebServices + 'SetCurrentUserPassword';
    var params =  JSON.stringify( { password : password  } );
    invokeWebService( url, params, callback, defaultErrorHandler);
}
function updateUserPassword(userId, userName, newPassword, callback)
{
    var url = TM.tmWebServices + 'SetUserPassword';
    var params =  JSON.stringify( { userId : userId  ,password : password  } );
    invokeWebService( url, params, callback, defaultErrorHandler);
}
//config
function getTime(callback)
{
    var url = TM.tmWebServices + 'GetTime';
    var params = "{}";
    invokeWebService( url, params, callback, defaultErrorHandler);
}

//Guidance Item & Views
/*function getGuidanceItemsInViews(viewIds, callback)
{
    var url = TM.tmWebServices + 'GetGuidanceItemsInViews';
    var params = "{viewIds : "+ viewIds + "}";
    invokeWebService( url, params, callback, defaultErrorHandler);
}*/

function getGuidanceItemHtml(id, callback)
{
    var url = TM.tmWebServices + 'GetGuidanceItemHtml';
    var params = "{ guidanceItemId : '" + id + "'}";
    invokeWebService( url, params, callback, defaultErrorHandler);
}

function getGuidanceItemData(id, callback)
{
    var url = TM.tmWebServices + 'GetGuidanceItemById';
    var params = "{ guidanceItemId : '" + id + "'}";
    invokeWebService( url, params, callback, defaultErrorHandler);
}

/*
function updateGuidanceItemHtml(id, htmlContent, callback)
{
    var url = TM.tmWebServices + 'UpdateGuidanceItemHtml';
    var params =  JSON.stringify( { guidanceItemId : id  , htmlContent : htmlContent } );
    invokeWebService( url, params, callback, defaultErrorHandler);
}
*/
/*function updateGuidanceItemData(guidanceItemId, topic, technology, category, rule_Type, priority, status, author,
                                libraryId,  guidanceType , creatorId ,creatorCaption, title,
                                images, lastUpdate ,  htmlContent, callback)
{
    var guidanceItem = { guidanceItem: {
                            guidanceItemId : guidanceItemId  ,
                            topic: topic,
                            technology : technology,
                            category: category,
                            rule_Type: rule_Type,
                            priority : priority,
                            status : status,
                            author :  author,
                            libraryId : libraryId ,
                            guidanceType : guidanceType ,
                            creatorId : creatorId,
                            creatorCaption: creatorCaption,
                            title : title,
                            images : images,
                            lastUpdate : lastUpdate,
                            htmlContent : htmlContent
                        }};
    updateGuidanceItem(guidanceItem, callback);
}*/
function updateGuidanceItem(guidanceItem, callback)
{
    var url = TM.tmWebServices + 'UpdateGuidanceItem';
    var params =  JSON.stringify(guidanceItem);
//	alert("saving data" + params);
    invokeWebService( url, params, callback, defaultErrorHandler);
}

//session management
function login(username, password, callback)
{
    var url = TM.tmWebServices + 'Login';
    var params =  JSON.stringify( { username : username  , password : password } );
    invokeWebService( url, params, callback, defaultErrorHandler);
}

/*function loginToWindows(username, password, callback)
{
    var url = TM.tmWebServices + 'LoginToWindows';
    var params =  JSON.stringify( { username : username  , password : password } );
    invokeWebService( url, params, callback, defaultErrorHandler);
}*/


//session management
/*function logout(callback)
{
    var url = TM.tmWebServices + 'Logout';
    var params = "{}";
    invokeWebService( url, params, callback, defaultErrorHandler);
}*/

//Logged-in user and RBAC

/*function getCurrentUser(callback)
{
    var url = TM.tmWebServices + 'Current_User';
    var params = "{}";
    invokeWebService( url, params, callback, defaultErrorHandler);
}*/

/*function userIsAuthenticated(callback)
{
    var url = TM.tmWebServices + 'RBAC_CurrentIdentity_IsAuthenticated';
    var params = "{}";
    invokeWebService( url, params, callback, defaultErrorHandler);
}*/

function currentUserHasRole(role, callback)
{
    var url = TM.tmWebServices + 'RBAC_HasRole';
    var params = "{ role : '" + role + "'}";
    invokeWebService( url, params, callback, defaultErrorHandler);
}

/*function currentUserRoles(callback)
{
    var url = TM.tmWebServices + 'RBAC_CurrentPrincipal_Roles';
    var params = "{}";
    invokeWebService( url, params, callback, defaultErrorHandler);
}*/

//activity tracking
function getPagesHistory_by_PageId(guidanceItemId, callback)
{
    var url = TM.tmWebServices + 'getPagesHistory_by_PageId';
    var params = "{ guidanceItemId : '" + guidanceItemId + "'}";
    invokeWebService( url, params, callback, defaultErrorHandler);
}

function userHasActivityInGuidanceItem(guidanceItemId, userName, userActivity, callback)
{
    var url = TM.tmWebServices + 'userHasActivityInGuidanceItem';
    var params =  JSON.stringify( { guidanceItemId : guidanceItemId  , userName : userName , userActivity : userActivity } );
    invokeWebService( url, params, callback, defaultErrorHandler);
}

function currentUserHasActivityInGuidanceItem(guidanceItemId, userActivity, callback)
{
    var url = TM.tmWebServices + 'currentUserHasActivityInGuidanceItem';
    var params =  JSON.stringify( { guidanceItemId : guidanceItemId, userActivity : userActivity } );
    invokeWebService( url, params, callback, defaultErrorHandler);
}


//guidanceItems Search
/*function guidanceItems_Search(searchText, callback)
{
    var url = TM.tmWebServices + 'XmlDatabase_GuidanceItem_SearchHtml';
    var params = "{ searchText : '" + searchText + "'}";
    invokeWebService( url, params, callback, defaultErrorHandler);
}

function guidanceItems_SearchTitle(searchText, callback)
{
    var url = TM.tmWebServices + 'XmlDatabase_GuidanceItem_Search_Title';
    var params = "{ searchText : '" + searchText + "'}";
    invokeWebService( url, params, callback, defaultErrorHandler);
}*/


//guidanceItems Logging
function guidanceItem_LogPageUserActivity(guidanceItemId, userActivity, callback)
{
    var url = TM.tmWebServices + 'logPageUserActivity';
    var params =  JSON.stringify( { guidanceItemId : guidanceItemId  , userActivity : userActivity } );
    invokeWebService( url, params, callback, defaultErrorHandler);
}

function guidanceItem_LogPageUserComment(guidanceItemId, userComment, callback)
{
    var url = TM.tmWebServices + 'logPageUserComment';
    var params =  JSON.stringify( { guidanceItemId : guidanceItemId  , userComment : userComment } );
    invokeWebService( url, params, callback, defaultErrorHandler);
}

//Cache management
/*function reloadData(callback)
{
    var url = TM.tmWebServices + 'XmlDatabase_ReloadData';
    var params = '{ }';
    invokeWebService( url, params, callback, defaultErrorHandler);
}

//Libraries management
/*function createLibrary(libraryName, callback)
{
    var url = TM.tmWebServices + 'CreateLibrary';
    var params = '{ library : { id: "00000000-0000-0000-0000-000000000000", caption : "'  + libraryName + '" } }';
    invokeWebService( url, params, callback, defaultErrorHandler);
}*/
/*
function deleteLibrary(libraryId, callback)
{
    var url = TM.tmWebServices + 'DeleteLibrary';
    var params = '{ libraryId : "'+ libraryId + '" }';
    invokeWebService( url, params, callback, defaultErrorHandler);
}

function renameLibrary(libraryId, newName, callback)
{
    var url = TM.tmWebServices + 'UpdateLibrary';
    var params = '{ library : { id : "'+ libraryId + '" , caption  : "'+ newName + '"  } }';
    invokeWebService( url, params, callback, defaultErrorHandler);
}

function renameFolder(libraryId, folderId, newFolderName, callback)
{
    var url = TM.tmWebServices + 'RenameFolder';
    var params = '{ libraryId : "'+ libraryId + '" , folderId : "'+ folderId + '" , newFolderName  : "'+ newFolderName + '"  }';
    invokeWebService( url, params, callback, defaultErrorHandler);
}

function createFolder(libraryId, parentFolderId, newFolderName, callback)
{
    if (typeof(parentFolderId) == "undefined")
        parentFolderId = "00000000-0000-0000-0000-000000000000";
    var url = TM.tmWebServices + 'CreateFolder';
    var params =  JSON.stringify( { libraryId : libraryId   , parentFolderId: parentFolderId , newFolderName : newFolderName } );
    invokeWebService( url, params, callback, defaultErrorHandler);
}

function deleteFolder(libraryId, folderId, callback)
{
    var url = TM.tmWebServices + 'DeleteFolder';
    var params =  JSON.stringify( { libraryId : libraryId  , folderId : folderId } );
    invokeWebService( url, params, callback, defaultErrorHandler);
}

function createView(libraryId, folderId, viewName, callback)
{
    if (typeof(folderId) == "undefined")
        folderId = "00000000-0000-0000-0000-000000000000";
    var url = TM.tmWebServices + 'CreateView';
    var params = '{ folderId : "' +  folderId +'" ,' +
                   ' view : { id: "00000000-0000-0000-0000-000000000000", parentFolder : "' + "" +
                         '", caption : "' + viewName +
                         '", creatorCaption : "guidanceLibrary" , criteria : "", library: "' + libraryId +
                         '" } }';
    //alert('creatingView with: ' + params);
    invokeWebService( url, params, callback, defaultErrorHandler);
}

function renameView(libraryId, viewId, parentFolder, viewName, callback)
{
    var url = TM.tmWebServices + 'UpdateView';
    var params = '{ view : { id: "' + viewId + '", parentFolder : "' + parentFolder +
                         '", caption : "' + viewName +
                         '", creatorCaption : "guidanceLibrary" , criteria : "", library: "' + libraryId +
                         '" } }';
    invokeWebService( url, params, callback, defaultErrorHandler);
}

function deleteView(libraryId , viewId, callback)
{
    var url = TM.tmWebServices + 'RemoveViewFromFolder';
    var params =  JSON.stringify( { libraryId  : libraryId  , viewId : viewId  } );
    invokeWebService( url, params, callback, defaultErrorHandler);
}
*/
function moveViewToFolder(viewId , folderId, libraryId, callback)
    {
        if(typeof(folderId) == "undefined")
            folderId = "00000000-0000-0000-0000-000000000000";
        var url = window.TM.tmWebServices + 'MoveViewToFolder';
        var params =  JSON.stringify( { viewId  : viewId  , targetFolderId : folderId  ,  targetLibraryId : libraryId  } );
        invokeWebService( url, params, callback, defaultErrorHandler);
    }

function createGuidanceItem(title,  htmlContent,libraryId,  callback)
{
    createGuidanceItem_AllValues('', '', '', '', '', '','' , libraryId , 'fbb1db92-c314-4fb0-a0db-1ff82bc2d68f', 'fbb1db92-c314-4fb0-a0db-1ff82bc2d68f', 'guidanceLibrary', title, htmlContent, callback);
    //createGuidanceItem_AllValues('', '', '', '', '', '','' ,'00000000-0000-0000-0000-000000000000', 'fbb1db92-c314-4fb0-a0db-1ff82bc2d68f', 'fbb1db92-c314-4fb0-a0db-1ff82bc2d68f', 'guidanceLibrary', title, htmlContent, callback);
}

function createGuidanceItem_AllValues(topic, technology, category, rule_Type, priority, status, author, libraryId, guidanceType, creatorId, creatorCaption, title, htmlContent, callback)
{
    var url = TM.tmWebServices + 'CreateGuidanceItem';
    var params = '{ guidanceItem: { "topic": "' + topic +
                                 '", "technology": "' + technology +
                                 '", "category": "' + category +
                                 '", "rule_Type": "' + rule_Type +
                                 '", "priority": "' + priority +
                                 '", "status": "' + status +
                                 '", "author": "' + author +
                                 '" , "libraryId": "' + libraryId +
                                 '", "guidanceType": " ' + guidanceType +
                                 '", "creatorId": "' + creatorId +
                                 '", "creatorCaption": "' + creatorCaption +
                                 '", "title": "' + title +
                                 '", "images": "GI images", "lastUpdate":  "\\\/Date(1309232562210)\\\/"' +
                                 ' , "htmlContent": "' + htmlContent +'"} } ';
    //alert('creating GuidanceItem  with: ' + params);
    invokeWebService( url, params, callback, defaultErrorHandler);
}

function addGuidanceItemToView(viewId, guidanceItemId, callback)
{
    var url = TM.tmWebServices + 'AddGuidanceItemsToView';
    var params = '{ viewId : "' + viewId + '" , guidanceItemIds: ["' + guidanceItemId + '"]  }';
    invokeWebService( url, params, callback, defaultErrorHandler);
}

function addGuidanceItemToViews(viewId, guidanceItemIds, callback)
{
    var url = TM.tmWebServices + 'AddGuidanceItemsToView';
    var params =  JSON.stringify( { viewId  : viewId   , guidanceItemIds : guidanceItemIds } );
    invokeWebService( url, params, callback, defaultErrorHandler);
}

function removeGuidanceItemsFromView(viewId, guidanceItemIds, callback)
{
    var url = TM.tmWebServices + 'RemoveGuidanceItemsFromView';
    var params =  JSON.stringify( { viewId  : viewId   , guidanceItemIds : guidanceItemIds } );
    invokeWebService( url, params, callback, defaultErrorHandler);
}

/*

function renameGuidanceItemTitle(guidanceItemId, title, callback)
{
    var url = TM.tmWebServices + 'RenameGuidanceItemTitle';
    var params = '{ guidanceItemId : "'+ guidanceItemId + '" ,  title  : "'+ title + '"  }';
    invokeWebService( url, params, callback, defaultErrorHandler);
}

function deleteGuidanceItem(guidanceItemId, callback)
{
    var url = TM.tmWebServices + 'DeleteGuidanceItem';
    var params = '{ guidanceItemId : "'+ guidanceItemId + '" }';
    invokeWebService( url, params, callback, defaultErrorHandler);
}

//{ guidanceItem: { "topic": "Topic..", "technology": "Technology....", "category": "Category...", "rule_Type": "RuleType...", "priority": "Priority...", "status": "Status..", "author": "Author..." , "libraryId": "10000000-0000-0000-0000-000000000000", "guidanceType": "f531f722-47d1-43a3-b0cf-62cf5dcf8c35", "creatorId": "fbb1db92-c314-4fb0-a0db-1ff82bc2d68f", "creatorCaption": "guidanceLibrary", "title": "GI title", "images": "GI images", "lastUpdate": "\/Date(1309232562210)\/" , "htmlContent": "GI HTML content"} }

//Gui objects

function getStringIndexes(callback)
{
    var url = TM.tmWebServices + 'GetStringIndexes';
    var params = '{}';
    invokeWebService( url, params, callback, defaultErrorHandler);
}

function getGuiObjects(callback)
{
    var url = TM.tmWebServices + 'GetGUIObjects_Small';
    var params = '{}';
    invokeWebService( url, params, callback, defaultErrorHandler);
}


*/







/**********************************
 *****    /javascript/TM.Gui/TM.GUI.LibraryTree.js
 **********************************/



//$.jstree.defaults.themes.url = "/javascript/jQuery.jsTree/themes/default/style.css";

window.TM.Gui.LibraryTree =    {
        // variables
        version     : 1 ,
        plugins     : [ "themes", "json_data" , "ui", "crrm", "contextmenu"] , //  ,  "hotkeys"
        treeData    : undefined,
        targetDiv   : undefined,
        jsTree      : undefined,

        // events
        onTreeCreated:      function() { } ,
        onTreeLoaded:       function() { } ,
        onSelectedNode:     function() { } ,


        // methods
        open:                       function(_targetDiv)    {
                                                                this.targetDiv = _targetDiv;
                                                                return this;
                                                            },
        create_EmptyTree:           function()              {
                                                                this.jsTree = undefined;
                                                                this.treeData = { data: [] };
                                                                this.create_Tree();
                                                            },
        create_TreeUsingJSON:       function()
                                {
                                    var that = this,
                                        startTime = new Date();
                                    this.jsTree = undefined;

                                    this.onTreeCreated = function()
                                        {
                                            window.TM.Debug.TimeSpan_Gui_LibraryTree_CreatedTreeFromJsonData = startTime.toNow();
                                            that.onTreeLoaded();
                                            window.TM.Events.onLibraryTreeLoaded();
                                        };

                                    this.loadJsonData(function()
                                        {
                                            that.create_Tree();
                                        } );
                                },

        create_Tree:                function()
                                {
                                    var options = {
                                                      json_data     : this.treeData,
                                                      plugins       : this.plugins,
                                                      themes		: { url: '/javascript/jQuery.jsTree/themes/default/style.css'},
                                                      contextmenu   : { items: window.TM.Gui.LibraryTree.createContextMenu },
                                                      ui            : { "select_limit" : 1 }
                                                      //,
/*													  "dnd"			: { "drag_check": function() { alert('drag check') } ,
                                                                        "drag_finish": function() { alert('drag finish') },
                                                                        "drop_finish": function() { alert('drop finish') }
                                                                      }*/
                                        },
                                        that    = this;

                                    $(this.targetDiv).bind("loaded.jstree", function (event, data)  {
                                                                                                        that.jsTree = data.inst;
                                                                                                        that.onTreeCreated();
                                                                                                    });

                                    //create tree
                                    $(this.targetDiv).jstree(options)
                                                     .delegate("a", "click", this.setSelectedId)
                                                     .delegate("a", "click", function() { that.onClick(); } );

                                    //bind renamema nd create events
                                    $(this.targetDiv)
                                          .bind("rename.jstree",        window.TM.Gui.LibraryTree.onRename)
                                          .bind("create.jstree",        window.TM.Gui.LibraryTree.onCreate);

                                    //setup drag&drop actions and icons
                                    window.TM.Gui.LibraryTree.dropActions.setUp();

                                },

        setSelectedId:              function (event)
                                {
                                    //_event = event;
                                    //var node = $(event.srcElement);	// doesn't work in FF
                                    var node = $(event.target);
                                    window.TM.Gui.LibraryTree.selectNode(node);
                                },

        onClick :                   function (event, data)      { },

        loadJsonData:               function(callback) {
                                                            var that = this;
                                                            window.TM.WebServices.WS_Data.getJsTreeWithFolders(
                                                                function(data)
                                                                    {
                                                                        that.treeData = data;
                                                                         callback();
                                                                    });
                                                        },

        add_LibrariesFromWsData:    function()
                                        {
                                            var startTime = new Date(),
                                                that = this;
                                            $.each(window.TM.WebServices.Data.AllLibraries, function()
                                                    {
                                                        that.add_LibraryFromWsData(this);
                                                    });
                                            window.TM.Debug.TimeSpan_Gui_LibraryTree_CreatedTreeFromWsData = startTime.toNow();
                                            this.onTreeLoaded();
                                        },

        add_LibraryFromWsData:      function(library)
                                        {
                                            var libraryNode = this.add_Library(library.name);
                                            libraryNode.attr('id', library.id);
                                            libraryNode.attr('type', library.__type);
                                            this.add_FoldersFromWsData	(libraryNode, library.subFolders);
                                            this.add_ViewsFromWsData	(libraryNode, library.views);
                                        },

        add_FoldersFromWsData:      function(rootNode, folders)
                                        {
                                            var that = this;
                                            $.each(folders, function()
                                                    {
                                                        var folderNode = rootNode.add_Folder(this.name);
                                                        folderNode.attr('id', this.id);
                                                        folderNode.attr('type', this.__type);

                                                        that.add_FoldersFromWsData	(folderNode, this.subFolders);
                                                        that.add_ViewsFromWsData	(folderNode, this.views);
                                                    });
                                        },
        add_ViewsFromWsData:        function(rootNode, views)
                                        {
                                            $.each(views, function()
                                                    {
                                                        var folderNode = rootNode.add_View(this.caption);
                                                        folderNode.attr('id', this.id);
                                                        folderNode.attr('type', this.__type);
                                                        //that.add_LibraryFromWsData(this);
                                                    });
                                        }


    };

//*: Show Tree
window.TM.Gui.LibraryTree.showTree = function()    {
        var applyJsTreeCssPatches = function()  {
                                                    $('.jstree-default.jstree-focused').css('background-color','#FFFFFF');
                                                },
            libraryTree           = window.TM.Gui.LibraryTree.open("#libraryJsTree");

        $("#libraryJsTree").html('...loading tree...');

        libraryTree.onTreeLoaded = function()
            {
                applyJsTreeCssPatches();

                $(libraryTree.targetDiv).delegate("a", "click",
                    function (event, data)
                        {
                            window.TM.Events.onLibraryTreeSelected();
                        });

                window.TM.Gui.LibraryTree.selectNode_ById(window.TM.Gui.Main.Panels.initialId);
            };
        libraryTree.create_TreeUsingJSON();
    };

//*: nodes manipulation methods
window.TM.Gui.LibraryTree.nodes             = function()            {
        return $(window.TM.Gui.LibraryTree.targetDiv + " ul li");
    };
window.TM.Gui.LibraryTree.title             = function(node, value) {
        if(value !== undefined) //isDefined(value))
        {
            window.TM.Gui.LibraryTree.jsTree.set_text(node, value);
            return node;
        }
        return window.TM.Gui.LibraryTree.jsTree.get_text(node);
    };
window.TM.Gui.LibraryTree.firstNode         = function()            {
        return window.TM.Gui.LibraryTree.nodes().first();
    };
window.TM.Gui.LibraryTree.selectNode        = function(node)        {
        //alert(TM.Gui.LibraryTree.selectedNode === node)

        if (node !==undefined) // isDefined(node))
        {
            var selectedNodeId = $(node).attr('id');
            if (selectedNodeId === undefined || selectedNodeId==="") //isUndefined(selectedNodeId) || selectedNodeId==="")
            {
                selectedNodeId = $(node).parent().attr('id');
            }
            if (selectedNodeId !== undefined) //isDefined(selectedNodeId))
            {
                if(selectedNodeId !== window.TM.Gui.selectedNodeId)
                {
                    window.TM.Gui.LibraryTree.jsTree.deselect_all();
                    window.TM.Gui.selectedNodeId = selectedNodeId;
                    window.TM.Gui.selectedNodeData = $.data[selectedNodeId];
                    window.TM.Gui.LibraryTree.jsTree.select_node(node);
                    window.TM.Gui.LibraryTree.selectedNode = node;
                    window.TM.Gui.LibraryTree.onSelectedNode(node);
                }
            }
            else
            {
                window.console.log("selectedNodeId was not defined");
            }
        }
        return node;
    };
window.TM.Gui.LibraryTree.selectNode_ById   = function(guid)        {
                                                                    if (guid===undefined) // isDefined(guid) === false)
                                                                    {
                                                                        return;
                                                                    }
                                                                    try
                                                                    {
                                                                        var firstNode,
                                                                            nodeToSelect = $(window.TM.Gui.LibraryTree.targetDiv + " ul li[id='" + window.htmlEscape(guid) + "']");
                                                                        if (nodeToSelect.size() === 1)
                                                                        {
                                                                            window.TM.Gui.LibraryTree.selectNode(nodeToSelect);
                                                                        }
                                                                        else
                                                                        {
                                                                            nodeToSelect = $(window.TM.Gui.LibraryTree.targetDiv + " ul li a:contains('" + window.htmlEscape(guid)+ "')");
                                                                            if (nodeToSelect.size() === 1)
                                                                            {
                                                                                window.TM.Gui.LibraryTree.selectNode(nodeToSelect);
                                                                            }
                                                                            else
                                                                            {
                                                                                firstNode = window.TM.Gui.LibraryTree.selectFirstNode();
                                                                                window.TM.Gui.LibraryTree.openNode(firstNode);
                                                                            }
                                                                        }
                                                                        window.TM.Events.onLibraryTreeSelected();

                                                                    }
                                                                    catch (e)
                                                                    {
                                                                        window.TM.Gui.Dialog.alertUser(e.message, "in window.TM.Gui.LibraryTree.selectNode_ById");
                                                                    }

                                                                };
window.TM.Gui.LibraryTree.selectNode_ByName = function(name)        {
                                                                    var guid = window.TM.WebServices.Data.id_ByName(name);
                                                                    window.TM.Gui.LibraryTree.selectNode_ById(guid);
                                                                };
window.TM.Gui.LibraryTree.openNode          = function(node)        {
                                                                    window.TM.Gui.LibraryTree.jsTree.open_node(node);
                                                                    return node;
                                                                };
window.TM.Gui.LibraryTree.selectFirstNode   = function()            {
                                                                    var firstNode = window.TM.Gui.LibraryTree.firstNode();
                                                                    window.TM.Gui.LibraryTree.selectNode(firstNode);
                                                                    return firstNode;
                                                                };

//*: Node creation methods: These methods make no connection to the database (i.e. are purely GUI driven)
window.TM.Gui.LibraryTree.add_Node          = function(targetNode, title, icon, callback, skip_rename)      {
        if (skip_rename === undefined) //isUndefined(skip_rename))
        {
            skip_rename = true;
        }
        var newNode = window.TM.Gui.LibraryTree.jsTree
                            .create(
                                        targetNode,
                                        "last",
                                        {
                                            data: {
                                                    title:title ,
                                                    icon:  icon
                                                 }
                                        } ,
                                        callback ,
                                        skip_rename
                                    );
        newNode.title = function(value) { return window.TM.Gui.LibraryTree.title(newNode, value); };
        return newNode;
    };
window.TM.Gui.LibraryTree.add_Library       = function(title, callback, skip_rename)                        {
        var libraryNode = window.TM.Gui.LibraryTree.add_Node("",title, '/Images/SingleLibrary.png' , callback, skip_rename);
        libraryNode.add_Folder = function(title, callback, skip_rename)
            {
                return window.TM.Gui.LibraryTree.add_Folder(libraryNode, title, callback, skip_rename);
            };
        libraryNode.add_View = function(title, callback, skip_rename)
            {
                return window.TM.Gui.LibraryTree.add_View(libraryNode, title, callback, skip_rename);
            };

        //libraryNode.title = function(value) { return window.TM.Gui.LibraryTree.title(libraryNode, value) };

        return libraryNode;
    };
window.TM.Gui.LibraryTree.add_Folder        = function(targetNode, title, callback, skip_rename)            {
        var folderNode = window.TM.Gui.LibraryTree.add_Node(targetNode,title, '/Images/FolderIcon.png' , callback, skip_rename);
        folderNode.add_Folder = function(title, callback, skip_rename)
            {
                return window.TM.Gui.LibraryTree.add_Folder(folderNode, title, callback, skip_rename);
            };
        folderNode.add_View = function(title, callback, skip_rename)
            {
                return window.TM.Gui.LibraryTree.add_View(folderNode, title, callback, skip_rename);
            };
        return folderNode;
    };
window.TM.Gui.LibraryTree.add_View          = function(targetNode, title, callback, skip_rename)            {
        return window.TM.Gui.LibraryTree.add_Node(targetNode,title, '/Images/ViewIcon.png' , callback, skip_rename);
    };

//*: Node creation methods: These methods are the ones that make commits to the database and the GUI
window.TM.Gui.LibraryTree.add_Library_to_Database       = function(title, callback, skip_rename)            {
        var libraryNode = window.TM.Gui.LibraryTree.add_Library(title, callback, skip_rename);
        libraryNode.hide();

        window.TM.WebServices.WS_Libraries.add_Library(
            title,
            function(libraryV3) {
                                    if (libraryV3 !== null)
                                    {
                                        libraryV3.type = "Library";
                                        libraryNode.fadeIn();
                                        window.TM.WebServices.Data.AllLibraries.push(libraryV3);
                                        $.data[libraryV3.libraryId] = libraryV3;
                                        libraryNode.attr("id", libraryV3.libraryId);

                                        window.TM.Gui.Dialog.alertUser('Library Created');
                                    }
                                    else
                                    {
                                        window.TM.Gui.Dialog.alertUser("It was not possible to create the library called : " + title, 'Library creation error'  );
                                    }
                                    window.TM.Gui.LibraryTree.lastLibraryCreated = libraryV3;
                                    window.TM.Events.onNewLibrary();
                                });
        return libraryNode;
    };
window.TM.Gui.LibraryTree.remove_Library_from_Database  = function(libraryIdOrName)                         {
        var libraryId = libraryIdOrName,
            libraryV3 = $.data[libraryId],
            libraryNode;

        if (libraryV3 === undefined)    //isUndefined(libraryV3))
        {
            libraryV3 = window.TM.WebServices.Data.library(libraryIdOrName);
            if (libraryV3 === undefined) // isUndefined(libraryV3))
            {
                window.TM.Gui.Dialog.showUserMessage("In remove_Library_from_Database, could not find the library to remove:" + libraryIdOrName);
            }
            libraryId = libraryV3.libraryId;
        }

        libraryNode = $("#" + libraryId);

        if (libraryNode.length !== 1 || libraryV3 === undefined) //isUndefined(libraryV3))
        {
            window.TM.Gui.Dialog.showUserMessage("something is wrong, the objects required to remove the library are not available: " + libraryId);
        }
        else
        {
            window.TM.WebServices.WS_Libraries.remove_Library(
                libraryId, function(result)
                    {
                        if (result)
                        {
                            libraryNode.remove();
                            window.TM.WebServices.Data.AllLibraries.pop(libraryV3);
                            delete $.data[libraryV3.libraryId];
                            window.TM.Gui.Dialog.alertUser('Library Deleted');
                            window.TM.Gui.LibraryTree.lastLibraryRemoved = libraryV3;
                            window.TM.Events.onRemovedLibrary();
                        }
                        else
                        {
                            window.TM.Gui.Dialog.showUserMessage("it was not possible to remove the library:" + libraryId);
                        }

                    });
        }
    };
window.TM.Gui.LibraryTree.remove_Folder_from_Database   = function(libraryId, folderId)                     {
                                                                                            var folderNode = $("#" + folderId),
                                                                                                folderV3 = $.data[folderId];
                                                                                            window.TM.WebServices.WS_Libraries.remove_Folder(
                                                                                                    libraryId, folderId,  function(result)
                                                                                                        {
                                                                                                            if (result)
                                                                                                            {
                                                                                                                folderNode.remove();
                                                                                                                window.TM.WebServices.Data.AllFolders.pop();
                                                                                                                delete  $.data[folderId];
                                                                                                                window.TM.Gui.Dialog.alertUser('Folder Removed');

                                                                                                                window.TM.Gui.LibraryTree.lastFolderRemoved = folderV3;
                                                                                                                window.TM.Events.onRemovedFolder();
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                window.TM.Gui.Dialog.showUserMessage("it was not possible to remove the folder:" + folderId);
                                                                                                            }

                                                                                                        });
                                                                                        };
window.TM.Gui.LibraryTree.remove_View_from_Database     = function(libraryId, viewId)                       {
        var viewNode = $("#" + viewId),
            viewV3 = $.data[viewId];
        window.TM.WebServices.WS_Libraries.remove_View(
                libraryId, viewId,  function(result)
                    {
                        if (result)
                        {
                            viewNode.remove();
                            window.TM.WebServices.Data.AllViews.pop(viewV3);
                            delete  $.data[viewV3];
                            window.TM.Gui.Dialog.alertUser('View Removed');
                            window.TM.Gui.LibraryTree.lastViewRemoved = viewV3;
                            window.TM.Events.onRemovedView();
                        }
                        else
                        {
                            window.TM.Gui.Dialog.showUserMessage("it was not possible to remove the view:" + viewId);
                        }
                    });
    };
window.TM.Gui.LibraryTree.add_Folder_to_Database        = function(libraryId, folderId, title, callback, skip_rename)       {
        var targetNode = folderId !== undefined //isDefined(folderId)
                            ? $("#" + folderId)
                            : $("#" + libraryId),

            folderNode = window.TM.Gui.LibraryTree.add_Folder(targetNode,title,callback, skip_rename);

        folderNode.hide();
        window.TM.WebServices.WS_Libraries.add_Folder(
            libraryId,
            folderId,
            title,
            function(folderV3)
                {
                    if (folderV3 !== null)
                    {
                        folderV3.type = "Folder";
                        folderNode.fadeIn();
                        window.TM.WebServices.Data.AllFolders.push(folderV3);
                        $.data[folderV3.folderId]= folderV3;
                        $.data[folderV3.folderId].parentId = folderId;
                        folderNode.attr("id", folderV3.folderId);
                        window.TM.Gui.Dialog.alertUser('Folder Added');
                    }
                    else
                    {
                        window.TM.Gui.Dialog.showUserMessage("it was not possible to create the folder:" + title);
                    }
                    window.TM.Gui.LibraryTree.lastFolderCreated = folderV3;
                    window.TM.Events.onNewFolder();
                });

        return folderNode;
    };
window.TM.Gui.LibraryTree.add_View_to_Database          = function(libraryId, folderId, viewName, callback, skip_rename)    {
        var targetNode = folderId !== undefined //isDefined(folderId)
                            ? $("#" + folderId)
                            : $("#" + libraryId),
            viewNode = window.TM.Gui.LibraryTree.add_View(targetNode, viewName, callback, skip_rename);

        viewNode.hide();
        window.TM.WebServices.WS_Libraries.add_View(
            libraryId,
            folderId,
            viewName,
            function(viewV3)
                {
                    if (viewV3 !== null)
                    {
                        viewV3.type = "View";
                        viewV3.name = viewV3.caption;
                        viewNode.fadeIn();
                        window.TM.WebServices.Data.AllViews.push(viewV3);
                        $.data[viewV3.viewId]= viewV3;
                        viewNode.attr("id", viewV3.viewId);
                        window.TM.Gui.LibraryTree.setDraggableOptionsForView(viewNode, viewV3);
                        window.TM.Gui.Dialog.alertUser('View added: {0}'.format(viewV3.caption));


                        // this is a work around the current issue of not being able to drag into created views
                        window.TM.Gui.LibraryTree.jsTree.deselect_all();
                        window.TM.Gui.LibraryTree.selectNode(viewNode);
                        window.TM.Events.onLibraryTreeSelected();
                    }
                    //else
                    //	TM.Gui.Dialog.showUserMessage("it was not possible to create the view:" + viewName);
                    window.TM.Gui.LibraryTree.lastViewCreated = viewV3;
                    window.TM.Events.onNewView();
                });

        return viewNode;
    };
window.TM.Gui.LibraryTree.rename_Library_to_Database    = function(libraryId, newName)                      {
        var libraryNode = $("#"+libraryId);
        //libraryNode.hide();
        window.TM.WebServices.WS_Libraries.rename_Library(libraryId, newName
              , function(result) {
                                    var libraryV3 =$.data[libraryId];
                                    if (result !== null)
                                    {
                                        window.TM.Gui.LibraryTree.title(libraryNode, newName);
                                        libraryNode.hide().fadeIn();
                                        libraryV3.name = newName;
                                        window.TM.Gui.Dialog.alertUser('Library Renamed');
                                    }
                                    //else
                                    //	TM.Gui.Dialog.showUserMessage("it was not possible to rename the library:" + title);
                                    window.TM.Gui.LibraryTree.lastLibraryRenamed = libraryV3;
                                    window.TM.Events.onRenamedLibrary();
                                },
                function(error)
                {
                    window.TM.Gui.LibraryTree.jsTree.rename_node(libraryNode,$.data[libraryId].name);
                    window.TM.WebServices.Helper.defaultErrorHandler(error);
                });
        return libraryNode;
    };
window.TM.Gui.LibraryTree.rename_Folder_to_Database     = function(libraryId, folderId, newName)            {
        var folderNode = $("#"+folderId);
        folderNode.hide();
        window.TM.WebServices.WS_Libraries.rename_Folder(libraryId, folderId, newName,
              function(result)
                {
                    var folderV3 =$.data[folderId];
                    if (result !== null)
                    {
                        window.TM.Gui.LibraryTree.title(folderNode, newName);
                        folderNode.fadeIn();
                        folderV3.name = newName;
                        window.TM.Gui.Dialog.alertUser('Folder Renamed');
                    }
                    //else
                    //	TM.Gui.Dialog.showUserMessage("it was not possible to rename the library:" + title);
                    window.TM.Gui.LibraryTree.lastFolderRenamed = folderV3;
                    window.TM.Events.onRenamedFolder();
                });
        return folderNode;
    };
window.TM.Gui.LibraryTree.rename_View_to_Database       = function(libraryId, folderId, viewId, newName)    {
        var viewNode = $("#"+viewId);
        viewNode.hide();
        window.TM.WebServices.WS_Libraries.rename_View(libraryId, folderId, viewId, newName,
               function(result)
                {
                    var viewV3 =$.data[viewId];
                    if (result !== null)
                    {
                        window.TM.Gui.LibraryTree.title(viewNode, newName);
                        viewNode.fadeIn();
                        viewV3.caption = newName;
                        window.TM.Gui.Dialog.alertUser("View renamed to: {0}".format(viewV3.caption));
                    }
                    //else
                    //	TM.Gui.Dialog.showUserMessage("it was not possible to rename the library:" + title);
                    window.TM.Gui.LibraryTree.lastViewRenamed = viewV3;
                    window.TM.Events.onRenamedView();
                });
        return viewNode;
    };

//*:    Admin/Edit mode

//Drag & Drop
window.TM.Gui.LibraryTree.setDraggableOptionsForView      = function(node, nodeData)    {
        $(node).draggable(
                        {
                            helper:'clone',
                            cursorAt: {left: -20, top: -20},
                            start : function() {
                                                    window.TM.Gui.draggedData = nodeData ;
                                                    window.TM.dragMode = 'view';
                                                }
                        });
    };
window.TM.Gui.LibraryTree.dropActions =                     {
                                                                dropOk              : undefined,
                                                                dropNotOk           : undefined,
                                                                iconOffset_Top      : 0,
                                                                iconOffset_Left     : -20,
                                                                currentTargetNode   : undefined
                                                            };
window.TM.Gui.LibraryTree.dropActions.setUp               = function()                        {

        var that = window.TM.Gui.LibraryTree.dropActions;
        that.dropOk = $("<div>").attr('id','dropOk').appendTo('body').absolute().height(18).width(18).zIndex(100);
        that.dropOk.css("background" , "url('/javascript/jQuery.jsTree/themes/default/d.png') -2px -53px no-repeat" ).width(18).height(18);

        that.dropNotOk = $("<div>").attr('id','dropNotOk').appendTo('body').absolute().height(18).width(18).zIndex(100);
        that.dropNotOk.css("background" , "url('/javascript/jQuery.jsTree/themes/default/d.png') -18px -53px no-repeat" ).width(18).height(18)

        that.hide_DropIcons();
    };
window.TM.Gui.LibraryTree.dropActions.hide_DropIcons      = function()                        {
  //{
        var that = window.TM.Gui.LibraryTree.dropActions;
        that.dropOk.hide();
        that.dropNotOk.hide();
    };
window.TM.Gui.LibraryTree.dropActions.show_DropOk         = function(targetNode)              {
  //{
        var that = window.TM.Gui.LibraryTree.dropActions;
        that.show_DropIcon(targetNode, that.dropOk);
    };
window.TM.Gui.LibraryTree.dropActions.show_DropNotOk      = function(targetNode)              {
 //{
        var that = window.TM.Gui.LibraryTree.dropActions;
        that.show_DropIcon(targetNode, that.dropNotOk);

        //open the node after 1 second (if still the same)
        that.currentTargetNode = targetNode;
        setTimeout(function()
        {
            if(that.currentTargetNode === targetNode)
            {
                window.TM.Gui.LibraryTree.jsTree.open_node(targetNode);
            }
        }, 1000);
    };
window.TM.Gui.LibraryTree.dropActions.show_DropIcon       = function(targetNode, dropIcon)    {
 //{
        if(targetNode !== undefined) //isDefined(targetNode))
        {
            var that = window.TM.Gui.LibraryTree.dropActions;
            that.hide_DropIcons();
            dropIcon.show();
            dropIcon.top ($(targetNode).offset().top + that.iconOffset_Top);
            dropIcon.left($(targetNode).offset().left + that.iconOffset_Left);
        }
    };
// Context menu
window.TM.Gui.LibraryTree.contextMenuIdValue = null;
window.TM.Gui.LibraryTree.createContextMenu = function(node)    {
    var updatedNodeId = false,
        createMode = "",
        items = {},
        nodeType,
        addLibrary, removeLibrary, addFolder, removeFolder, addView, removeView;

    if (window.TM.Gui.CurrentUser.isEditor() === false)
    {
        return items;
    }
    if (window.TM.Gui.editMode === false)
    {
        items =
        {
            showEditMode:           { label: "Open Edit Mode",              action: window.TM.Gui.showEditMode } ,
            showDirectLink:         { label: "Show Direct Link",            action: window.TM.Gui.LibraryTree.showDirectLink } ,
            showDirectLinkForDevs:  { label: "Show Reading View Link",      action: window.TM.Gui.LibraryTree.showDirectLinkForDevs }
        };
        return items;
    }
    window.TM.Gui.LibraryTree.contextMenuIdValue = $.data[node.attr('id')];

    if (window.TM.Gui.LibraryTree.contextMenuIdValue === undefined)
    {
        return items;
    }
    nodeType = window.TM.Gui.LibraryTree.contextMenuIdValue.__type;

    addLibrary = function()
    {
        window.TM.Gui.LibraryTree.add_Library_to_Database("New_Library" + "".add_Random().slice(0,5), undefined, false);
    };

    removeLibrary = function(parentNode)
    {
        var nodeId = parentNode.id(),
            nodeData = $.data[nodeId],
            description = "library: '{0}'".format(nodeData.name);
        window.TM.Gui.Dialog.deleteConfirmation(description, function()
        {
            var nodeId = parentNode.id();
            window.TM.Gui.LibraryTree.remove_Library_from_Database(nodeId)
        });
    };

    addFolder = function(parentNode)
    {
        var nodeId = parentNode.id(),
            nodeData = $.data[nodeId],
            libraryId = nodeData.libraryId,
            folderId = nodeData.folderId;
        window.TM.Gui.LibraryTree.add_Folder_to_Database(libraryId, folderId, "new folder", undefined, false);
    };

    removeFolder = function(parentNode)
    {
        var nodeId = parentNode.id(),
            nodeData = $.data[nodeId],
            libraryId = nodeData.libraryId,
            folderId = nodeData.folderId,
            description = "folder: '{0}'".format(nodeData.name);
        //confirm before deletion
        window.TM.Gui.Dialog.deleteConfirmation(description, function()
        {
            window.TM.Gui.LibraryTree.remove_Folder_from_Database(libraryId,folderId)
        } );

    };

    addView = function(parentNode)
    {
        var nodeId = parentNode.id(),
            nodeData = $.data[nodeId],
            libraryId = nodeData.libraryId,
            folderId = nodeData.folderId;
        window.TM.Gui.LibraryTree.add_View_to_Database(libraryId, folderId, "new view", undefined, false);
    };

    removeView = function(parentNode)
    {
        var nodeId = parentNode.id(),
            nodeData = $.data[nodeId],
            libraryId = nodeData.libraryId,
            viewId = nodeData.viewId,
            description = "view: '{0}'".format(nodeData.caption);
        window.TM.Gui.Dialog.deleteConfirmation(description, function()
        {
            window.TM.Gui.LibraryTree.remove_View_from_Database(libraryId, viewId);
            window.TM.Events.onUserDeleted();
        });
    };


    if (nodeType === "TeamMentor.CoreLib.Library_V3")
    {
        items = {
            createFolderItem:   { label: "Add View",  action: addView },
            createViewItem:     { label: "Add Folder",  action: addFolder },
            //createViewItem:   { label: "Add Folder",  action: function (obj)  { createMode = "Folder" ; this.create(obj); } },
            //createFolderItem: { label: "Add View",  action: function (obj)    { createMode = "View" ;   this.create(obj); } },
            createGuidanceItem: { label: "Add Guidance Item",  action: window.TM.Gui.LibraryTree.newGuidanceItem },//function (obj) { newGuidanceItem(); } }, //this.create(obj); } },
            renameItem: { label: "Rename Library",  action: function (obj) { this.rename(obj); } },
            deteteItem: { label: "Delete Library",  action: removeLibrary},     //function (obj) { this.remove(obj); } },
            separatorItem: { label: "-----------",  action: function (obj) { } },
            newLibItem: { label: "New Library",  action: function (obj) { addLibrary(); } }
            //reloadItem: { label: "Reload Data",  action: function (obj) { refreshLibraryView(); } }
        };
    }
    else if (nodeType === "TeamMentor.CoreLib.Folder_V3")
    {
        items = {
            createViewItem      : { label: "Add View"       ,  action: addView },
            createFolderItem    : { label: "Add Folder"     ,  action: addFolder },
            renameItem          : { label: "Rename Folder"  ,  action: function (obj) { this.rename(obj); } },
            deteteItem          : { label: "Delete Folder"  ,  action: removeFolder }
        };
    }
    else if (nodeType === "TeamMentor.CoreLib.View_V3")
    {
        items = {
            createItem: { label: "Add Guidance Item",  action:  window.TM.Gui.LibraryTree.newGuidanceItem },//function (obj) { newGuidanceItem(); } }, //this.create(obj); } },
            renameItem: { label: "Rename View",  action: function (obj) { this.rename(obj); } },
            deteteItem: { label: "Delete View",  action: removeView }
        };
    }
    /*else if (nodeType == "guidanceItem")
     items =
     {
     renameItem: { label: "Rename Guidance Item",  action: function (obj) { this.rename(obj); } },
     deteteItem: { label: "Delete Guidance Item",  action: function (obj) { this.remove(obj); } }
     }*/
    else
    {
        window.TM.Gui.Dialog.alertUser('not supported nodeType: ' + nodeType);
    }
    items.separator2Item = { label: "-----------",  action: function (obj) { } };
    items.userMode = { label: "Exit Edit Mode",  action: window.TM.Gui.showUserMode};

    return items;
};
window.TM.Gui.LibraryTree.onRename = function(event, data)  {
    var rename_newData = data.rslt.new_name;
    //_targetNodeData = eval("( {0} )".format(data.rslt.obj.attr("id")));

    var targetNodeData = $.data[data.rslt.obj.attr("id")];
    if (targetNodeData !== undefined) //isDefined(targetNodeData))
    {
        if (targetNodeData.__type == "TeamMentor.CoreLib.Library_V3")
        {
            window.TM.Gui.LibraryTree.rename_Library_to_Database(targetNodeData.libraryId, rename_newData);
        }
        if (targetNodeData.__type == "TeamMentor.CoreLib.Folder_V3")
        {
            window.TM.Gui.LibraryTree.rename_Folder_to_Database(targetNodeData.libraryId, targetNodeData.folderId, rename_newData);
        }
        if (targetNodeData.__type == "TeamMentor.CoreLib.View_V3")
        {
            window.TM.Gui.LibraryTree.rename_View_to_Database(targetNodeData.libraryId, targetNodeData.folderId, targetNodeData.viewId, rename_newData);
        }
    }
};
window.TM.Gui.LibraryTree.onCreate = function(event, data)  {
                                                                data.rslt.new_name = data.rslt.name;                // to make it compatible with onCreate
                                                                window.TM.Gui.LibraryTree.onRename(event, data);   // the node is already there so we only have to deal with the rename
                                                            };
window.TM.Gui.LibraryTree.newGuidanceItem = function()      {
                                                                var closeNewGuidanceItemDialog, createNewGuidanceItem;

                                                                closeNewGuidanceItemDialog = function()
                                                                                                {
                                                                                                    "ui-dialog-titlebar-close".$().click();
                                                                                                };
                                                                createNewGuidanceItem       = function()
                                                                                                {
                                                                                                    var title = "New Guidance Item",
                                                                                                        htmlContent = "";
                                                                                                    createGuidanceItem(title,htmlContent, window.TM.Gui.LibraryTree.contextMenuIdValue.libraryId,
                                                                                                        function(data)
                                                                                                            {
                                                                                                                var newGuidanceItemId = data.d;
                                                                                                                if (typeof(window.TM.Gui.LibraryTree.contextMenuIdValue.viewId) != "undefined")
                                                                                                                {

                                                                                                                    var viewId = window.TM.Gui.LibraryTree.contextMenuIdValue.viewId;
                                                                                                                    addGuidanceItemToView(viewId, newGuidanceItemId,
                                                                                                                        function() {
                                                                                                                                        $.data[viewId].guidanceItems.push(newGuidanceItemId);
                                                                                                                                   } );

                                                                                                                }

                                                                                                                $.data[newGuidanceItemId] = {};
                                                                                                                $.data[newGuidanceItemId].guidanceItemId = newGuidanceItemId;
                                                                                                                $.data[newGuidanceItemId].libraryId      = window.TM.Gui.LibraryTree.contextMenuIdValue.libraryId;
                                                                                                                $.data[newGuidanceItemId].title          = title;
                                                                                                                $.data[newGuidanceItemId].technology     = "";
                                                                                                                $.data[newGuidanceItemId].phase          = "";
                                                                                                                $.data[newGuidanceItemId].type           = "";
                                                                                                                $.data[newGuidanceItemId].category       = "";
                                                                                                                $.data[window.TM.Gui.LibraryTree.contextMenuIdValue.libraryId].guidanceItems.push(newGuidanceItemId);

                                                                                                                window.TM.Gui.DataTableViewer.selectedRowTarget = null;
                                                                                                                window.TM.Gui.DataTableViewer.selectedRowIndex = -1;

                                                                                                                editGuidanceItemInNewWindow(newGuidanceItemId);
                                                                                                            });
                                                                                                  } ;
                                                                  createNewGuidanceItem();
                                                            };
window.TM.Gui.LibraryTree.showDirectLink = function()       {
        window.location.hash = "#load:" + window.TM.Gui.selectedNodeId;
        window.TM.Gui.AppliedFilters.currentFilters = [];
        window.TM.Gui.Dialog.alertUser("The page's hash tag was set to the direct link: " + window.location.hash);
    };
window.TM.Gui.LibraryTree.showDirectLinkForDevs = function()       {
        window.location.hash = "#load:" + window.TM.Gui.selectedNodeId + "&showFilters:false&showTree:false&centerGuidanceItems:true";
        window.TM.Gui.AppliedFilters.currentFilters = [];
        window.TM.Gui.Dialog.alertUser("The page's hash tag was set to the Reading View link");
    };



/**********************************
 *****    /javascript/TM.Gui/TM.GUI.Dialog.js
 **********************************/


TM.Gui.Dialog =
    {
        // variables
        version : 1 ,
        currentDialog	: null,
        defaultTargetDiv: '#TM_Gui_Dialog',

        loadPage: 			function (page, target, callback)
                                {
                                    target = this.ensureTargetExists(target);
                                    var pageToLoad = page;
                                    if (TM.Debug.addTimeStampToLoadedPages)
                                         pageToLoad += '?time='+ new Date().getTime();
                                    if($(target).length ==1)
                                        $(target).load(pageToLoad, callback);
                                    else
                                        callback(); //something went wrong since the div was not created
                                },

        loadDialog: 		function (page, target, callback)
                                {
                                    target = this.ensureTargetExists(target);
                                    this.loadPage(page,target, function()
                                                    {
                                                        $(target).dialog();
                                                        callback();
                                                    })

                                },

        ensureTargetExists: function(target)
                                {
                                    if ($(target).length ==0)
                                    {
                                        if (typeof(target) == "undefined")
                                            target = this.defaultTargetDiv;
                                        var htmlDiv = "<div id='{0}'></div>".format(target.substr(1));
                                        $("body").append(htmlDiv);
                                    }
                                    return target
                                },

        showUserMessage:	function(message, callback, height, width)
                                {
                                    if (isUndefined(height))
                                        height = 150;
                                    if (isUndefined(width))
                                        width = 400;
                                    var div = $("<div>{0}</div>".format(message));
                                    var userMessageDialog =  div.dialog(
                                        {
                                                title:'user message'
                                            ,	modal:true
                                            ,	height	: height
                                            ,	width	: width
                                            ,	buttons	: 	{
                                                                "Ok": function()
                                                                        {
                                                                            userMessageDialog.remove();
                                                                            if (isDefined(callback))
                                                                                callback()
                                                                        }
                                                            }
                                        } )
                                    TM.Gui.Dialog.currentDialog = userMessageDialog;
                                    return userMessageDialog;
                                },

        askYesOrNoQuestion:	function(title, question, onYes, onNo, width, height )
                                {
                                    if (isUndefined(height))
                                        height = 130;
                                    if (isUndefined(width))
                                        width = 400;
                                    var div = $("<div>").text(question);
                                    var yesNoDialog = div.dialog(
                                        {
                                            title	:title ,
                                            modal	:true,
                                            buttons	: 	{
                                                            "No" : function() { yesNoDialog.remove() ; onNo() },
                                                            "Yes": function() { yesNoDialog.remove() ; onYes() }
                                                        },
                                            height	: height ,
                                            width	: width

                                        } )
                                    TM.Gui.Dialog.currentDialog = yesNoDialog;
                                    return yesNoDialog;
                                },

        deleteConfirmation:	function(description, onYes, width, height)
                                {
                                    return TM.Gui.Dialog.askYesOrNoQuestion(
                                                            "Delete confirmation",
                                                            "Are you sure you want to delete " + description,
                                                            onYes,
                                                            function() {  }
                                                            ,360 + description.length*6, height);
                                },

        actionConfirmation:	function(description, onYes, width, height)
                                {
                                    return TM.Gui.Dialog.askYesOrNoQuestion(
                                                            "Action confirmation",
                                                            "Are you sure you want to " + description,
                                                            onYes,
                                                            function() {  },
                                                            width, height);
                                },

        showMessage_NotEnoughPriviledges: function()
                                {
                                    showUserMessage("You don't have enough priviledges to make this action");
                                },

        isThereAnDialogOpen	: function()
                                {
                                    return $(".ui-widget-overlay").length ==1;
                                },

        alertUser			: function(message, title, timeout)
                                {
                                    if(isDefined($.Growl) === false)
                                    {
                                        console.log(title + " : " + message);
                                        return;
                                    }
                                    if(isUndefined(timeout))
                                        timeout = 3000;
                                    $.Growl.show(message,
                                        {
                                            "icon": false,
                                            "title": title,
                                            "cls": "",
                                            "speed": 1000,
                                            "timeout": timeout
                                        });

                                }

    }

//TM specific dialogs
TM.Gui.Dialog.loginPage = function()
    {
        var loginPage = "/Html_Pages/Gui/Dialogs/Login.Html";
        var targetDiv = "#loginPage";

        TM.Gui.Dialog.loadPage(loginPage, targetDiv);
        /*, function()
            {
                if (isDefined(onLoadCallback))
                    TM.Events.onUserChange.add(onCloseCallback);
                if (isDefined(onLoadCallback))
                    onLoadCallback();
            });*/
    };



/**********************************
 *****    /javascript/TM.Gui/TM.GUI.ShowProgressBar.js
 **********************************/


TM.Gui.ShowProgressBar =
    {
        baseDivId 		 : "#__tm_progressBarBaseDiv",
        progressBarDivId : "#__tm_progressBarDiv",
        messageDivId	 : "#__tm_progressBarMessageDiv",
        isOpen			 : false,
        nextAmount		 : 12,
        showStatusMessage: true,
        progressBar		 : undefined,
        currentMessage   : undefined,

        //_original_raiseProcessBarNextValue : undefined,
        //_original_raiseProcessBarNextValue : undefined,

        open : function(message)
                {
                    if ($(TM.Gui.progressBarDiv).length ==0)
                    {
                        $("body").append($("<div>").attr("id", this.baseDivId.substr(1)));

                        this.progressBar = TM.Gui.addProgressBar(this.baseDivId)
                        this.progressBar.width(300)
                                        .center()
                                        .zIndex(2000);
                    }
                    this.message(message);
                    this.isOpen	= true;
                    var that = this;


                    //Global events to hook
                    //this._original_raiseProcessBarNextValue	 	= TM.Events.raiseProcessBarNextValue;
                    //this._original_raiseWebServiceReceivedData 	= TM.Events.raiseWebServiceReceivedData;

                    //TM.Events.raiseWebServiceReceivedData.add(TM.Events.raiseProcessBarNextValue);

                    TM.Events.raiseProcessBarNextValue	 .add(function(statusMessage) { that.progressBarNextValue(statusMessage) });;
                    return this;
                },

        progressBarNextValue: function(statusMessage)
                {
                    if (this.showStatusMessage)
                        this.message(statusMessage);
                    this.inc(this.nextAmount);
                },

        close : function()
                {
                    if (isDefined(this.progressBar))
                        this.progressBar.setValue(100);
                    $(this.baseDivId).remove();
                    this.isOpen	= false;
                    this.progressBar = undefined;

                    //restore hooked Global events
                    /*if(isDefined(this._original_raiseProcessBarNextValue))
                    {
                        TM.Events.raiseProcessBarNextValue = this._original_raiseProcessBarNextValue;
                        TM.Events.raiseWebServiceReceivedData = this._original_raiseWebServiceReceivedData;
                    }*/
                    TM.Events.raiseProcessBarNextValue.remove();
                    //TM.Events.raiseWebServiceReceivedData.remove();
                    return this;
                } ,
        message : function(message)
                {
                    if (isDefined(message))
                    {
                        if ($(this.messageDivId).length ==0)
                        {
                            this.progressBar.append(
                                $("<span>").attr("id", this.messageDivId.substr(1))
                                          .css( {
                                                    position: "absolute" ,
                                                    top: 0,
                                                    width: "100%" ,
                                                    "text-align": "center" ,
                                                    "line-height": "1.9em"
                                                  }));
                        }
                        $(this.messageDivId).html(message);
                    }
                    this.currentMessage = message;
                },
        inc 	: function(value) 	 { this.progressBar.inc(value)				; return this; 	},
        incAfter: function(value) 	 { this.progressBar.inc_after_timeout(value)	; return this; 	},
        next	: function()		 { this.incAfter(this.nextAmount,20)		    ; return this;  },
        dec 	: function(value) 	 { this.progressBar.dec(value)				; return this; 	},
        reset 	: function() 		 { return this.close().open(); 	   			  	},
        value 	: function(newValue) {
                                         if (isDefined(newValue))
                                            this.progressBar.setValue(newValue);
                                         return this.progressBar.getValue()
                                     }
    }


// helper method to create generic ProgressBars

TM.Gui.addProgressBar = function(hostElement, childElement)
    {

        if (typeof(childElement) == "string")
        {
            $(hostElement).html($("<div>").attr("id",childElement.substr(1)));
            hostElement = childElement;
        }

        var options =
            {
                steps			: 20,
                stepDuration	: 20,
                max				: 100,
                showText		: true,
                textFormat		: 'percentage',
                width			: 120,
                height			: 12,
                callback		: null
            };
        var progressBar = $(hostElement).progressbar(options);

        progressBar.getValue = function()
            {
                return $(hostElement).progressbar( "option", "value" );
            };

        progressBar.setValue = function(value)
            {
                $(hostElement).progressbar( "option", "value" , value);
                return this;
            };

        progressBar.inc = function(value)
            {
                if (isUndefined(value))
                    value = 1;
                this.setValue(progressBar.getValue() + value);
                return this;
            }

        progressBar.inc_after_timeout= function(value, timeoutValue)
            {
                var that = this;
                setTimeout(function() { that.inc(value) }, timeoutValue);
            }
        progressBar.dec = function(value)
            {
                if (isUndefined(value))
                    value = 1;
                this.inc(-value);
                return this;
            }

        progressBar.reset = function()
            {
                this.setValue(0);
                return this;
            };

        return progressBar
    };


/**********************************
 *****    /javascript/TM.Gui/TM.GUI.Main.js
 **********************************/


//TM.Gui.notAuthorizedMessage = "You must be logged in to view this page. Please <a href='javascript:loginPage()'>login</a> or <a href='javascript:signupPage()'>sign up</a>.";
TM.Gui.Main.targetDiv = '#guiWithPanels';

TM.Gui.Main.homePage = function(targetDiv)
    {
        TM.Gui.Main.showLoadingImageOnAjaxStartAndStop();
        if (isUndefined(targetDiv))
            targetDiv = TM.Gui.Main.targetDiv
        else
            TM.Gui.Main.targetDiv = targetDiv;
        loadPage(targetDiv,'/Html_Pages/Gui/TM_3_with_Panels.html');
    }

/*TM.Gui.Main.loadLibraryTree = function()
    {
        loadPage('gui_West_bottom', TM.Gui.Main.Panels.panelsDir + 'Left_LibraryTree.html');
    }
*/

TM.Gui.Main.showLoadingImageOnAjaxStartAndStop = 	function()
    {
        var loadingImg = $("<img>").attr("src", '/Javascript/jQuery.jsTree/themes/default/throbber.gif')
                                   .zIndex(40).absolute().right(10).top(40)
                                   .hide();
        loadingImg.appendTo("body")
                  .ajaxStart(function() { loadingImg.show()})
                  .ajaxStop(function() { loadingImg.hide()});;
    }

TM.Gui.changeMode = function(editMode)
    {
        if (TM.Gui.editMode != editMode)
        {
            TM.Gui.editMode = editMode;
            TM.Events.onEditModeChange();
        }
    }

TM.Gui.showEditMode = function() { 	TM.Gui.changeMode(true );  	}
TM.Gui.showUserMode = function() {	TM.Gui.changeMode(false);	}
;


/**********************************
 *****    /javascript/TM.Gui/TM.Gui.Main.Panels.js
 **********************************/


TM.Gui.Main.Panels =
    {
            trace   					: true
        ,   handleWindowHashChange  : true
        ,   div_North                   : 'gui_North'
        ,   div_Center                  : 'gui_Center'
        ,   div_Center_Center           : 'gui_CenterCenter'
        ,   div_Center_North            : 'gui_CenterNorth'
        ,   div_Center_North_Top        : 'gui_CenterNorth_top'
        ,   div_Center_North_Bottom     : 'gui_CenterNorth_bottom'
        ,   div_West                    : 'gui_West'
        ,   div_West_Bottom             : 'gui_West_bottom'
        ,   div_West_Top                : 'gui_West_top'
        ,   div_CenterCenter            : 'gui_CenterCenter'
        ,   div_East                    : 'gui_East'
        ,   div_TopMenuLinks            : 'TopMenuLinks'

        ,	panelsDir 					: '/Html_Pages/Gui/Panels/'
        ,   initialId                   : ''
        ,	openPanesBasedOnUserRole	: function()
                {
                    if(TM.Gui.showLibraryStructureToAnonymous)
                        this.openDefaultPanes();
                    else
                    {
                        if (TM.Gui.CurrentUser.isViewer())
                            this.openDefaultPanes();
                        else
                            this.showNotAuthorizedPage();
                    }
                }
        ,	openDefaultPanes 			: function()
                {
                    loadPage(this.div_North                 , this.panelsDir + 'Top_Banner.html');
                    loadPage(this.div_Center_North_Top      , this.panelsDir + 'Top_SearchPanel.html');
                    loadPage(this.div_Center_North_Bottom   , this.panelsDir + 'AppliedFilters/PivotPanels.html');
                    loadPage(this.div_West_Bottom           , this.panelsDir + 'Left_LibraryTree.html');
                    loadPage(this.div_West_Top              , this.panelsDir + 'AppliedFilters/TopLeft_AppliedFilters.html');
                    loadPage(this.div_East                  , this.panelsDir + 'Right_GuidanceItem.html');
                    loadPage(this.div_CenterCenter          , this.panelsDir + 'Middle_GuidanceItems.html');

                    loadPage('TopMenuLinks',				 this.panelsDir + 'TopRight_Links.html');

                }
        ,	showNotAuthorizedPage		: function()
                {
                    $("#" + this.div_West).hide();
                    $("#" + this.div_East).width('100%');
                    loadPage(this.div_East, TM.NotAuthorizedPage);

                    loadPage(this.div_North                 , this.panelsDir + 'Top_Banner.html');

                    loadPage('TopMenuLinks',				 this.panelsDir + 'TopRight_Links.html');
                }
        ,	setHomePageViewFromUrlHash 	: function()
            {
                TM.Gui.Main.Panels.applyHomePageView(window.location.hash.slice(1).split("&"));
            }
    };

TM.Gui.Main.Panels.createLayout = function()
    {
        var layoutDefaults =
            {
                    onclose_start		: function() { TM.Gui.disablePopups = true; }
                , 	onclose_end			: function() { TM.Gui.disablePopups= false }
            };

        myLayout = $('#MainTMGui').layout(
            {
                    defaults	:   layoutDefaults
                ,	north		: 	{
                                            resizable		: false
                                        ,	closable		: false
                                        ,	spacing_open	: 0
                                        ,	size			: 78
                                    }
                ,	center		:	{
                                            onresize		: TM.Gui.Main.Panels.onGuiResize
        //								,	minWidth		: 100
                                    }
                ,	east		:	{
                                            size			: 350
                                        ,	minSize			: 250
                                        ,	maxSize			: screen.availWidth - 400
                                    }
                ,	west		:	{
                                            size			: 260
                                        ,	minSize			: 230
                                        ,	maxSize			: screen.availWidth - 400
                                    }
            });

        westLayout = $('div.ui-layout-center').layout(
            {
                defaults: layoutDefaults,
                north:  {
                                paneSelector	: ".center-north"
                            ,	size			: 225
                            ,	minSize			: 150
                            ,	maxSize			: screen.availHeight - 400

                        },
                center: {
                                paneSelector	: ".center-center"
                            ,	resizable		: true
                            ,	onresize		: TM.Gui.Main.Panels.onGuiResize
                        }
            });


        TM.Gui.Main.Panels.cssFixesForHomePage();

    }

TM.Gui.Main.Panels.openAllPages = function()
{
    myLayout.open("west");
    westLayout.open("north");
}

TM.Gui.Main.Panels.onlyShowTableAndGuidanceItem = function()
{
    myLayout.close("west");
    westLayout.close("north");
    myLayout.sizePane("east","MainTMGui".$().width() /2);
}

TM.Gui.Main.Panels.applyHomePageView = function(commands)
    {
        jQuery.each(commands, function()
                {
                    var splitCommand = this.split(":");
                    if(splitCommand.length ==2)
                    {
                        var command = splitCommand[0];
                        var value = splitCommand[1];
                        switch(command)
                        {
                            case "showTree":
                                if (value =="false")
                                    myLayout.close("west");
                                else
                                    myLayout.open("west");
                                break;
                            case "showFilters":
                                if (value =="false")
                                    westLayout.close("north");
                                else
                                    westLayout.open("north");
                                break;
                            case "centerGuidanceItems":
                                if (value =="false")
                                    myLayout.sizePane("east",350);
                                else
                                    myLayout.sizePane("east","MainTMGui".$().width() /2);
                                break;
                            case "load":
                                TM.Gui.Main.Panels.initialId = value
                            default:
                                //console.log("Unrecognized command ******: " + command);
                                break;
                        }
                    }
                });
    }



TM.Gui.Main.Panels.buildGui = function()
{

    TM.Events.raiseProcessBarNextValue("Creating User Interface");
    TM.Gui.Main.Panels.createLayout();

    if ($.browser.msie && $.browser.version == '7.0')		//wreird IE 7 bug where we need to call this twice for the layouts to be visible
        TM.Gui.Main.Panels.createLayout();

    TM.Events.raiseProcessBarNextValue("Opening Default View");

    TM.Gui.Main.Panels.openPanesBasedOnUserRole();

    TM.Events.raiseProcessBarNextValue("Opening Default View");
    TM.Gui.Main.Panels.setHomePageViewFromUrlHash();


    $('#JS_Dialog').html('');


    if (TM.Gui.LoadLibraryData)
    {
        TM.Events.onFolderStructureLoaded.add(function()
            {
                TM.Events.raiseProcessBarNextValue("Loading Library Tree")

                $("#" + TM.Gui.Main.Panels.div_Center).show();
                TM.HomePageLoaded = "TM: HomePage Loaded";

                TM.Events.onMainGuiLoaded();
                TM.Gui.ShowProgressBar.close();
            });

        TM.Events.raiseProcessBarNextValue("Downloading Data");
        TM.Events.onFolderStructureLoaded();
    }
    else
        TM.Gui.ShowProgressBar.close();

    TM.Gui.Main.Panels.setWindowHashChangeHook()

    TM.Gui.Main.Panels.enableChromeCPUSpikeBugFix();
}

TM.Gui.Main.Panels.setWindowHashChangeHook = function()
    {
        if ( $.browser.msie )   //IE specific
            {
                var current_hash = document.location.hash;
                var trackHash = function TrackHash()
                {
                    if (current_hash != document.location.hash ) {
                        current_hash = document.location.hash;
                        TM.Gui.Main.Panels.onWindowHashChange();
                    }
                    return false;
                }
                setInterval(trackHash, 500);
            }
        else
            $(window).bind('hashchange', TM.Gui.Main.Panels.onWindowHashChange);
    }

TM.Gui.Main.Panels.onWindowHashChange = function()
    {
        if (TM.Gui.Main.Panels.handleWindowHashChange)
        {
            TM.Gui.Main.Panels.setHomePageViewFromUrlHash();
            TM.Gui.AppliedFilters.currentPivotPanelFilters = new Array();
            TM.Gui.AppliedFilters.MapFiltersFromUrl();
            TM.Events.onTextSearch();
        }
        TM.Gui.Main.Panels.handleWindowHashChange = true; // reset after one round
    }

TM.Gui.Main.Panels.cssFixesForHomePage = function ()
    {
    var that = TM.Gui.Main.Panels;
    if ($.browser.msie)
        that.div_North.$().height(78);
    that.div_North.$().css('overflow', 'hidden');

    that.div_CenterCenter.$().css('overflow', 'hidden');

    that.onGuiResize();
}

//due to the way the layouts sets theses clases, we have to reset these values
TM.Gui.Main.Panels.onGuiResize = function()
    {
        if (TM.Gui.Dialog.isThereAnDialogOpen())
        {
            return ;
        }

        // enforce center min-width

        var diff =  $("#" + TM.Gui.Main.Panels.div_Center).width() - 300
        if (diff < 0)
        {
            myLayout.sizePane("east", $("#" + TM.Gui.Main.Panels.div_East).width() + diff)
            return ;
        }

        "ui-layout-resizer-north".$().width('100%')

        TM.Gui.Main.Panels.div_Center_North.$().width("100%");
        TM.Gui.Main.Panels.div_Center_Center.$().width('100%');


        if (isDefined(TM.showFilter_cssFixes))
            TM.showFilter_cssFixes();

        //$(".showFiltersPanel").width(750)
        TM.Gui.Main.Panels.div_Center_North.$().css({ 'overflow-y':'hidden'});


        $(".SearchTextBox").width("center-north".$().width()-150)

        TM.Gui.DataTable.reDraw();
    }



TM.Gui.Main.Panels.enableChromeCPUSpikeBugFix = function()
    {
        var applyFix = function()
            {
                if (isUndefined(TM.Gui.DataTable.currentDataTable))
                {
                    setTimeout(applyFix, 250);
                }
                else
                {
                    TM.Gui.DataTable.currentDataTable.fnClearTable();
                    $("#MainTMGui").fadeOut();
                }
            }

        var removeFix = function()
            {
                $("#MainTMGui").fadeIn();
                TM.Events.onDisplayDataTable();
            }

        if($.browser.safari)
        {
            TM.Events.onLoginDialogOpen .add(applyFix) ;
            TM.Events.onLoginDialogClose.add(removeFix) ;

            TM.Events.onSignupDialogOpen .add(applyFix) ;
            TM.Events.onSignupDialogClose.add(removeFix) ;
        }
    }
;



/**********************************
 *****    /javascript/TM.Gui/TM.Gui.CurrentUser.js
 **********************************/


TM.Gui.CurrentUser =
    {
            userData 			: {}
        ,	currentUserName		: null
        ,	userRoles 			: []
        ,	htmlPage 			: ""
        , 	autoCheckUser	 	: true
        , 	autoCheckInterval 	: 60    // check every 60 sec (will be incremented by 10 secs on every request
        ,	loadUserData  		: function()
                                    {
                                        TM.WebServices.WS_Users.currentUser(
                                            function(data)
                                                {
                                                    var that = TM.Gui.CurrentUser;
                                                    if (data == null)
                                                        that.userData = {};
                                                    else
                                                    {
                                                        that.userData = data;
                                                    }

                                                    TM.WebServices.Config.CSRF_Token = that.userData.CSRF_Token;	// set CSRF token

                                                    if (that.currentUserName === that.userData.UserName)
                                                        {
                                                            return;
                                                        }
                                                    that.currentUserName = that.userData.UserName;
                                                    TM.Gui.CurrentUser.handleUserPostLoginData();
                                                    TM.Gui.CurrentUser.loadUserRoles();
                                                });
                                    }
        ,	loadUserRoles 		: function()
                                    {
                                        TM.WebServices.WS_Users.currentUserRoles(
                                            function(data)
                                                {
                                                    TM.Gui.CurrentUser.userRoles = data;
                                                    TM.Events.onUserDataLoaded();
                                                });
                                    }
        ,   handleUserPostLoginData : function()
                                    {
                                        if (isDefined(TM.Gui.CurrentUser.userData))
                                        {

                                            var postLoginView = TM.Gui.CurrentUser.userData.PostLoginView;

                                            if (window.location.hash.length < 2 && typeof(postLoginView) == "string")
                                            {
                                                window.location.hash = postLoginView;
                                            }
                                        }
                                    }
        , 	checkUserLoop			: function()
                                    {
                                        var that = TM.Gui.CurrentUser;
                                        that.loadUserData();
                                        if (that.autoCheckUser)
                                        {
                                            that.autoCheckInterval += 10;
                                            setTimeout(that.checkUserLoop, that.autoCheckInterval * 1000);
                                        }

                                    }
        , 	logout				: function()
                                    {
                                        var that = TM.Gui.CurrentUser;
                                        that.userData  = {};
                                        that.userRoles = [];
                                        TM.WebServices.WS_Users.logout();
                                    }
        , 	start_checkUserLoop : function()		{	TM.Gui.CurrentUser.autoCheckUser = true; TM.Gui.CurrentUser.checkUserLoop(); }
        , 	stop_checkUserLoop : function()		{	TM.Gui.CurrentUser.autoCheckUser = false; }
        , 	get_UserRoles		: function() 		{ 	return TM.Gui.CurrentUser.userRoles;}
        , 	roles				: function() 		{ 	return TM.Gui.CurrentUser.userRoles;}
        , 	get_UserData		: function()		{	return TM.Gui.CurrentUser.userData; }
        , 	hasRole				: function(role)  	{ 	return TM.Gui.CurrentUser.userRoles.indexOf(role) > -1; }
        , 	isAdmin				: function()		{	return TM.Gui.CurrentUser.hasRole("Admin"); }
        ,	isEditor			: function()		{	return TM.Gui.CurrentUser.hasRole("EditArticles"); }
        ,	isViewer			: function()		{	return TM.Gui.CurrentUser.hasRole("ReadArticles"); }
        ,	userName			: function()		{	return TM.Gui.CurrentUser.userData.UserName; }
        ,	loggedIn			: function()		{	return typeof(TM.Gui.CurrentUser.userName()) != "undefined"; }
        ,	isUserLoaded		: function()		{	return isDefined(TM.Gui.CurrentUser.userData.UserName); }

        ,	checkPwdComplexity	: function(password, passwordConfirm, errorDiv)
                                                    {
                                                            if (password != passwordConfirm)
                                                                $(errorDiv).text("Passwords don't match");
                                                            else if (password.length < 8)
                                                                $(errorDiv).text("Password must be at least 8 characters").fadeIn();
                                                            else if (/^[a-zA-Z0-9]+$/.test(password))
                                                                $(errorDiv).text("Password must contain a non-letter and a non-number character");
                                                            else
                                                                return true;
                                                            $(errorDiv).fadeIn();
                                                            return false;
                                                    }
    }
;


/**********************************
 *****    /javascript/TM.Gui/TM.Gui.DataTable.js
 **********************************/


TM.Gui.DataTable.tableOptions =
    {
            maxBeforePaginate 	: ($.browser.msie) ? 700 : 2000

        ,	bRetrieve 			: true
        ,	bDeferRender	 	: true
        ,	bProcessing 		: true
        ,	bInfo 				: false

        ,	bAutoWidth			: true
        ,   iDisplayLength 		: 500

        ,  	sScrollY			: 100
        , 	sScrollX			: "100%"
        ,   sScrollYInner		: "100%"
        ,   sScrollXInner		: "100%"

        ,	bSort 				: true
        , 	aaSorting			: [[ 1, "asc" ]]
        //,	bScrollCollapse	: true
    };

TM.Gui.DataTable.showEditOptions = function()
    {
        return TM.Gui.editMode && TM.Gui.CurrentUser.isEditor();
    }

    TM.Gui.DataTable.reDraw = function () {
        if (isDefined(TM.Gui.DataTable.currentDataTable)) {
            var dataTableYOffset = (TM.Gui.editMode === true) ? 85 : 60;
            $(".dataTables_scrollBody").height($("#gui_CenterCenter").height() - dataTableYOffset);
            TM.Gui.DataTable.currentDataTable.fnAdjustColumnSizing();
            TM.Gui.DataTable.currentDataTable.fnDraw();
        }
    }

TM.Gui.DataTable.selectRow = function(index)
    {
        if (isUndefined(index))
            index = 1;
        $("#guidanceItemsTable tr td").eq(index).mousedown()
    }

TM.Gui.DataTable.displayCurrentDataTable_onUserChange = function()
    {
        //if (TM.Gui.CurrentUser.loggedIn() === false &&
        //if(TM.Gui.DataTable.showEditOptions())
        if(TM.Gui.editMode)
            TM.Gui.DataTable.displayCurrentDataTable();
    }

TM.Gui.DataTable.displayCurrentDataTable = function()
        {
            var dataTable = TM.WebServices.Data.filteredDataTable.aaData.length > 0
                                ? TM.WebServices.Data.filteredDataTable
                                : TM.WebServices.Data.lastDataTableData

            TM.Gui.DataTable.displayDataTable(dataTable);
        }

TM.Gui.DataTable.displayDataTable = (function(dataTableToShow)
        {
            if(isUndefined(dataTableToShow))
                return;

            //$('#selectedGuidanceItem').html('');  // clear the 'loading' image
            $('#legend').html('');

            TM.Gui.DataTableViewer.addCheckBoxesToDataTable(dataTableToShow);
            //load table
            TM.Gui.DataTable.createDataTableWithGuidanceItems('guidanceItems', dataTableToShow);

            /*setTimeout(function()
                {
                    TM.Gui.DataTable.createDataTableWithGuidanceItems('guidanceItems', dataTableToShow);
                } , 20);
                */
            TM.Gui.DataTableViewer.applyCss();
        });

TM.Gui.DataTable.loadDataTable = function(dataToLoad)
{
    if (typeof(dataToLoad) == "undefined" || typeof(dataToLoad.aaData)=="undefined")
    {
        return;
    }
    TM.Gui.DataTable.displayDataTable(dataToLoad);
}

TM.loadingData = false;
TM.abortTableDataLoad = true;


TM.Gui.DataTable.createDataTableWithGuidanceItems = function (targetDiv, dataTableData, recreateTable) {
    //_dataTableData = dataTableData

    if (typeof (targetDiv.$()) == "undefined" || dataTableData.aoColumns.length === 0)
        return;

    if ($("#guidanceItemsTable").length == 0); // || recreateTable)
    {
        targetDiv.$().html('<br/>' +
                            '<div id="guidanceItemsTableButtons"/>' +
                            '<table cellpadding=\"10\" cellspacing=\"0\" border=\"0\" class=\"display\" id=\"guidanceItemsTable\"></table><br><br/>');

        //options

        //newDataTable.aaSorting = [ [1,'asc'] ];
        var tableOptions = TM.Gui.DataTable.tableOptions;
        var dataTableYOffset = (TM.Gui.editMode === true) ? 85 : 60;
        tableOptions.sScrollY = $("#gui_CenterCenter").height() - dataTableYOffset;
        tableOptions.bPaginate = (dataTableData.aaData.length > tableOptions.maxBeforePaginate);
        tableOptions.aoColumns = dataTableData.aoColumns;
        tableOptions.aaData = {};

        //TM.Gui.Dialog.alertUser('dataTable - createDataTableWithGuidanceItems with {0} items'.format(dataTableData.aaData.length));
        TM.Gui.DataTable.currentDataTable = $('#guidanceItemsTable').dataTable(tableOptions);

        TM.Gui.DataTable.currentDataTable.fnSetColumnVis(0, TM.Gui.editMode);
        TM.Gui.DataTable.currentDataTable.fnSetColumnVis(6);

        TM.Gui.DataTable.loadDataIntoDataTable_Step4(); 	//CSS fixes

        jsTree_Configure_SetRowSelected_forGuidanceItems();
    }

    TM.Gui.DataTable.addDataTableButtons();
    TM.Gui.DataTable.loadingNode = TM.Gui.DataTable.currentDataTable.fnAddData(["", "Loading Data....", "", "", "", "", ""]);
    setTimeout(function () { TM.Gui.DataTable.loadDataIntoDataTable_Step1(dataTableData) }, 25);
}

TM.Gui.DataTable.loadDataIntoDataTable_Step1 = function(dataTableData)
    {
        if (isUndefined(TM.Gui.DataTable.currentDataTable))
            return;
        var _currentDataTable = TM.Gui.DataTable.currentDataTable;
        if (TM.loadingData)
        {
            TM.abortTableDataLoad = true;
            setTimeout(function()
                {
                    TM.Gui.DataTable.loadDataIntoDataTable_Step1(dataTableData);
                }, 200);;
            return;
        }
        TM.loadingData = true;
        TM.abortTableDataLoad = false;
        TM.Gui.lastDataLoaded = dataTableData;
        lastDataLoad = dataTableData;
        TM.abortTableDataLoad = false;			//current object

        _currentDataTable.fnClearTable();

        TM.Gui.DataTableViewer.selectedRowTarget = null;
        TM.Gui.DataTableViewer.selectedRowIndex = -1;

        var itemsToAdd = dataTableData.aaData.slice() ; 	// create shalow copy of data to load
        var totalItemstoLoad = itemsToAdd.length;

        var dataTableLoadComplete = function()
            {
                TM.DataTableLoaded = "TM: DataTable Loaded";
                if (lastDataLoad.aaData.length === 0)
                    TM.Gui.DataTable.raiseEventForEmptyTable();
                else
                {
                    var restCommand = location.pathname.toLowerCase().split("/");			//handle the case where the user as issue an REST command to open an specific article
                    var mapping = restCommand.pop();
                    var command = restCommand.pop();
                    if (command == "open")
                        TM.Gui.GuidanceItemViewer.showGuidanceFromMapping(mapping)
                    else
                        TM.Gui.DataTable.selectRow(1);										// default to selecting the first row
                }
                TM.Events.onDataTableDisplayed();
            };

        if (itemsToAdd.length < 500)
        {
            _currentDataTable.fnAddData(itemsToAdd);
            //$("#nowShowingLabel").html("Showing " + totalItemstoLoad + " items");
            TM.Gui.DataTableViewer.set_Title("Showing " + totalItemstoLoad + " items (out of " + totalItemstoLoad  + ")");
            dataTableLoadComplete();
        }
        else
        {
            var loadItems = function(){
                                        if(TM.abortTableDataLoad)
                                        {
                                            _currentDataTable.fnClearTable();
                                            _currentDataTable.fnAddData(["","Refreshing....","","","","",""]);
                                            return;
                                        }
                                         //$("#nowShowingLabel").html(
                                         setTimeout(function()
                                                        {
                                                            TM.Gui.DataTableViewer.set_Title("Loaded " + (totalItemstoLoad - itemsToAdd.length) + " out of " + totalItemstoLoad);
                                                        }, 10);
                                         var slice = itemsToAdd.splice(0,500)
                                         _currentDataTable.fnAddData(slice  );

                                         if (itemsToAdd.length > 0)
                                              setTimeout(loadItems, 25);
                                         else
                                         {
                                             //$("#nowShowingLabel").html(
                                             TM.Gui.DataTableViewer.set_Title("Showing " + totalItemstoLoad + " items");

                                            dataTableLoadComplete();
                                         }
                                        };
            loadItems();
        }
        setTimeout(function() { TM.Gui.DataTable.loadDataIntoDataTable_Step3()}, 25 ) ;
    }

TM.Gui.DataTable.loadDataIntoDataTable_Step3 = function()
    {
        TM.loadingData = false;
        setTimeout(function() { TM.Gui.DataTable.loadDataIntoDataTable_Step4()}, 25 ) ;
    }

TM.Gui.DataTable.loadDataIntoDataTable_Step4 = function()
    {
        //cssFixes
        $('#guidanceItemsTable').css('width', '100%');
        $(".GuidanceItemCheckBox").parent().attr('style','text-align: center');
        $('#guidanceItemsTable').css('font-size', '13')
        jQuery('#guidanceItemsTable_filter').css('display','none');
        jQuery('.dataTables_wrapper').css('clear','none');
        jQuery('.display').css('clear','none');
        jQuery('table.display').css('clear','none') ;
        jQuery('#guidanceItemsTable_length').remove();
        if (TM.Gui.DataTable.showEditOptions())
            TM.Gui.DataTableViewer.setDragAndDropOptions();
    }

TM.Gui.DataTable.addDataTableButtons = function()
    {
        if (TM.Gui.DataTable.showEditOptions())
        {
            "guidanceItemsTableButtons".$().html(//"<div id='guidanceItemsTableButtons'>" +
                                            "<button id='button_selectAll'>Select All</button>" +
                                            "<button id='button_deselectAll'>Deselect All</button>"  +
                                            //"<button id='button_newGuidanceItem'>New Guidance Item</button>" +
                                            "<button id='button_RemoveGuidanceItemsFromView'>Remove Guidance Items from View</button>" +
                                            "<button id='button_DeleteGuidanceItemsFromLibrary'>Delete Guidance Items from Library</button>" +
                                            "<span id=guidanceTableEditorHelperText></span>" +
                                            "</div>" +
                                            "<br/>");

            //"button_newGuidanceItem".$().click(newGuidanceItem );
            "button_selectAll".$().click(function()
                {
                    "#guidanceItemsTable input".$().each(function() { $(this).attr('checked','true') });
                    "#guidanceItemsTable input".$()[0].click();		// this will trigger the event that populates the selectedGuidanceIds
                    "#guidanceItemsTable input".$()[0].click();		// reselect it
                } );
            "button_deselectAll".$().click(function()
                {
                    "#guidanceItemsTable input".$().each(function() { $(this).removeAttr('checked') });
                    "#guidanceItemsTable input".$()[0].click();		// this will trigger the event that populates the selectedGuidanceIds
                    "#guidanceItemsTable input".$()[0].click();		// reselect it
                } );
            "button_RemoveGuidanceItemsFromView".$().click(function()
                {
                    removeGuidanceItemsFromView(TM.Gui.selectedNodeData.viewId, selectedGuidanceIds,
                        function(result)
                            {
                                if (result.d)
                                {
                                    //_viewId = TM.Gui.selectedNodeData.viewId;
                                    //_selectedGuidanceIds = selectedGuidanceIds;
                                    TM.Gui.Dialog.alertUser("GuidanceItems successfully removed from view, please refresh view")
                                }
                                else
                                    TM.Gui.Dialog.alertUser("There was an error performing this action")
                            });
                });

            "button_DeleteGuidanceItemsFromLibrary".$().click(function()
                {
                    var deleteGuidanceItems = function()
                        {
                            TM.WebServices.WS_Libraries.remove_GuidanceItems(selectedGuidanceIds,
                                function(result)
                                    {
                                        if (result)
                                        {
                                            TM.Gui.Dialog.alertUser("GuidanceItems successfully deleted, please refresh browser")
                                        }
                                        else
                                            TM.Gui.Dialog.alertUser("There was an error performing this action")
                                    });
                        };
                    var description = "{0} guidanceItems".format(selectedGuidanceIds.length);
                    TM.Gui.Dialog.deleteConfirmation(description,deleteGuidanceItems);
                });

            "guidanceTableEditorHelperText".$().css('font-size','10pt')
                                               .relative()
                                               .left(20)

            //hide it for now since it is not implemented
            //if(typeof(TM.Gui.selectedNodeData.viewId) != "undefined" || typeof(TM.Gui.selectedNodeData.folderId) != "undefined" )
            if(TM.Gui.selectedNodeData.__type != "TeamMentor.CoreLib.Library_V3")
                "button_DeleteGuidanceItemsFromLibrary".$().hide();
            //if (typeof(TM.Gui.selectedNodeData) != "undefined")
            if(TM.Gui.selectedNodeData.__type != "TeamMentor.CoreLib.View_V3")
                    "button_RemoveGuidanceItemsFromView".$().hide();
            "button".$().button();
            "button".$().css("font-size",'10px');

            if ($.browser.msie)	//TODO: figure out why this is happening in IE
            {
                $("#guidanceItemsTableButtons .ui-button-text").width('100%');
                "button_selectAll".$().width(100);
                "button_deselectAll".$().width(100);
                "button_RemoveGuidanceItemsFromView".$().width(250);
                "button_DeleteGuidanceItemsFromLibrary".$().width(250);
                "guidanceTableEditorHelperText".$().width(300);
            }


            /*"<button id='button_selectAll'>Select All</button>" +
                                            "<button id=''>Deselect All</button>"  +
                                            //"<button id=''>New Guidance Item</button>" +
                                            "<button id=''>Remove Guidance Items from View</button>" +
                                            "<button id=''>Delete Guidance Items from Library</button>" +
                                            "<span id=></span>"
            */
        }
    }

TM.Gui.DataTable.raiseEventForEmptyTable = function()
    {
        TM.Gui.selectedGuidanceId = TM.Const.emptyGuid;
        TM.Gui.selectedGuidanceTitle = "No article available.";
        TM.Events.onShowGuidanceItem();
    }


/**********************************
 *****    /javascript/TM.Gui/TM.Gui.DataTableViewer.js
 **********************************/


TM.Gui.DataTableViewer =
    {
            applyCss				: function()
                                        {
                                            $("#nowShowingText").css(
                                                {
                                                        "text-align"	: "center"
                                                    ,	"font-weight"	: "bold"
                                                });
                                        }

        ,	set_Title				: function(text)
                                        {
                                            $("#nowShowingText").html(text);
                                        }

        , 	addCheckBoxesToDataTable : function(dataTable)
                                        {
                                            if(TM.Gui.editMode)
                                            {
                                                $.each(dataTable.aaData, function()
                                                    {
                                                        this[0] = "<input type='checkbox' class='GuidanceItemCheckBox' style='text-align: center'/>"
                                                    });
                                            }
                                        }
    };


TM.Gui.DataTableViewer.setDragAndDropOptions = function()
    {
        // for main Table  (when dragging guidance items into views)
        var guidanceItemsTable = $("#guidanceItemsTable"),
            libraryTree        = $(".LibraryTree");

        guidanceItemsTable.find("tr").draggable(
            {
                //helper:'clone',
                helper: getDragHelperElement,
                revert: false ,
                cursor: "arrow" ,
                revertDuration: 250,
                cursorAt: {left: -20, top: -20},
                zIndex: 10,
                appendTo: 'body',
                start : function() { TM.dragMode = 'guidanceItem';}
                 //containment: 'DOM',
                 //zIndex: 1500
                // addClasses: false
                //opacity: 0.35
            });

        guidanceItemsTable.find("input").draggable(
            {
                helper:'clone',
                //helper: getDragHelperElement,
                revert: false ,
                cursor: "arrow" ,
                revertDuration: 250,
                cursorAt: {left: -20, top: -20},
                zIndex: 10,
                appendTo: 'body',
                start : function() { TM.dragMode = 'guidanceItem';}
                 //containment: 'DOM',
                 //zIndex: 1500
                // addClasses: false
                //opacity: 0.35
            });

        //for library Tree when dragging views
        libraryTree.find("a").each(function()
            {
                if (typeof($(this).parent().attr('id')) != 'undefined')
                {
                    var id = $(this).parent().attr('id');
                    var nodeData = $.data[id];
                    //if( $(this).parent().attr('id').indexOf("type: 'view'") != -1)
                    if (nodeData.__type === "TeamMentor.CoreLib.View_V3")
                    {
                        TM.Gui.LibraryTree.setDraggableOptionsForView(this, nodeData);
                        //$(this)
                    }
                    /*if( $(this).parent().attr('id').indexOf("type: 'folder'") != -1)
                    {
                        $(this).draggable(
                            {
                                helper:'clone',
                                cursorAt: {left: -20, top: -20},
                                start : function() { TM.dragMode = 'folder'; }
                            })
                    }*/
                }
            });

        var addGuidanceItemsToParentObject = function(parentId, guidanceIds)
        {
            var parentData = $.data[parentId];
            if(isDefined(parentData) && parentData.__type == "TeamMentor.CoreLib.Folder_V3" && isDefined(parentData.guidanceItems))
            {
                parentData.guidanceItems  = parentData.guidanceItems.concat(guidanceIds);
                addGuidanceItemsToParentObject(parentData.parentId, guidanceIds);
            }
        };

        var addGuidanceItemsToLocalViewObject = function(viewId, guidanceIds)
        {
            var viewData = $.data[viewId];
            if(isDefined(viewData))
            {
                viewData.guidanceItems  = viewData.guidanceItems.concat(guidanceIds);
                var parentId = (viewData.folderId === TM.Const.emptyGuid)
                                    ? viewData.libraryId
                                    : viewData.folderId;
                addGuidanceItemsToParentObject(parentId, guidanceIds);
            }
        };

        var modeViewToFolderOrLibrary = function(viewId, targetId)
        {
            var sourceNode = $("#" + viewId);
            var targetNode = $("#" + targetId);
            sourceNode.fadeOut();
            TM.Gui.LibraryTree.jsTree.move_node(sourceNode, targetNode);
            sourceNode.fadeIn();
        };

        var libraryTree_OnOut = function()  // function(event, ui )
            {
                TM.Gui.LibraryTree.dropActions.hide_DropIcons()
            };

        var libraryTree_OnOver = function(event, nodeData, dragMode)
        {
            var targetNode = event.target;

            if (isUndefined(nodeData))
            {
                console.log("ERROR: nodeData not defined");
                return;
            }

            TM.Gui.LibraryTree.dropActions.show_DropNotOk(targetNode);

            //if (TM.Gui.selectedNodeData.libraryId == nodeData.libraryId) // allow Cross library drops
            {
                if (dragMode == 'guidanceItem')
                {
                    if (nodeData.__type=="TeamMentor.CoreLib.View_V3")
                        TM.Gui.LibraryTree.dropActions.show_DropOk(targetNode)

                }
                else if (dragMode == 'view')// || dragMode == 'folder')
                {
                    if (nodeData.__type=="TeamMentor.CoreLib.Folder_V3" ||
                        nodeData.__type=="TeamMentor.CoreLib.Library_V3")
                    {
                        TM.Gui.LibraryTree.dropActions.show_DropOk(targetNode)
                    }
                }
            }
        };

        var libraryTree_OnDrop = function(event, nodeData, dragMode)
        {
            if (isUndefined(nodeData))
            {
                console.log("ERROR: nodeData not defined");
                return;
            }

            if (dragMode == 'view' )
            {
                //if (TM.Gui.selectedNodeData.libraryId == nodeData.libraryId)   // allow Cross library drops
                {
                    if (nodeData.__type == "TeamMentor.CoreLib.Folder_V3")
                        moveViewToFolder(TM.Gui.draggedData.viewId, nodeData.folderId, nodeData.libraryId,
                            function() {
                                            modeViewToFolderOrLibrary(TM.Gui.draggedData.viewId, nodeData.folderId);
                                            TM.Gui.Dialog.alertUser('Moved view into folder');
                                        });
                    if (nodeData.__type == "TeamMentor.CoreLib.Library_V3")
                        moveViewToFolder(TM.Gui.draggedData.viewId, window.TM.Const.emptyGuid , nodeData.libraryId,
                            function() {
                                            modeViewToFolderOrLibrary(TM.Gui.draggedData.viewId, nodeData.libraryId);
                                            TM.Gui.Dialog.alertUser('Moved view into library');
                                        });
                }
                return;
            }

            if (nodeData.__type=="TeamMentor.CoreLib.View_V3") //&& TM.Gui.selectedNodeData.libraryId == nodeData.libraryId)			// allow Cross library drops
            {
                addGuidanceItemToViews(nodeData.viewId, selectedGuidanceIds,
                    function(result)
                        {
                            if (result)
                            {
                                addGuidanceItemsToLocalViewObject(nodeData.viewId, selectedGuidanceIds);
                                TM.Gui.Dialog.alertUser('Added {0} Guidance Items to view: {1}'.format(selectedGuidanceIds.length, nodeData.caption) );
                            }

                        } );
            }
        };

        libraryTree.find("a").droppable(
            {
                tolerance : 'pointer',
                drop: function( event) //function( event, ui )
                    {
                        libraryTree_OnOut();
                        var droppedNodeData = $.data[$(event.target.parentNode).attr('id')];
                        TM.Gui.LibraryTree.droppedNodeData = droppedNodeData;
                        libraryTree_OnDrop(event, droppedNodeData, TM.dragMode);
                    }  ,
                out: libraryTree_OnOut  ,
                over: function( event) //function( event, ui )
                    {
                        setTimeout(function()
                            {
                                var overNodeData = $.data[$(event.target.parentNode).attr('id')];
                                TM.Gui.LibraryTree.overNodeData = overNodeData;
                                libraryTree_OnOver(event, overNodeData, TM.dragMode)
                            },10);
                    }
            } )
    };



/**********************************
 *****    /javascript/TM.Gui/TM.Gui.AppliedFiltersList.js
 **********************************/


TM.Gui.AppliedFilters.currentPivotPanelFilters = new Array();

TM.Gui.AppliedFiltersList.removeFilters = function()
    {
        TM.Gui.AppliedFilters.currentFilters = [];
        TM.Gui.AppliedFilters.currentPivotPanelFilters = new Array();
        TM.Events.onInvalidateSearchText();
        if (window.location.hash.length > 1)
            window.location.hash = "";
        else
        {
            TM.Gui.AppliedFiltersList.populateAppliedFiltersTable() ;
            TM.Events.onFiltersRemoved();
        }
    }

TM.Gui.AppliedFiltersList.removeCriteraFromCriteriaCollection = function(text,title, column, state)
    {
        setPivotPanelFilter(text, title, column, false, false, true);
        TM.Events.onTextSearch()
    }

TM.Gui.AppliedFiltersList.clear_FiltersGui = function()
    {
        $("#AppliedFilterItems").html('');
    }

TM.Gui.AppliedFiltersList.add_Filter = function(text, title, column, showButtons, pinned)
    {
        var filterDiv = 	  $("<div class='AppliedFilterItem'>");
        var deleteImg = 	  $("<img src='/Images/DeleteFilterIcon.png' alt='Delete Filter' class='DeleteButton' />");
        var filterItemImage = $("<img id='ctl00_ContentPlaceHolder1_AppliedFilters1_AppliedFiltersListView_ctrl0_Image1' src='/Images/SingleLibrary.png' style='border-width:0px;' />");
        var pinnedImg       = $("<img class='PinButton'/>");
        //var unPinnedImg       = $("<img src='/Images/unPinned.png' alt='UnPin item' = Database Security' class='PinButton' style='width:15px'/>");
        //filterItemText  = $("<span id='ctl00_ContentPlaceHolder1_AppliedFilters1_AppliedFiltersListView_ctrl0_Label1'>");

        filterItemText = $("<span>").append(" {0} = {1}".format(htmlEscape(title), htmlEscape(text)));

        //handle delete button settings

        deleteImg.click(function()
            {
             /*   if (pinnedImg.pinned)
                    TM.Gui.Dialog.alertUser("You can't remove a pinned filter (please unpin it first)")
                else	*/
                if (pinnedImg.pinned)		        // if it is pinned we need to unpin it first
                    pinnedImg.click();
                    //TM.Gui.AppliedFiltersList.handle_PinChange(text, title, pinnedImg);
                TM.Gui.AppliedFiltersList.removeCriteraFromCriteriaCollection(text, title, column, false);
            })

        //handle pin button settings
        pinnedImg.click(function()
            {
                TM.Gui.AppliedFiltersList.handle_PinChange(text, title, pinnedImg);
            });
        TM.Gui.AppliedFiltersList.set_Pinned(pinnedImg, pinned);

        //add all elements that make this fileter
        filterDiv.append(filterItemImage);
        filterDiv.append(filterItemText);


        if(showButtons)
        {
            filterDiv.append(deleteImg)
            filterDiv.append(pinnedImg);
        }

        $("#AppliedFilterItems").append(filterDiv);
    }

TM.Gui.AppliedFiltersList.handle_PinChange = function(text, title, pinnedImg)
    {
        pinnedImg.pinned = !pinnedImg.pinned;
        TM.Gui.AppliedFiltersList.set_Pinned(pinnedImg, pinnedImg.pinned);
        var hashCommand= title + ":" + text;
        var newHash = "#";
        newHash += (pinnedImg.pinned) ?  hashCommand : "";
        $.each(document.location.hash.substring(1).split("&"), function(index,value)
            {
                if (value != hashCommand && value !="")
                    newHash += ((newHash === "#") ? "" : "&") + value;
            });
        TM.Gui.Main.Panels.handleWindowHashChange = false;
        document.location.hash = newHash;
    }

TM.Gui.AppliedFiltersList.set_Pinned = function(pinnedImg, pinned)
    {
        if (pinned)
            pinnedImg.attr('src', '/Images/Pinned.png').width('19px').pinned = true;
        else
            pinnedImg.attr('src', '/Images/unPinned.png').width('14px').pinned=false;
    }

TM.Gui.AppliedFiltersList.populateAppliedFiltersTable = function ()
{

    if (isUndefined(TM.Gui.selectedNodeData))
        return;
    TM.Gui.AppliedFiltersList.clear_FiltersGui();


    $.each(TM.Gui.AppliedFilters.currentPivotPanelFilters, function()
        {
            TM.Gui.AppliedFiltersList.add_Filter(this.text, this.title, this.column, true, this.pinned);
        })

    if (TM.Gui.DataTable.currentTextFilter != "") //escape
        TM.Gui.AppliedFiltersList.add_Filter(htmlEscape(TM.Gui.DataTable.currentTextFilter), 'Search', -1 , false, true);

    TM.Gui.AppliedFiltersList.fixCSS_appliedFilters();
}

TM.Gui.AppliedFiltersList.fixCSS_appliedFilters = function()
{
    try
    {
        if ( $.browser.msie )
        {
            //"AppliedFilterHeader".$().height(32);
            "AppliedFilterHeader".$().height(26);
            "ctl00_ContentPlaceHolder1_AppliedFilters1_RemoveFiltersImage".$()
                .absolute()
                .right(0)
                .top(5);
        }
        $("#AppliedFiltersPanel").width("97%")
        /*}
        else
        {
            "AppliedFiltersPanel".$().width('95%');
        }*/
    }
    catch(message) {}
}



function htmlEscape(str)
{
    return String(str)
            .replace(/&/g, '&amp;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#39;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;');
}


/**********************************
 *****    /javascript/TM.Gui/AppliedFilters.js
 **********************************/


    TM.Gui.AppliedFilters.currentPivotPanelFilters = new Array();
    TM.Gui.AppliedFilters.currentFilters = [];

    function setPivotPanelFilter(text,title, column, state, pinned, dontRaiseEvent_onBuildFiltersGui)
    {
        var updatedFilter = new Array();
        for (i=0; i < TM.Gui.AppliedFilters.currentPivotPanelFilters.length; i++)
        {
            var filter = TM.Gui.AppliedFilters.currentPivotPanelFilters[i];

            if (filter.text == text && filter.column == column)
            {
            }
            else if (filter.title == "Text Search")
            {
                if (column == 0)
                    filter.text = text;
                else
                    updatedFilter.push(filter);
            }
            else
            {
                updatedFilter.push(filter);
            }
        }

        TM.Gui.AppliedFilters.currentPivotPanelFilters = updatedFilter;

        if(state && text!= "")
        {
            TM.Gui.AppliedFilters.currentPivotPanelFilters.push( { 'text' : text , 'title' : title , 'column' : column , 'pinned' : pinned });
        }

        TM.Gui.AppliedFilters.currentFilters = [];
        for (i=0; i < TM.Gui.AppliedFilters.currentPivotPanelFilters.length; i++)
        {
            var filter = TM.Gui.AppliedFilters.currentPivotPanelFilters[i];
            if (typeof(TM.Gui.AppliedFilters.currentFilters[filter.column]) == "undefined")
                TM.Gui.AppliedFilters.currentFilters[filter.column] = filter.text;
            else
                TM.Gui.AppliedFilters.currentFilters[filter.column] += "|" + filter.text;
        }

        //setTimeout(TM.Gui.AppliedFiltersList.populateAppliedFiltersTable , 25);
        //if (TM.Gui.AppliedFilters.raise_onBuildFiltersGui)
        if (dontRaiseEvent_onBuildFiltersGui)
            return;
         TM.Events.onBuildFiltersGui()
    }




function buildPivotPanel(pivotPanelData)
{
    if (typeof("PivotPanelTemplate".$())!= "undefined")
    {
        var divName = "pivotPanel_" + pivotPanelData.title;
        jQuery('#pivotPanels').append("<div id='" + divName  + "'></div>");
        jQuery('#' + divName).setTemplate("PivotPanelTemplate".$().html());
        jQuery('#' + divName).processTemplate(pivotPanelData);
    }
}

TM.Gui.AppliedFilters.getFilterDataObject = function (arrayWithSelectedItems, arrayWithAllData, arrayWithFilteredData,  title, index)
    {
        var filterDataObject =
            {
                title:title,
                column: index,
                itemsAvail: [],
                itemsNotAvail: []
            }
        if (arrayWithAllData.length === 0) // there is nothing to do
            return filterDataObject;

        var selectedFilter = arrayWithSelectedItems[index];

        //items Checked
        if (typeof(selectedFilter) == "undefined" ||  selectedFilter== null)
            selectedFilter = "";
        if 	(selectedFilter=="")
            var itemsChecked = [];
        else
            var itemsChecked = selectedFilter.split('|');
        _itemsChecked = itemsChecked;
        itemsAvail = [];
        itemsNotAvailRaw = getDistictColumnValue(arrayWithAllData,index);
        var gotAtLeastOneMatch = false;
        $.each(getDistictColumnValue(arrayWithFilteredData,index).sort(), function(index,value)
            {
                var checked = itemsChecked.has(value);
                itemsAvail.push({ text : value , checked : checked  });
                itemsNotAvailRaw = removeFromArray(itemsNotAvailRaw, value);
                if (checked)
                    gotAtLeastOneMatch = true;
            });
        // handle the case where there is no match for a value provided in the filter
        if (gotAtLeastOneMatch === false && itemsChecked.length > 0)
        {
            itemsAvail = [];
            itemsNotAvailRaw = getDistictColumnValue(arrayWithAllData,index);
            TM.WebServices.Data.lastDataTableData.aaData = []
        }
        itemsNotAvail = [];
        itemsNotAvailRaw.sort();
        $.each(itemsNotAvailRaw, function(index,value)
            {
                var checked = itemsChecked.has(value);
                itemsNotAvail.push({ text : value , checked : checked  });
            });

        //currentFilter
        filterDataObject.itemsAvail = itemsAvail;
        filterDataObject.itemsNotAvail = itemsNotAvail;

        return filterDataObject;
    }

function getTempFilterResult(index)
    {
        var aaData = TM.WebServices.Data.lastDataTableData.aaData;
        var tempFilter = TM.Gui.AppliedFilters.currentFilters[index];
        TM.Gui.AppliedFilters.currentFilters[index] = "";
        var filterResult  = TM.Gui.AppliedFilters.applyDataTableFilter_using_PivotPanelFilters(aaData, queryTo_filterDataTable , TM.Gui.AppliedFilters.currentFilters );
        TM.Gui.AppliedFilters.currentFilters[index] = tempFilter;
        return filterResult;
    }

var updatingFilters = false
TM.Gui.AppliedFilters.refresh = function () {};

TM.Gui.AppliedFilters.showFilters = function(arrayWithSelectedItems, arrayWithAllData, arrayWithFilteredData, raise_onAppliedFieldsEnd)
    {
        TM.Gui.AppliedFilters.refresh = function() { TM.Gui.AppliedFilters.showFilters(arrayWithSelectedItems, arrayWithAllData, arrayWithFilteredData, false); };

        //console.log("-------------showFilters	-------- for: " + arrayWithAllData.length);
        $("#pivotPanels input").parent().css('opacity', '0.5')

        var startTime = new Date();
        TM.abortTableDataLoad = true;
        if (updatingFilters)
        {
            setTimeout(function()
                {
                    //console.log("after wait: updatingFilters");
                    TM.Gui.AppliedFilters.showFilters(arrayWithSelectedItems, arrayWithAllData, arrayWithFilteredData,raise_onAppliedFieldsEnd)
                }, 200);;
            //console.log("updatingFilters");
            return;
        }

        updatingFilters = true;
        filterData = []
        var timeOutInterval = 5;
        setTimeout(function(){
            filterData.push(TM.Gui.AppliedFilters.getFilterDataObject(arrayWithSelectedItems, arrayWithAllData, getTempFilterResult(2), "Technology", 2));

        setTimeout(function(){
            filterData.push(TM.Gui.AppliedFilters.getFilterDataObject(arrayWithSelectedItems, arrayWithAllData, getTempFilterResult(3), "Phase", 3));

        setTimeout(function(){
            filterData.push(TM.Gui.AppliedFilters.getFilterDataObject(arrayWithSelectedItems, arrayWithAllData, getTempFilterResult(4), "Type", 4));

        setTimeout(function(){
            filterData.push(TM.Gui.AppliedFilters.getFilterDataObject(arrayWithSelectedItems, arrayWithAllData, getTempFilterResult(5), "Category", 5));

        setTimeout(function(){

            $.each(filterData, function(index, filterDataEntry)
                { buildPivotPanel(filterDataEntry) } );

        setTimeout(function(){

            //var aaData = TM.Gui.AppliedFilters.applyDataTableFilter_using_PivotPanelFilters(TM.WebServices.Data.filteredDataTable.aaData, queryTo_filterDataTable , TM.Gui.AppliedFilters.currentFilters );
            //apply the text filter =
            var aaData = TM.Gui.AppliedFilters.applyDataTableFilter_using_PivotPanelFilters(TM.WebServices.Data.lastDataTableData.aaData, queryTo_filterDataTable , TM.Gui.AppliedFilters.currentFilters );

            //TM.showFilter_cssFixes();

        setTimeout(function(){

            TM.WebServices.Data.filteredDataTable = {};
            TM.WebServices.Data.filteredDataTable.aoColumns = TM.WebServices.Data.lastDataTableData.aoColumns;
            TM.WebServices.Data.filteredDataTable.aaData = aaData;


            //raise event
            updatingFilters = false;
            TM.Debug.TimeSpan_Gui_AppliedFilters_ShowFilters = startTime.toNow();
            if (raise_onAppliedFieldsEnd)
                TM.Events.onAppliedFieldsEnd();

            //run text search (which will also trigger a table
    //            TM.Gui.TextSearch.getValueAndApplyGlobalFilter();


        },timeOutInterval)
        },timeOutInterval)
        },timeOutInterval)
        },timeOutInterval)
        },timeOutInterval)
        },timeOutInterval)
        },timeOutInterval);

    }

TM.Gui.AppliedFilters.buildFiltersGui = function ()
    {
        //this is now fired from the TM.Gui.AppliedFilters.buildFromSelectedNodeId method
        /*TM.Events.onBuildFiltersGui.enabled = false;
        TM.Gui.AppliedFilters.MapFiltersFromUrl();
        TM.Events.onBuildFiltersGui.enabled = true;
*/
        if (isDefined(TM.WebServices.Data.filteredDataTable) === false)
            return;

        var aaData = TM.WebServices.Data.filteredDataTable.aaData;

        filterResult = TM.Gui.AppliedFilters.applyDataTableFilter_using_PivotPanelFilters(aaData, queryTo_filterDataTable, TM.Gui.AppliedFilters.currentFilters);

        TM.Gui.AppliedFilters.showFilters(TM.Gui.AppliedFilters.currentFilters, aaData, filterResult, true);

        //TM.Gui.AppliedFilters.raise_onBuildFiltersGui = true;

        //TM.Gui.TextSearch.getValueAndApplyGlobalFilter();


        //TM.Events.onDisplayDataTable()
    }

TM.Gui.AppliedFilters.buildFromSelectedNodeId = function () {

    //this will reset the filters on node click
    TM.Gui.AppliedFilters.currentPivotPanelFilters = new Array(); 		// reset applied filters
    TM.Gui.AppliedFilters.currentFilters = [];

    var selectedNodeId = TM.Gui.selectedNodeId;
    TM.WebServices.Data.getGuidanceItemsInGuid_For_DataTable(selectedNodeId);

    //TM.Gui.AppliedFilters.buildFiltersGui();

    TM.Gui.AppliedFilters.MapFiltersFromUrl();

    TM.Events.onTextSearch();

}

/*$(window).bind('hashchange', function ()
    {
        TM.Gui.AppliedFilters.currentPivotPanelFilters = new Array();
        TM.Events.onTextSearch()
        //TM.Gui.AppliedFilters.buildFiltersGui();
        //TM.Gui.AppliedFilters.MapFiltersFromUrl();
    });*/


TM.Gui.AppliedFilters.add_Pinned_Filter = function(title, text)
    {
        var hashCommand= "&" + title + ":" + text;
        window.location.hash += hashCommand;
    }
TM.Gui.AppliedFilters.add_Filter_Technology = function(value, pinned)
    {
        if (pinned)
            TM.Gui.AppliedFilters.add_Pinned_Filter("Technology", value);
        else
            setPivotPanelFilter(value, "Technology", "2", true , false);
    }
TM.Gui.AppliedFilters.add_Filter_Phase = function(value, pinned)
    {
        if (pinned)
            TM.Gui.AppliedFilters.add_Pinned_Filter("Phase", value);
        else
            setPivotPanelFilter(value, "Phase", "3", true , false);
    }
TM.Gui.AppliedFilters.add_Filter_Type = function(value, pinned)
    {
        if (pinned)
            TM.Gui.AppliedFilters.add_Pinned_Filter("Type", value);
        else
            setPivotPanelFilter(value, "Type", "4", true , false);
    }
TM.Gui.AppliedFilters.add_Filter_Category = function(value, pinned)
    {
        if (pinned)
            TM.Gui.AppliedFilters.add_Pinned_Filter("Category", value);
        else
            setPivotPanelFilter(value, "Category", "5", true , false);
    }

TM.Gui.AppliedFilters.MapFiltersFromUrl = function ()
    {
        var commands = window.location.hash.slice(1).split("&");
        jQuery.each(commands, function () {
            var splitCommand = this.split(":");
            if (splitCommand.length == 2) {
                var command = splitCommand[0].toLowerCase();
                var value = splitCommand[1];
                switch (command) {
                    case "technology":
                        setPivotPanelFilter(value, "Technology", 2, true, true, true);
                        break;
                    case "phase":
                        setPivotPanelFilter(value, "Phase", 3, true, true, true);
                        break;
                    case "type":
                        setPivotPanelFilter(value, "Type", 4, true, true, true);
                        break;
                    case "category":
                        setPivotPanelFilter(value, "Category", 5, true , true, true);
                        break;
                }
            }
        });
    }



/**********************************
 *****    /javascript/TM.Gui/AppliedFIlters.DataManipulation.js
 **********************************/


//Generic Arrays


function getDistictColumnValue(arrayWithData, columnIndex)
{
    return jlinq.from(jlinq.from(arrayWithData)
                           .select(function(rec) { return rec[columnIndex] }))
                .distinct();
}

TM.Gui.AppliedFilters.applyDataTableFilter = function(targetArray, queryFunction, newFilter)
{
    if (typeof(newFilter) != "undefined")
        currentFilter = newFilter;
    if (isDefined(targetArray))
        return jlinq.from(targetArray).where(queryFunction).select();
}


TM.Gui.AppliedFilters.applyDataTableFilter_using_PivotPanelFilters = function (targetArray, queryFunction, newFilter)
{
    return TM.Gui.AppliedFilters.applyDataTableFilter(targetArray, queryFunction, newFilter);
}

function removeArrayFromArray(sourceArray, toRemoveArray)
{
    return jlinq.from(sourceArray)
                .where(function(rec)
                    {
                        asd = toRemoveArray;
                        if (typeof(rec) != "undefined" && rec !="" && rec != null)
                            return ! toRemoveArray.has(rec);
                        return true;
                    })
                .select()
}

function removeFromArray(sourceArray, itemToRemove)
{
    return jlinq.from(sourceArray)
                .where(function(rec)
                    {
                        if (typeof(rec) != "undefined" && rec !="" && rec != null)
                            return rec != itemToRemove;
                        return true;
                    })
                .select()
}



//linq query to filter database
queryTo_filterDataTable = function (rec)
{
    if (currentFilter =="")
        return true;
   var expectedMatches = 0;
   var matches = 0;
    for(var i = 2 ;  i < 6 ; i++)
    {
         var  filter = currentFilter[i];
         if (typeof(filter) != "undefined" && filter !="" && filter != null)
         {
            expectedMatches ++
            $.each(filter.split('|'), function(index , subFilter)  //supports multiple technology filters
            {
                if (rec[i] == subFilter)
                    matches ++;
            });
         }
    }
    return expectedMatches  == matches ;
}

//extensionMethod

Array.prototype.has=
    function(v,i)
    {
        for (var j=0;j<this.length;j++)
        {
            if (this[j]==v)
                return true;
        }
        return false;
    }


/**********************************
 *****    /javascript/gAnalytics/TrackingCode.js
 **********************************/



if (TM.Tracking_Google_Analytics_ID == null)
	console.log("Google Analytics is disabled");
else
{
	console.log("Google Analytics is Enabled to id: " + TM.Tracking_Google_Analytics_ID);
	var _gaq = _gaq || [];
	_gaq.push(['_setAccount', TM.Tracking_Google_Analytics_ID]);
	_gaq.push(['_trackPageview']);
}
/*(function()
{
	console.log("Tracking code: " + TM.Tracking_Google_Analytics_ID);
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = "/javascript/gAnalytics/ga.js";
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();*/



/**********************************
 *****    /javascript/gAnalytics/ga.js
 **********************************/


(function(){var g=void 0,h=!0,i=null,l=!1,aa=encodeURIComponent,ba=Infinity,ca=setTimeout,da=isNaN,m=Math,ea=decodeURIComponent;function ha(a,b){return a.name=b}
var n="push",ia="test",ja="slice",p="replace",ka="load",la="floor",ma="charAt",na="value",q="indexOf",oa="match",pa="port",qa="createElement",ra="path",r="name",u="host",v="toString",w="length",x="prototype",sa="clientWidth",y="split",ta="stopPropagation",ua="scope",z="location",va="search",A="protocol",wa="clientHeight",xa="href",B="substring",ya="apply",za="navigator",C="join",D="toLowerCase",E;function Aa(a,b){switch(b){case 0:return""+a;case 1:return 1*a;case 2:return!!a;case 3:return 1E3*a}return a}function Ba(a){return"function"==typeof a}function Ca(a){return a!=g&&-1<(a.constructor+"")[q]("String")}function F(a,b){return g==a||"-"==a&&!b||""==a}function Da(a){if(!a||""==a)return"";for(;a&&-1<" \n\r\t"[q](a[ma](0));)a=a[B](1);for(;a&&-1<" \n\r\t"[q](a[ma](a[w]-1));)a=a[B](0,a[w]-1);return a}function Ea(){return m.round(2147483647*m.random())}function Fa(){}
function G(a,b){if(aa instanceof Function)return b?encodeURI(a):aa(a);H(68);return escape(a)}function I(a){a=a[y]("+")[C](" ");if(ea instanceof Function)try{return ea(a)}catch(b){H(17)}else H(68);return unescape(a)}var Ga=function(a,b,c,d){a.addEventListener?a.addEventListener(b,c,!!d):a.attachEvent&&a.attachEvent("on"+b,c)},Ha=function(a,b,c,d){a.removeEventListener?a.removeEventListener(b,c,!!d):a.detachEvent&&a.detachEvent("on"+b,c)};
function Ia(a,b){if(a){var c=J[qa]("script");c.type="text/javascript";c.async=h;c.src=a;c.id=b;var d=J.getElementsByTagName("script")[0];d.parentNode.insertBefore(c,d);return c}}function K(a){return a&&0<a[w]?a[0]:""}function L(a){var b=a?a[w]:0;return 0<b?a[b-1]:""}var Ja=function(){this.prefix="ga.";this.R={}};Ja[x].set=function(a,b){this.R[this.prefix+a]=b};Ja[x].get=function(a){return this.R[this.prefix+a]};Ja[x].contains=function(a){return this.get(a)!==g};function Ka(a){0==a[q]("www.")&&(a=a[B](4));return a[D]()}function La(a,b){var c,d={url:a,protocol:"http",host:"",path:"",d:new Ja,anchor:""};if(!a)return d;c=a[q]("://");0<=c&&(d.protocol=a[B](0,c),a=a[B](c+3));c=a[va]("/|\\?|#");if(0<=c)d.host=a[B](0,c)[D](),a=a[B](c);else return d.host=a[D](),d;c=a[q]("#");0<=c&&(d.anchor=a[B](c+1),a=a[B](0,c));c=a[q]("?");0<=c&&(Na(d.d,a[B](c+1)),a=a[B](0,c));d.anchor&&b&&Na(d.d,d.anchor);a&&"/"==a[ma](0)&&(a=a[B](1));d.path=a;return d}
function Oa(a,b){function c(a){var b=(a.hostname||"")[y](":")[0][D](),c=(a[A]||"")[D](),c=1*a[pa]||("http:"==c?80:"https:"==c?443:"");a=a.pathname||"";0==a[q]("/")||(a="/"+a);return[b,""+c,a]}var d=b||J[qa]("a");d.href=J[z][xa];var e=(d[A]||"")[D](),f=c(d),j=d[va]||"",k=e+"//"+f[0]+(f[1]?":"+f[1]:"");0==a[q]("//")?a=e+a:0==a[q]("/")?a=k+a:!a||0==a[q]("?")?a=k+f[2]+(a||j):0>a[y]("/")[0][q](":")&&(a=k+f[2][B](0,f[2].lastIndexOf("/"))+"/"+a);d.href=a;e=c(d);return{protocol:(d[A]||"")[D](),host:e[0],
port:e[1],path:e[2],Oa:d[va]||"",url:a||""}}function Na(a,b){function c(b,c){a.contains(b)||a.set(b,[]);a.get(b)[n](c)}for(var d=Da(b)[y]("&"),e=0;e<d[w];e++)if(d[e]){var f=d[e][q]("=");0>f?c(d[e],"1"):c(d[e][B](0,f),d[e][B](f+1))}}function Pa(a,b){if(F(a)||"["==a[ma](0)&&"]"==a[ma](a[w]-1))return"-";var c=J.domain;return a[q](c+(b&&"/"!=b?b:""))==(0==a[q]("http://")?7:0==a[q]("https://")?8:0)?"0":a};var Qa=0;function Ra(a,b,c){!(1<=Qa)&&!(1<=100*m.random())&&(a=["utmt=error","utmerr="+a,"utmwv=5.3.9","utmn="+Ea(),"utmsp=1"],b&&a[n]("api="+b),c&&a[n]("msg="+G(c[B](0,100))),M.w&&a[n]("aip=1"),Sa(a[C]("&")),Qa++)};var Ta=0,Ua={};function N(a){return Va("x"+Ta++,a)}function Va(a,b){Ua[a]=!!b;return a}
var Wa=N(),Xa=Va("anonymizeIp"),Ya=N(),$a=N(),ab=N(),bb=N(),O=N(),P=N(),cb=N(),db=N(),eb=N(),fb=N(),gb=N(),hb=N(),ib=N(),jb=N(),kb=N(),lb=N(),nb=N(),ob=N(),pb=N(),qb=N(),rb=N(),sb=N(),tb=N(),ub=N(),vb=N(),wb=N(),xb=N(),yb=N(),zb=N(),Ab=N(),Bb=N(),Cb=N(),Db=N(),Eb=N(),Fb=N(h),Gb=Va("currencyCode"),Hb=Va("page"),Ib=Va("title"),Jb=N(),Kb=N(),Lb=N(),Mb=N(),Nb=N(),Ob=N(),Pb=N(),Qb=N(),Rb=N(),Q=N(h),Sb=N(h),Tb=N(h),Ub=N(h),Vb=N(h),Wb=N(h),Zb=N(h),$b=N(h),ac=N(h),bc=N(h),cc=N(h),R=N(h),dc=N(h),ec=N(h),fc=
N(h),gc=N(h),hc=N(h),ic=N(h),jc=N(h),S=N(h),kc=N(h),lc=N(h),mc=N(h),nc=N(h),oc=N(h),pc=N(h),qc=N(h),rc=Va("campaignParams"),sc=N(),tc=Va("hitCallback"),uc=N();N();var vc=N(),wc=N(),xc=N(),yc=N(),zc=N(),Ac=N(),Bc=N(),Cc=N(),Dc=N(),Ec=N(),Fc=N(),Gc=N(),Hc=N(),Ic=N();N();var Mc=N(),Nc=N(),Oc=N();function Pc(a){var b=this.plugins_;if(b)return b.get(a)}var T=function(a,b,c,d){a[b]=function(){try{return d!=g&&H(d),c[ya](this,arguments)}catch(a){throw Ra("exc",b,a&&a[r]),a;}}},Qc=function(a,b,c,d){U[x][a]=function(){try{return H(c),Aa(this.a.get(b),d)}catch(e){throw Ra("exc",a,e&&e[r]),e;}}},V=function(a,b,c,d,e){U[x][a]=function(f){try{H(c),e==g?this.a.set(b,Aa(f,d)):this.a.set(b,e)}catch(j){throw Ra("exc",a,j&&j[r]),j;}}};var Rc=RegExp(/(^|\.)doubleclick\.net$/i),Sc=function(a,b){return Rc[ia](J[z].hostname)?h:"/"!==b?l:(0==a[q]("www.google.")||0==a[q](".google.")||0==a[q]("google."))&&!(-1<a[q]("google.org"))?h:l},Tc=function(a){var b=a.get(bb),c=a.c(P,"/");Sc(b,c)&&a[ta]()};var Zc=function(){var a={},b={},c=new Uc;this.g=function(a,b){c.add(a,b)};var d=new Uc;this.e=function(a,b){d.add(a,b)};var e=l,f=l,j=h;this.T=function(){e=h};this.j=function(a){this[ka]();this.set(sc,a,h);a=new Vc(this);e=l;d.execute(this);e=h;b={};this.n();a.Ja()};this.load=function(){e&&(e=l,this.Ka(),Wc(this),f||(f=h,c.execute(this),Xc(this),Wc(this)),e=h)};this.n=function(){if(e)if(f)e=l,Xc(this),e=h;else this[ka]()};this.get=function(c){Ua[c]&&this[ka]();return b[c]!==g?b[c]:a[c]};this.set=
function(c,d,e){Ua[c]&&this[ka]();e?b[c]=d:a[c]=d;Ua[c]&&this.n()};this.z=function(b){a[b]=this.b(b,0)+1};this.b=function(a,b){var c=this.get(a);return c==g||""===c?b:1*c};this.c=function(a,b){var c=this.get(a);return c==g?b:c+""};this.Ka=function(){if(j){var b=this.c(bb,""),c=this.c(P,"/");Sc(b,c)||(a[O]=a[hb]&&""!=b?Yc(b):1,j=l)}}};Zc[x].stopPropagation=function(){throw"aborted";};
var Vc=function(a){var b=this;this.q=0;var c=a.get(tc);this.Ua=function(){0<b.q&&c&&(b.q--,b.q||c())};this.Ja=function(){!b.q&&c&&ca(c,10)};a.set(uc,b,h)};function $c(a,b){b=b||[];for(var c=0;c<b[w];c++){var d=b[c];if(""+a==d||0==d[q](a+"."))return d}return"-"}
var bd=function(a,b,c){c=c?"":a.c(O,"1");b=b[y](".");if(6!==b[w]||ad(b[0],c))return l;c=1*b[1];var d=1*b[2],e=1*b[3],f=1*b[4];b=1*b[5];if(!(0<=c&&0<d&&0<e&&0<f&&0<=b))return l;a.set(Q,c);a.set(Vb,d);a.set(Wb,e);a.set(Zb,f);a.set($b,b);return h},cd=function(a){var b=a.get(Q),c=a.get(Vb),d=a.get(Wb),e=a.get(Zb),f=a.b($b,1);return[a.b(O,1),b!=g?b:"-",c||"-",d||"-",e||"-",f][C](".")},dd=function(a){return[a.b(O,1),a.b(cc,0),a.b(R,1),a.b(dc,0)][C](".")},ed=function(a,b,c){c=c?"":a.c(O,"1");var d=b[y](".");
if(4!==d[w]||ad(d[0],c))d=i;a.set(cc,d?1*d[1]:0);a.set(R,d?1*d[2]:10);a.set(dc,d?1*d[3]:a.get(ab));return d!=i||!ad(b,c)},fd=function(a,b){var c=G(a.c(Tb,"")),d=[],e=a.get(Fb);if(!b&&e){for(var f=0;f<e[w];f++){var j=e[f];j&&1==j[ua]&&d[n](f+"="+G(j[r])+"="+G(j[na])+"=1")}0<d[w]&&(c+="|"+d[C]("^"))}return c?a.b(O,1)+"."+c:i},gd=function(a,b,c){c=c?"":a.c(O,"1");b=b[y](".");if(2>b[w]||ad(b[0],c))return l;b=b[ja](1)[C](".")[y]("|");0<b[w]&&a.set(Tb,I(b[0]));if(1>=b[w])return h;b=b[1][y](-1==b[1][q](",")?
"^":",");for(c=0;c<b[w];c++){var d=b[c][y]("=");if(4==d[w]){var e={};ha(e,I(d[1]));e.value=I(d[2]);e.scope=1;a.get(Fb)[d[0]]=e}}return h},hd=function(a){var b;b=function(b,e){if(!F(a.get(b))){var f=a.c(b,""),f=f[y](" ")[C]("%20"),f=f[y]("+")[C]("%20");c[n](e+"="+f)}};var c=[];b(ic,"utmcid");b(nc,"utmcsr");b(S,"utmgclid");b(kc,"utmgclsrc");b(lc,"utmdclid");b(mc,"utmdsid");b(jc,"utmccn");b(oc,"utmcmd");b(pc,"utmctr");b(qc,"utmcct");return(b=c[C]("|"))?[a.b(O,1),a.b(ec,0),a.b(fc,1),a.b(gc,1),b][C]("."):
""},id=function(a,b,c){c=c?"":a.c(O,"1");b=b[y](".");if(5>b[w]||ad(b[0],c))return a.set(ec,g),a.set(fc,g),a.set(gc,g),a.set(ic,g),a.set(jc,g),a.set(nc,g),a.set(oc,g),a.set(pc,g),a.set(qc,g),a.set(S,g),a.set(kc,g),a.set(lc,g),a.set(mc,g),l;a.set(ec,1*b[1]);a.set(fc,1*b[2]);a.set(gc,1*b[3]);var d=b[ja](4)[C](".");b=function(a){return(a=d[oa](a+"=(.*?)(?:\\|utm|$)"))&&2==a[w]?a[1]:g};c=function(b,c){c?(c=e?I(c):c[y]("%20")[C](" "),a.set(b,c)):a.set(b,g)};-1==d[q]("=")&&(d=I(d));var e="2"==b("utmcvr");
c(ic,b("utmcid"));c(jc,b("utmccn"));c(nc,b("utmcsr"));c(oc,b("utmcmd"));c(pc,b("utmctr"));c(qc,b("utmcct"));c(S,b("utmgclid"));c(kc,b("utmgclsrc"));c(lc,b("utmdclid"));c(mc,b("utmdsid"));return h},ad=function(a,b){return b?a!=b:!/^\d+$/[ia](a)};var Uc=function(){this.filters=[]};Uc[x].add=function(a,b){this.filters[n]({name:a,s:b})};Uc[x].execute=function(a){try{for(var b=0;b<this.filters[w];b++)this.filters[b].s.call(W,a)}catch(c){}};function jd(a){100!=a.get(vb)&&a.get(Q)%1E4>=100*a.get(vb)&&a[ta]()}function kd(a){ld(a.get(Wa))&&a[ta]()}function md(a){"file:"==J[z][A]&&a[ta]()}function nd(a){a.get(Ib)||a.set(Ib,J.title,h);a.get(Hb)||a.set(Hb,J[z].pathname+J[z][va],h)};var od=new function(){var a=[];this.set=function(b){a[b]=h};this.Xa=function(){for(var b=[],c=0;c<a[w];c++)a[c]&&(b[m[la](c/6)]=b[m[la](c/6)]^1<<c%6);for(c=0;c<b[w];c++)b[c]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"[ma](b[c]||0);return b[C]("")+"~"}};function H(a){od.set(a)};var W=window,J=document,ld=function(a){var b=W._gaUserPrefs;return b&&b.ioo&&b.ioo()||!!a&&W["ga-disable-"+a]===h},pd=function(a){var b=[],c=J.cookie[y](";");a=RegExp("^\\s*"+a+"=\\s*(.*?)\\s*$");for(var d=0;d<c[w];d++){var e=c[d][oa](a);e&&b[n](e[1])}return b},X=function(a,b,c,d,e,f){e=ld(e)?l:Sc(d,c)?l:h;if(e){if(b&&0<=W[za].userAgent[q]("Firefox")){b=b[p](/\n|\r/g," ");e=0;for(var j=b[w];e<j;++e){var k=b.charCodeAt(e)&255;if(10==k||13==k)b=b[B](0,e)+"?"+b[B](e+1)}}b&&2E3<b[w]&&(b=b[B](0,2E3),H(69));
a=a+"="+b+"; path="+c+"; ";f&&(a+="expires="+(new Date((new Date).getTime()+f)).toGMTString()+"; ");d&&(a+="domain="+d+";");J.cookie=a}};var qd,rd,sd=function(){if(!qd){var a={},b=W[za],c=W.screen;a.Q=c?c.width+"x"+c.height:"-";a.P=c?c.colorDepth+"-bit":"-";a.language=(b&&(b.language||b.browserLanguage)||"-")[D]();a.javaEnabled=b&&b.javaEnabled()?1:0;a.characterSet=J.characterSet||J.charset||"-";try{var d;var e=J.documentElement,f=J.body,j=f&&f[sa]&&f[wa],b=[];e&&(e[sa]&&e[wa])&&("CSS1Compat"===J.compatMode||!j)?b=[e[sa],e[wa]]:j&&(b=[f[sa],f[wa]]);d=0>=b[0]||0>=b[1]?"":b[C]("x");a.Wa=d}catch(k){H(135)}qd=a}},td=function(){sd();for(var a=
qd,b=W[za],a=b.appName+b.version+a.language+b.platform+b.userAgent+a.javaEnabled+a.Q+a.P+(J.cookie?J.cookie:"")+(J.referrer?J.referrer:""),b=a[w],c=W.history[w];0<c;)a+=c--^b++;return Yc(a)},ud=function(a){sd();var b=qd;a.set(Lb,b.Q);a.set(Mb,b.P);a.set(Pb,b.language);a.set(Qb,b.characterSet);a.set(Nb,b.javaEnabled);a.set(Rb,b.Wa);if(a.get(ib)&&a.get(jb)){if(!(b=rd)){var c,d,e;d="ShockwaveFlash";if((b=(b=W[za])?b.plugins:g)&&0<b[w])for(c=0;c<b[w]&&!e;c++)d=b[c],-1<d[r][q]("Shockwave Flash")&&(e=d.description[y]("Shockwave Flash ")[1]);
else{d=d+"."+d;try{c=new ActiveXObject(d+".7"),e=c.GetVariable("$version")}catch(f){}if(!e)try{c=new ActiveXObject(d+".6"),e="WIN 6,0,21,0",c.AllowScriptAccess="always",e=c.GetVariable("$version")}catch(j){}if(!e)try{c=new ActiveXObject(d),e=c.GetVariable("$version")}catch(k){}e&&(e=e[y](" ")[1][y](","),e=e[0]+"."+e[1]+" r"+e[2])}b=e?e:"-"}rd=b;a.set(Ob,rd)}else a.set(Ob,"-")};var vd=function(a){if(Ba(a))this.s=a;else{var b=a[0],c=b.lastIndexOf(":"),d=b.lastIndexOf(".");this.h=this.i=this.l="";-1==c&&-1==d?this.h=b:-1==c&&-1!=d?(this.i=b[B](0,d),this.h=b[B](d+1)):-1!=c&&-1==d?(this.l=b[B](0,c),this.h=b[B](c+1)):c>d?(this.i=b[B](0,d),this.l=b[B](d+1,c),this.h=b[B](c+1)):(this.i=b[B](0,d),this.h=b[B](d+1));this.k=a[ja](1);this.Ma=!this.l&&"_require"==this.h;this.J=!this.i&&!this.l&&"_provide"==this.h}},Y=function(){T(Y[x],"push",Y[x][n],5);T(Y[x],"_getPlugin",Pc,121);T(Y[x],
"_createAsyncTracker",Y[x].Sa,33);T(Y[x],"_getAsyncTracker",Y[x].Ta,34);this.I=new Ja;this.p=[]};E=Y[x];E.Na=function(a,b,c){var d=this.I.get(a);if(!Ba(d))return l;b.plugins_=b.plugins_||new Ja;b.plugins_.set(a,new d(b,c||{}));return h};E.push=function(a){var b=Z.Va[ya](this,arguments),b=Z.p.concat(b);for(Z.p=[];0<b[w]&&!Z.O(b[0])&&!(b.shift(),0<Z.p[w]););Z.p=Z.p.concat(b);return 0};E.Va=function(a){for(var b=[],c=0;c<arguments[w];c++)try{var d=new vd(arguments[c]);d.J?this.O(d):b[n](d)}catch(e){}return b};
E.O=function(a){try{if(a.s)a.s[ya](W);else if(a.J)this.I.set(a.k[0],a.k[1]);else{var b="_gat"==a.i?M:"_gaq"==a.i?Z:M.u(a.i);if(a.Ma){if(!this.Na(a.k[0],b,a.k[2])){if(!a.Pa){var c=Oa(""+a.k[1]);var d=c[A],e=J[z][A];var f;if(f="https:"==d||d==e?h:"http:"!=d?l:"http:"==e){var j;a:{var k=Oa(J[z][xa]);if(!(c.Oa||0<=c.url[q]("?")||0<=c[ra][q]("://")||c[u]==k[u]&&c[pa]==k[pa]))for(var s="http:"==c[A]?80:443,t=M.S,b=0;b<t[w];b++)if(c[u]==t[b][0]&&(c[pa]||s)==(t[b][1]||s)&&0==c[ra][q](t[b][2])){j=h;break a}j=
l}f=j&&!ld()}f&&(a.Pa=Ia(c.url))}return h}}else a.l&&(b=b.plugins_.get(a.l)),b[a.h][ya](b,a.k)}}catch(Za){}};E.Sa=function(a,b){return M.r(a,b||"")};E.Ta=function(a){return M.u(a)};var yd=function(){function a(a,b,c,d){g==f[a]&&(f[a]={});g==f[a][b]&&(f[a][b]=[]);f[a][b][c]=d}function b(a,b,c){if(g!=f[a]&&g!=f[a][b])return f[a][b][c]}function c(a,b){if(g!=f[a]&&g!=f[a][b]){f[a][b]=g;var c=h,d;for(d=0;d<j[w];d++)if(g!=f[a][j[d]]){c=l;break}c&&(f[a]=g)}}function d(a){var b="",c=l,d,e;for(d=0;d<j[w];d++)if(e=a[j[d]],g!=e){c&&(b+=j[d]);for(var c=[],f=g,ga=g,ga=0;ga<e[w];ga++)if(g!=e[ga]){f="";ga!=mb&&g==e[ga-1]&&(f+=ga[v]()+Za);for(var Cd=e[ga],Jc="",Yb=g,Kc=g,Lc=g,Yb=0;Yb<Cd[w];Yb++)Kc=
Cd[ma](Yb),Lc=Ma[Kc],Jc+=g!=Lc?Lc:Kc;f+=Jc;c[n](f)}b+=k+c[C](t)+s;c=l}else c=h;return b}var e=this,f=[],j=["k","v"],k="(",s=")",t="*",Za="!",Ma={"'":"'0"};Ma[s]="'1";Ma[t]="'2";Ma[Za]="'3";var mb=1;e.Ra=function(a){return g!=f[a]};e.A=function(){for(var a="",b=0;b<f[w];b++)g!=f[b]&&(a+=b[v]()+d(f[b]));return a};e.Qa=function(a){if(a==g)return e.A();for(var b=a.A(),c=0;c<f[w];c++)g!=f[c]&&!a.Ra(c)&&(b+=c[v]()+d(f[c]));return b};e.f=function(b,c,d){if(!wd(d))return l;a(b,"k",c,d);return h};e.o=function(b,
c,d){if(!xd(d))return l;a(b,"v",c,d[v]());return h};e.getKey=function(a,c){return b(a,"k",c)};e.N=function(a,c){return b(a,"v",c)};e.L=function(a){c(a,"k")};e.M=function(a){c(a,"v")};T(e,"_setKey",e.f,89);T(e,"_setValue",e.o,90);T(e,"_getKey",e.getKey,87);T(e,"_getValue",e.N,88);T(e,"_clearKey",e.L,85);T(e,"_clearValue",e.M,86)};function wd(a){return"string"==typeof a}function xd(a){return"number"!=typeof a&&(g==Number||!(a instanceof Number))||m.round(a)!=a||da(a)||a==ba?l:h};var zd=function(a){var b=W.gaGlobal;a&&!b&&(W.gaGlobal=b={});return b},Ad=function(){var a=zd(h).hid;a==i&&(a=Ea(),zd(h).hid=a);return a},Dd=function(a){a.set(Kb,Ad());var b=zd();if(b&&b.dh==a.get(O)){var c=b.sid;c&&("0"==c&&H(112),a.set(Zb,c),a.get(Sb)&&a.set(Wb,c));b=b.vid;a.get(Sb)&&b&&(b=b[y]("."),1*b[1]||H(112),a.set(Q,1*b[0]),a.set(Vb,1*b[1]))}};var Ed,Fd=function(a,b,c,d){var e=a.c(bb,""),f=a.c(P,"/");d=d!=g?d:a.b(cb,0);a=a.c(Wa,"");X(b,c,f,e,a,d)},Xc=function(a){var b=a.c(bb,"");a.b(O,1);var c=a.c(P,"/"),d=a.c(Wa,"");X("__utma",cd(a),c,b,d,a.get(cb));X("__utmb",dd(a),c,b,d,a.get(db));X("__utmc",""+a.b(O,1),c,b,d);var e=hd(a,h);e?X("__utmz",e,c,b,d,a.get(eb)):X("__utmz","",c,b,"",-1);(e=fd(a,l))?X("__utmv",e,c,b,d,a.get(cb)):X("__utmv","",c,b,"",-1)},Wc=function(a){var b=a.b(O,1);if(!bd(a,$c(b,pd("__utma"))))return a.set(Ub,h),l;var c=!ed(a,
$c(b,pd("__utmb")));a.set(bc,c);id(a,$c(b,pd("__utmz")));gd(a,$c(b,pd("__utmv")));Ed=!c;return h},Gd=function(a){!Ed&&!(0<pd("__utmb")[w])&&(X("__utmd","1",a.c(P,"/"),a.c(bb,""),a.c(Wa,""),1E4),0==pd("__utmd")[w]&&a[ta]())};var Jd=function(a){a.get(Q)==g?Hd(a):a.get(Ub)&&!a.get(Mc)?Hd(a):a.get(bc)&&Id(a)},Kd=function(a){a.get(hc)&&!a.get(ac)&&(Id(a),a.set(fc,a.get($b)))},Hd=function(a){var b=a.get(ab);a.set(Sb,h);a.set(Q,Ea()^td(a)&2147483647);a.set(Tb,"");a.set(Vb,b);a.set(Wb,b);a.set(Zb,b);a.set($b,1);a.set(ac,h);a.set(cc,0);a.set(R,10);a.set(dc,b);a.set(Fb,[]);a.set(Ub,l);a.set(bc,l)},Id=function(a){a.set(Wb,a.get(Zb));a.set(Zb,a.get(ab));a.z($b);a.set(ac,h);a.set(cc,0);a.set(R,10);a.set(dc,a.get(ab));a.set(bc,l)};var Ld="daum:q eniro:search_word naver:query pchome:q images.google:q google:q yahoo:p yahoo:q msn:q bing:q aol:query aol:q lycos:q lycos:query ask:q netscape:query cnn:query about:terms mamma:q voila:rdata virgilio:qs live:q baidu:wd alice:qs yandex:text najdi:q seznam:q rakuten:qt biglobe:q goo.ne:MT wp:szukaj onet:qt yam:k kvasir:q ozu:q terra:query rambler:query conduit:q babylon:q search-results:q avg:q comcast:q incredimail:q startsiden:q go.mail.ru:q search.centrum.cz:q 360.cn:q".split(" "),
Sd=function(a){if(a.get(kb)&&!a.get(Mc)){for(var b=!F(a.get(ic))||!F(a.get(nc))||!F(a.get(S))||!F(a.get(lc)),c={},d=0;d<Md[w];d++){var e=Md[d];c[e]=a.get(e)}(d=a.get(rc))?(H(149),e=new Ja,Na(e,d),d=e):d=La(J[z][xa],a.get(gb)).d;if(!("1"==L(d.get(a.get(ub)))&&b)){var f=d,j=function(b,c){c=c||"-";var d=L(f.get(a.get(b)));return d&&"-"!=d?I(d):c},d=L(f.get(a.get(nb)))||"-",e=L(f.get(a.get(qb)))||"-",k=L(f.get(a.get(pb)))||"-",s=L(f.get("gclsrc"))||"-",t=L(f.get("dclid"))||"-",Za=j(ob,"(not set)"),Ma=
j(rb,"(not set)"),mb=j(sb),j=j(tb);if(F(d)&&F(k)&&F(t)&&F(e))d=l;else{var Xb=!F(k)&&!F(s),Xb=F(e)&&(!F(t)||Xb),Bd=F(mb);if(Xb||Bd){var fa=Nd(a),fa=La(fa,h);if((fa=Od(a,fa))&&!F(fa[1]&&!fa[2]))Xb&&(e=fa[0]),Bd&&(mb=fa[1])}Pd(a,d,e,k,s,t,Za,Ma,mb,j);d=h}d=d||Qd(a);!d&&(!b&&a.get(ac))&&(Pd(a,g,"(direct)",g,g,g,"(direct)","(none)",g,g),d=h);if(d&&(a.set(hc,Rd(a,c)),b="(direct)"==a.get(nc)&&"(direct)"==a.get(jc)&&"(none)"==a.get(oc),a.get(hc)||a.get(ac)&&!b))a.set(ec,a.get(ab)),a.set(fc,a.get($b)),a.z(gc)}}},
Qd=function(a){var b=Nd(a),c=La(b,h);if(!(b!=g&&b!=i&&""!=b&&"0"!=b&&"-"!=b&&0<=b[q]("://"))||c&&-1<c[u][q]("google")&&c.d.contains("q")&&"cse"==c[ra])return l;if((b=Od(a,c))&&!b[2])return Pd(a,g,b[0],g,g,g,"(organic)","organic",b[1],g),h;if(b||!a.get(ac))return l;a:{for(var b=a.get(Bb),d=Ka(c[u]),e=0;e<b[w];++e)if(-1<d[q](b[e])){a=l;break a}Pd(a,g,d,g,g,g,"(referral)","referral",g,"/"+c[ra]);a=h}return a},Od=function(a,b){for(var c=a.get(zb),d=0;d<c[w];++d){var e=c[d][y](":");if(-1<b[u][q](e[0][D]())){var f=
b.d.get(e[1]);if(f&&(f=K(f),!f&&-1<b[u][q]("google.")&&(f="(not provided)"),!e[3]||-1<b.url[q](e[3]))){a:{for(var c=f,d=a.get(Ab),c=I(c)[D](),j=0;j<d[w];++j)if(c==d[j]){c=h;break a}c=l}return[e[2]||e[0],f,c]}}}return i},Pd=function(a,b,c,d,e,f,j,k,s,t){a.set(ic,b);a.set(nc,c);a.set(S,d);a.set(kc,e);a.set(lc,f);a.set(jc,j);a.set(oc,k);a.set(pc,s);a.set(qc,t)},Md=[jc,ic,S,lc,nc,oc,pc,qc],Rd=function(a,b){function c(a){a=(""+a)[y]("+")[C]("%20");return a=a[y](" ")[C]("%20")}function d(c){var d=""+(a.get(c)||
"");c=""+(b[c]||"");return 0<d[w]&&d==c}if(d(S)||d(lc))return H(131),l;for(var e=0;e<Md[w];e++){var f=Md[e],j=b[f]||"-",f=a.get(f)||"-";if(c(j)!=c(f))return h}return l},Td=RegExp(/^https:\/\/(www\.)?google(\.com?)?(\.[a-z]{2}t?)?\/?$/i),Nd=function(a){a=Pa(a.get(Jb),a.get(P));try{if(Td[ia](a))return H(136),a+"?q="}catch(b){H(145)}return a};var Ud,Vd,Wd=function(a){Ud=a.c(S,"");Vd=a.c(kc,"")},Xd=function(a){var b=a.c(S,""),c=a.c(kc,"");b!=Ud&&(-1<c[q]("ds")?a.set(mc,g):!F(Ud)&&-1<Vd[q]("ds")&&a.set(mc,Ud))};var Zd=function(a){Yd(a,J[z][xa])?(a.set(Mc,h),H(12)):a.set(Mc,l)},Yd=function(a,b){if(!a.get(fb))return l;var c=La(b,a.get(gb)),d=K(c.d.get("__utma")),e=K(c.d.get("__utmb")),f=K(c.d.get("__utmc")),j=K(c.d.get("__utmx")),k=K(c.d.get("__utmz")),s=K(c.d.get("__utmv")),c=K(c.d.get("__utmk"));if(Yc(""+d+e+f+j+k+s)!=c){d=I(d);e=I(e);f=I(f);j=I(j);f=$d(d+e+f+j,k,s,c);if(!f)return l;k=f[0];s=f[1]}if(!bd(a,d,h))return l;ed(a,e,h);id(a,k,h);gd(a,s,h);ae(a,j,h);return h},ce=function(a,b,c){var d;d=cd(a)||"-";
var e=dd(a)||"-",f=""+a.b(O,1)||"-",j=be(a)||"-",k=hd(a,l)||"-";a=fd(a,l)||"-";var s=Yc(""+d+e+f+j+k+a),t=[];t[n]("__utma="+d);t[n]("__utmb="+e);t[n]("__utmc="+f);t[n]("__utmx="+j);t[n]("__utmz="+k);t[n]("__utmv="+a);t[n]("__utmk="+s);d=t[C]("&");if(!d)return b;e=b[q]("#");if(c)return 0>e?b+"#"+d:b+"&"+d;c="";f=b[q]("?");0<e&&(c=b[B](e),b=b[B](0,e));return 0>f?b+"?"+d+c:b+"&"+d+c},$d=function(a,b,c,d){for(var e=0;3>e;e++){for(var f=0;3>f;f++){if(d==Yc(a+b+c))return H(127),[b,c];var j=b[p](/ /g,"%20"),
k=c[p](/ /g,"%20");if(d==Yc(a+j+k))return H(128),[j,k];j=j[p](/\+/g,"%20");k=k[p](/\+/g,"%20");if(d==Yc(a+j+k))return H(129),[j,k];try{var s=b[oa]("utmctr=(.*?)(?:\\|utm|$)");if(s&&2==s[w]&&(j=b[p](s[1],G(I(s[1]))),d==Yc(a+j+c)))return H(139),[j,c]}catch(t){}b=I(b)}c=I(c)}};var de="|",fe=function(a,b,c,d,e,f,j,k,s){var t=ee(a,b);t||(t={},a.get(Cb)[n](t));t.id_=b;t.affiliation_=c;t.total_=d;t.tax_=e;t.shipping_=f;t.city_=j;t.state_=k;t.country_=s;t.items_=t.items_||[];return t},ge=function(a,b,c,d,e,f,j){a=ee(a,b)||fe(a,b,"",0,0,0,"","","");var k;a:{if(a&&a.items_){k=a.items_;for(var s=0;s<k[w];s++)if(k[s].sku_==c){k=k[s];break a}}k=i}s=k||{};s.transId_=b;s.sku_=c;s.name_=d;s.category_=e;s.price_=f;s.quantity_=j;k||a.items_[n](s);return s},ee=function(a,b){for(var c=
a.get(Cb),d=0;d<c[w];d++)if(c[d].id_==b)return c[d];return i};var he,ie=function(a){if(!he){var b;b=J[z].hash;var c=W[r],d=/^#?gaso=([^&]*)/;if(c=(b=(b=b&&b[oa](d)||c&&c[oa](d))?b[1]:K(pd("GASO")))&&b[oa](/^(?:!([-0-9a-z.]{1,40})!)?([-.\w]{10,1200})$/i))Fd(a,"GASO",""+b,0),M._gasoDomain=a.get(bb),M._gasoCPath=a.get(P),a=c[1],Ia("https://www.google.com/analytics/web/inpage/pub/inpage.js?"+(a?"prefix="+a+"&":"")+Ea(),"_gasojs");he=h}};var ae=function(a,b,c){c&&(b=I(b));c=a.b(O,1);b=b[y](".");!(2>b[w])&&/^\d+$/[ia](b[0])&&(b[0]=""+c,Fd(a,"__utmx",b[C]("."),g))},be=function(a,b){var c=$c(a.get(O),pd("__utmx"));"-"==c&&(c="");return b?G(c):c};var ke=function(a,b){var c=m.min(a.b(Dc,0),100);if(a.b(Q,0)%100>=c)return l;a:{if(c=(c=W.performance||W.webkitPerformance)&&c.timing){var d=c.navigationStart;if(0==d)H(133);else{c=[c.loadEventStart-d,c.domainLookupEnd-c.domainLookupStart,c.connectEnd-c.connectStart,c.responseStart-c.requestStart,c.responseEnd-c.responseStart,c.fetchStart-d,c.domInteractive-d,c.domContentLoadedEventStart-d];break a}}c=g}c||(W.top!=W?c=g:(d=(c=W.external)&&c.onloadT,c&&!c.isValidLoadTime&&(d=g),2147483648<d&&(d=g),
0<d&&c.setPageReadyTime(),c=d==g?g:[d]));if(c==g)return l;d=c[0];if(d==g||d==ba||da(d))return l;if(0<d){a:{for(d=1;d<c[w];d++)if(da(c[d])||c[d]==ba||0>c[d]){d=l;break a}d=h}d?b(je(c)):b(je(c[ja](0,1)))}else Ga(W,"load",function(){ke(a,b)},l);return h},me=function(a,b,c,d){var e=new yd;e.f(14,90,b[B](0,500));e.f(14,91,a[B](0,150));e.f(14,92,""+le(c));d!=g&&e.f(14,93,d[B](0,500));e.o(14,90,c);return e},le=function(a){return da(a)||0>a?0:5E3>a?10*m[la](a/10):5E4>a?100*m[la](a/100):41E5>a?1E3*m[la](a/
1E3):41E5},je=function(a){for(var b=new yd,c=0;c<a[w];c++)b.f(14,c+1,""+le(a[c])),b.o(14,c+1,a[c]);return b};var U=function(a,b,c){function d(a){return function(b){if((b=b.get(Nc)[a])&&b[w])for(var c={type:a,target:e,stopPropagation:function(){throw"aborted";}},d=0;d<b[w];d++)b[d].call(e,c)}}var e=this;this.a=new Zc;this.get=function(a){return this.a.get(a)};this.set=function(a,b,c){this.a.set(a,b,c)};this.set(Wa,b||"UA-XXXXX-X");this.set($a,a||"");this.set(Ya,c||"");this.set(ab,m.round((new Date).getTime()/1E3));this.set(P,"/");this.set(cb,63072E6);this.set(eb,15768E6);this.set(db,18E5);this.set(fb,l);
this.set(yb,50);this.set(gb,l);this.set(hb,h);this.set(ib,h);this.set(jb,h);this.set(kb,h);this.set(lb,h);this.set(ob,"utm_campaign");this.set(nb,"utm_id");this.set(pb,"gclid");this.set(qb,"utm_source");this.set(rb,"utm_medium");this.set(sb,"utm_term");this.set(tb,"utm_content");this.set(ub,"utm_nooverride");this.set(vb,100);this.set(Dc,1);this.set(Ec,l);this.set(wb,"/__utm.gif");this.set(xb,1);this.set(Cb,[]);this.set(Fb,[]);this.set(zb,Ld[ja](0));this.set(Ab,[]);this.set(Bb,[]);this.B("auto");this.set(Jb,
J.referrer);a=this.a;try{var f=La(J[z][xa],l),j=ea(L(f.d.get("utm_referrer")))||"";j&&a.set(Jb,j);var k=W.gaData&&W.gaData.expId;k||(k=ea(K(f.d.get("utm_expid")))||"");k&&a.set(Oc,""+k)}catch(s){H(146)}this.set(Nc,{hit:[],load:[]});this.a.g("0",Zd);this.a.g("1",Wd);this.a.g("2",Jd);this.a.g("3",Sd);this.a.g("4",Xd);this.a.g("5",Kd);this.a.g("6",d("load"));this.a.g("7",ie);this.a.e("A",kd);this.a.e("B",md);this.a.e("C",Jd);this.a.e("D",jd);this.a.e("E",Tc);this.a.e("F",ne);this.a.e("G",Gd);this.a.e("H",
nd);this.a.e("I",ud);this.a.e("J",Dd);this.a.e("K",d("hit"));this.a.e("L",oe);this.a.e("M",pe);0===this.get(ab)&&H(111);this.a.T();this.H=g};E=U[x];E.m=function(){var a=this.get(Db);a||(a=new yd,this.set(Db,a));return a};E.La=function(a){for(var b in a){var c=a[b];a.hasOwnProperty(b)&&this.set(b,c,h)}};E.K=function(a){if(this.get(Ec))return l;var b=this,c=ke(this.a,function(c){b.set(Hb,a,h);b.t(c)});this.set(Ec,c);return c};
E.Fa=function(a){a&&Ca(a)?(H(13),this.set(Hb,a,h)):"object"===typeof a&&a!==i&&this.La(a);this.H=a=this.get(Hb);this.a.j("page");this.K(a)};E.F=function(a,b,c,d,e){if(""==a||(!wd(a)||""==b||!wd(b))||c!=g&&!wd(c)||d!=g&&!xd(d))return l;this.set(wc,a,h);this.set(xc,b,h);this.set(yc,c,h);this.set(zc,d,h);this.set(vc,!!e,h);this.a.j("event");return h};
E.Ha=function(a,b,c,d,e){var f=this.a.b(Dc,0);1*e===e&&(f=e);if(this.a.b(Q,0)%100>=f)return l;c=1*(""+c);if(""==a||(!wd(a)||""==b||!wd(b)||!xd(c)||da(c)||0>c||0>f||100<f)||d!=g&&(""==d||!wd(d)))return l;this.t(me(a,b,c,d));return h};E.Ga=function(a,b,c,d){if(!a||!b)return l;this.set(Ac,a,h);this.set(Bc,b,h);this.set(Cc,c||J[z][xa],h);d&&this.set(Hb,d,h);this.a.j("social");return h};E.Ea=function(){this.set(Dc,10);this.K(this.H)};E.Ia=function(){this.a.j("trans")};
E.t=function(a){this.set(Eb,a,h);this.a.j("event")};E.ia=function(a){this.v();var b=this;return{_trackEvent:function(c,d,e){H(91);b.F(a,c,d,e)}}};E.ma=function(a){return this.get(a)};E.xa=function(a,b){if(a)if(Ca(a))this.set(a,b);else if("object"==typeof a)for(var c in a)a.hasOwnProperty(c)&&this.set(c,a[c])};E.addEventListener=function(a,b){var c=this.get(Nc)[a];c&&c[n](b)};E.removeEventListener=function(a,b){for(var c=this.get(Nc)[a],d=0;c&&d<c[w];d++)if(c[d]==b){c.splice(d,1);break}};E.qa=function(){return"5.3.9"};
E.B=function(a){this.get(hb);a="auto"==a?Ka(J.domain):!a||"-"==a||"none"==a?"":a[D]();this.set(bb,a)};E.va=function(a){this.set(hb,!!a)};E.na=function(a,b){return ce(this.a,a,b)};E.link=function(a,b){if(this.a.get(fb)&&a){var c=ce(this.a,a,b);J[z].href=c}};E.ua=function(a,b){this.a.get(fb)&&(a&&a.action)&&(a.action=ce(this.a,a.action,b))};
E.za=function(){this.v();var a=this.a,b=J.getElementById?J.getElementById("utmtrans"):J.utmform&&J.utmform.utmtrans?J.utmform.utmtrans:i;if(b&&b[na]){a.set(Cb,[]);for(var b=b[na][y]("UTM:"),c=0;c<b[w];c++){b[c]=Da(b[c]);for(var d=b[c][y](de),e=0;e<d[w];e++)d[e]=Da(d[e]);"T"==d[0]?fe(a,d[1],d[2],d[3],d[4],d[5],d[6],d[7],d[8]):"I"==d[0]&&ge(a,d[1],d[2],d[3],d[4],d[5],d[6])}}};E.$=function(a,b,c,d,e,f,j,k){return fe(this.a,a,b,c,d,e,f,j,k)};E.Y=function(a,b,c,d,e,f){return ge(this.a,a,b,c,d,e,f)};
E.Aa=function(a){de=a||"|"};E.ea=function(){this.set(Cb,[])};E.wa=function(a,b,c,d){var e=this.a;if(0>=a||a>e.get(yb))a=l;else if(!b||!c||128<b[w]+c[w])a=l;else{1!=d&&2!=d&&(d=3);var f={};ha(f,b);f.value=c;f.scope=d;e.get(Fb)[a]=f;a=h}a&&this.a.n();return a};E.ka=function(a){this.a.get(Fb)[a]=g;this.a.n()};E.ra=function(a){return(a=this.a.get(Fb)[a])&&1==a[ua]?a[na]:g};E.Ca=function(a,b,c){this.m().f(a,b,c)};E.Da=function(a,b,c){this.m().o(a,b,c)};E.sa=function(a,b){return this.m().getKey(a,b)};
E.ta=function(a,b){return this.m().N(a,b)};E.fa=function(a){this.m().L(a)};E.ga=function(a){this.m().M(a)};E.ja=function(){return new yd};E.W=function(a){a&&this.get(Ab)[n](a[D]())};E.ba=function(){this.set(Ab,[])};E.X=function(a){a&&this.get(Bb)[n](a[D]())};E.ca=function(){this.set(Bb,[])};E.Z=function(a,b,c,d,e){if(a&&b){a=[a,b[D]()][C](":");if(d||e)a=[a,d,e][C](":");d=this.get(zb);d.splice(c?0:d[w],0,a)}};E.da=function(){this.set(zb,[])};
E.ha=function(a){this.a[ka]();var b=this.get(P),c=be(this.a);this.set(P,a);this.a.n();ae(this.a,c);this.set(P,b)};E.ya=function(a,b){if(0<a&&5>=a&&Ca(b)&&""!=b){var c=this.get(Fc)||[];c[a]=b;this.set(Fc,c)}};E.V=function(a){a=""+a;if(a[oa](/^[A-Za-z0-9]{1,5}$/)){var b=this.get(Ic)||[];b[n](a);this.set(Ic,b)}};E.v=function(){this.a[ka]()};E.Ba=function(a){a&&""!=a&&(this.set(Tb,a),this.a.j("var"))};var ne=function(a){"trans"!==a.get(sc)&&500<=a.b(cc,0)&&a[ta]();if("event"===a.get(sc)){var b=(new Date).getTime(),c=a.b(dc,0),d=a.b(Zb,0),c=m[la](1*((b-(c!=d?c:1E3*c))/1E3));0<c&&(a.set(dc,b),a.set(R,m.min(10,a.b(R,0)+c)));0>=a.b(R,0)&&a[ta]()}},pe=function(a){"event"===a.get(sc)&&a.set(R,m.max(0,a.b(R,10)-1))};var qe=function(){var a=[];this.add=function(b,c,d){d&&(c=G(""+c));a[n](b+"="+c)};this.toString=function(){return a[C]("&")}},re=function(a,b){(b||2!=a.get(xb))&&a.z(cc)},se=function(a,b){b.add("utmwv","5.3.9");b.add("utms",a.get(cc));b.add("utmn",Ea());var c=J[z].hostname;F(c)||b.add("utmhn",c,h);c=a.get(vb);100!=c&&b.add("utmsp",c,h)},te=function(a,b){b.add("utmac",Da(a.get(Wa)));a.get(Oc)&&b.add("utmxkey",a.get(Oc),h);a.get(vc)&&b.add("utmni",1);var c=a.get(Ic);c&&0<c[w]&&b.add("utmdid",c[C]("."));
var c=function(a,b){b&&d[n](a+"="+b+";")},d=[];c("__utma",cd(a));c("__utmz",hd(a,l));c("__utmv",fd(a,h));c("__utmx",be(a));b.add("utmcc",d[C]("+"),h);a.get(Xa)!==l&&(a.get(Xa)||M.w)&&b.add("aip",1);b.add("utmu",od.Xa())},ue=function(a,b){for(var c=a.get(Fc)||[],d=[],e=1;e<c[w];e++)c[e]&&d[n](e+":"+G(c[e][p](/%/g,"%25")[p](/:/g,"%3A")[p](/,/g,"%2C")));d[w]&&b.add("utmpg",d[C](","))},ve=function(a,b){a.get(ib)&&(b.add("utmcs",a.get(Qb),h),b.add("utmsr",a.get(Lb)),a.get(Rb)&&b.add("utmvp",a.get(Rb)),
b.add("utmsc",a.get(Mb)),b.add("utmul",a.get(Pb)),b.add("utmje",a.get(Nb)),b.add("utmfl",a.get(Ob),h))},we=function(a,b){a.get(lb)&&a.get(Ib)&&b.add("utmdt",a.get(Ib),h);b.add("utmhid",a.get(Kb));b.add("utmr",Pa(a.get(Jb),a.get(P)),h);b.add("utmp",G(a.get(Hb),h),h)},xe=function(a,b){for(var c=a.get(Db),d=a.get(Eb),e=a.get(Fb)||[],f=0;f<e[w];f++){var j=e[f];j&&(c||(c=new yd),c.f(8,f,j[r]),c.f(9,f,j[na]),3!=j[ua]&&c.f(11,f,""+j[ua]))}!F(a.get(wc))&&!F(a.get(xc),h)&&(c||(c=new yd),c.f(5,1,a.get(wc)),
c.f(5,2,a.get(xc)),e=a.get(yc),e!=g&&c.f(5,3,e),e=a.get(zc),e!=g&&c.o(5,1,e));c?b.add("utme",c.Qa(d),h):d&&b.add("utme",d.A(),h)},ye=function(a,b,c){var d=new qe;re(a,c);se(a,d);d.add("utmt","tran");d.add("utmtid",b.id_,h);d.add("utmtst",b.affiliation_,h);d.add("utmtto",b.total_,h);d.add("utmttx",b.tax_,h);d.add("utmtsp",b.shipping_,h);d.add("utmtci",b.city_,h);d.add("utmtrg",b.state_,h);d.add("utmtco",b.country_,h);xe(a,d);ve(a,d);we(a,d);(b=a.get(Gb))&&d.add("utmcu",b,h);c||(ue(a,d),te(a,d));return d[v]()},
ze=function(a,b,c){var d=new qe;re(a,c);se(a,d);d.add("utmt","item");d.add("utmtid",b.transId_,h);d.add("utmipc",b.sku_,h);d.add("utmipn",b.name_,h);d.add("utmiva",b.category_,h);d.add("utmipr",b.price_,h);d.add("utmiqt",b.quantity_,h);xe(a,d);ve(a,d);we(a,d);(b=a.get(Gb))&&d.add("utmcu",b,h);c||(ue(a,d),te(a,d));return d[v]()},Ae=function(a,b){var c=a.get(sc);if("page"==c)c=new qe,re(a,b),se(a,c),xe(a,c),ve(a,c),we(a,c),b||(ue(a,c),te(a,c)),c=[c[v]()];else if("event"==c)c=new qe,re(a,b),se(a,c),
c.add("utmt","event"),xe(a,c),ve(a,c),we(a,c),b||(ue(a,c),te(a,c)),c=[c[v]()];else if("var"==c)c=new qe,re(a,b),se(a,c),c.add("utmt","var"),!b&&te(a,c),c=[c[v]()];else if("trans"==c)for(var c=[],d=a.get(Cb),e=0;e<d[w];++e){c[n](ye(a,d[e],b));for(var f=d[e].items_,j=0;j<f[w];++j)c[n](ze(a,f[j],b))}else"social"==c?b?c=[]:(c=new qe,re(a,b),se(a,c),c.add("utmt","social"),c.add("utmsn",a.get(Ac),h),c.add("utmsa",a.get(Bc),h),c.add("utmsid",a.get(Cc),h),xe(a,c),ve(a,c),we(a,c),ue(a,c),te(a,c),c=[c[v]()]):
"feedback"==c?b?c=[]:(c=new qe,re(a,b),se(a,c),c.add("utmt","feedback"),c.add("utmfbid",a.get(Gc),h),c.add("utmfbpr",a.get(Hc),h),xe(a,c),ve(a,c),we(a,c),ue(a,c),te(a,c),c=[c[v]()]):c=[];return c},oe=function(a){var b,c=a.get(xb),d=a.get(uc),e=d&&d.Ua,f=0;if(0==c||2==c){var j=a.get(wb)+"?";b=Ae(a,h);for(var k=0,s=b[w];k<s;k++)Sa(b[k],e,j,h),f++}if(1==c||2==c){b=Ae(a);k=0;for(s=b[w];k<s;k++)try{Sa(b[k],e),f++}catch(t){t&&Ra(t[r],g,t.message)}}d&&(d.q=f)};var Be=function(){return"https:"==J[z][A]||M.G?"https://ssl.google-analytics.com":"http://www.google-analytics.com"},Ce=function(a){ha(this,"len");this.message=a+"-8192"},De=function(a){ha(this,"ff2post");this.message=a+"-2036"},Sa=function(a,b,c,d){b=b||Fa;if(d||2036>=a[w]){var e=b;b=c||Be()+"/__utm.gif?";var f=new Image(1,1);f.src=b+a;f.onload=function(){f.onload=i;f.onerror=i;e()};f.onerror=function(){f.onload=i;f.onerror=i;e()}}else if(8192>=a[w]){var j=b;if(0<=W[za].userAgent[q]("Firefox")&&
![].reduce)throw new De(a[w]);var k;b=Be()+"/p/__utm.gif";if(c=W.XDomainRequest)k=new c,k.open("POST",b);else if(c=W.XMLHttpRequest)c=new c,"withCredentials"in c&&(k=c,k.open("POST",b,h),k.setRequestHeader("Content-Type","text/plain"));k?(k.onreadystatechange=function(){4==k.readyState&&(j(),k=i)},k.send(a),b=h):b=g;b||Ee(a,j)}else throw new Ce(a[w]);},Ee=function(a,b){if(J.body){a=aa(a);try{var c=J[qa]('<iframe name="'+a+'"></iframe>')}catch(d){c=J[qa]("iframe"),ha(c,a)}c.height="0";c.width="0";
c.style.display="none";c.style.visibility="hidden";var e=J[z],e=Be()+"/u/post_iframe.html#"+aa(e[A]+"//"+e[u]+"/favicon.ico"),f=function(){c.src="";c.parentNode&&c.parentNode.removeChild(c)};Ga(W,"beforeunload",f);var j=l,k=0,s=function(){if(!j){try{if(9<k||c.contentWindow[z][u]==J[z][u]){j=h;f();Ha(W,"beforeunload",f);b();return}}catch(a){}k++;ca(s,200)}};Ga(c,"load",s);J.body.appendChild(c);c.src=e}else ca(function(){Ee(a,b)},100)};var $=function(){this.G=this.w=l;this.C={};this.D=[];this.U=0;this.S=[["www.google-analytics.com","","/plugins/"]];this._gasoCPath=this._gasoDomain=g;var a=function(a,c,d){T($[x],a,c,d)};a("_createTracker",$[x].r,55);a("_getTracker",$[x].oa,0);a("_getTrackerByName",$[x].u,51);a("_getTrackers",$[x].pa,130);a("_anonymizeIp",$[x].aa,16);a("_forceSSL",$[x].la,125);a("_getPlugin",Pc,120);a=function(a,c,d){T(U[x],a,c,d)};Qc("_getName",$a,58);Qc("_getAccount",Wa,64);Qc("_visitCode",Q,54);Qc("_getClientInfo",
ib,53,1);Qc("_getDetectTitle",lb,56,1);Qc("_getDetectFlash",jb,65,1);Qc("_getLocalGifPath",wb,57);Qc("_getServiceMode",xb,59);V("_setClientInfo",ib,66,2);V("_setAccount",Wa,3);V("_setNamespace",Ya,48);V("_setAllowLinker",fb,11,2);V("_setDetectFlash",jb,61,2);V("_setDetectTitle",lb,62,2);V("_setLocalGifPath",wb,46,0);V("_setLocalServerMode",xb,92,g,0);V("_setRemoteServerMode",xb,63,g,1);V("_setLocalRemoteServerMode",xb,47,g,2);V("_setSampleRate",vb,45,1);V("_setCampaignTrack",kb,36,2);V("_setAllowAnchor",
gb,7,2);V("_setCampNameKey",ob,41);V("_setCampContentKey",tb,38);V("_setCampIdKey",nb,39);V("_setCampMediumKey",rb,40);V("_setCampNOKey",ub,42);V("_setCampSourceKey",qb,43);V("_setCampTermKey",sb,44);V("_setCampCIdKey",pb,37);V("_setCookiePath",P,9,0);V("_setMaxCustomVariables",yb,0,1);V("_setVisitorCookieTimeout",cb,28,1);V("_setSessionCookieTimeout",db,26,1);V("_setCampaignCookieTimeout",eb,29,1);V("_setReferrerOverride",Jb,49);V("_setSiteSpeedSampleRate",Dc,132);a("_trackPageview",U[x].Fa,1);a("_trackEvent",
U[x].F,4);a("_trackPageLoadTime",U[x].Ea,100);a("_trackSocial",U[x].Ga,104);a("_trackTrans",U[x].Ia,18);a("_sendXEvent",U[x].t,78);a("_createEventTracker",U[x].ia,74);a("_getVersion",U[x].qa,60);a("_setDomainName",U[x].B,6);a("_setAllowHash",U[x].va,8);a("_getLinkerUrl",U[x].na,52);a("_link",U[x].link,101);a("_linkByPost",U[x].ua,102);a("_setTrans",U[x].za,20);a("_addTrans",U[x].$,21);a("_addItem",U[x].Y,19);a("_clearTrans",U[x].ea,105);a("_setTransactionDelim",U[x].Aa,82);a("_setCustomVar",U[x].wa,
10);a("_deleteCustomVar",U[x].ka,35);a("_getVisitorCustomVar",U[x].ra,50);a("_setXKey",U[x].Ca,83);a("_setXValue",U[x].Da,84);a("_getXKey",U[x].sa,76);a("_getXValue",U[x].ta,77);a("_clearXKey",U[x].fa,72);a("_clearXValue",U[x].ga,73);a("_createXObj",U[x].ja,75);a("_addIgnoredOrganic",U[x].W,15);a("_clearIgnoredOrganic",U[x].ba,97);a("_addIgnoredRef",U[x].X,31);a("_clearIgnoredRef",U[x].ca,32);a("_addOrganic",U[x].Z,14);a("_clearOrganic",U[x].da,70);a("_cookiePathCopy",U[x].ha,30);a("_get",U[x].ma,
106);a("_set",U[x].xa,107);a("_addEventListener",U[x].addEventListener,108);a("_removeEventListener",U[x].removeEventListener,109);a("_addDevId",U[x].V);a("_getPlugin",Pc,122);a("_setPageGroup",U[x].ya,126);a("_trackTiming",U[x].Ha,124);a("_initData",U[x].v,2);a("_setVar",U[x].Ba,22);V("_setSessionTimeout",db,27,3);V("_setCookieTimeout",eb,25,3);V("_setCookiePersistence",cb,24,1);a("_setAutoTrackOutbound",Fa,79);a("_setTrackOutboundSubdomains",Fa,81);a("_setHrefExamineLimit",Fa,80)};E=$[x];
E.oa=function(a,b){return this.r(a,g,b)};E.r=function(a,b,c){b&&H(23);c&&H(67);b==g&&(b="~"+M.U++);a=new U(b,a,c);M.C[b]=a;M.D[n](a);return a};E.u=function(a){a=a||"";return M.C[a]||M.r(g,a)};E.pa=function(){return M.D[ja](0)};E.aa=function(){this.w=h};E.la=function(){this.G=h};var Fe=function(a){if("prerender"==J.webkitVisibilityState)return l;a();return h};var M=new $;var Ge=W._gat;Ge&&Ba(Ge._getTracker)?M=Ge:W._gat=M;var Z=new Y;var He=function(){var a=W._gaq,b=l;if(a&&Ba(a[n])&&(b="[object Array]"==Object[x][v].call(Object(a)),!b)){Z=a;return}W._gaq=Z;b&&Z[n][ya](Z,a)};if(!Fe(He)){H(123);var Ie=l,Je=function(){!Ie&&Fe(He)&&(Ie=h,Ha(J,"webkitvisibilitychange",Je))};Ga(J,"webkitvisibilitychange",Je)};function Yc(a){var b=1,c=0,d;if(a){b=0;for(d=a[w]-1;0<=d;d--)c=a.charCodeAt(d),b=(b<<6&268435455)+c+(c<<14),c=b&266338304,b=0!=c?b^c>>21:b}return b};})();

